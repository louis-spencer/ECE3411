
Final_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00804000  000029d4  00002a68  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000371  0080408e  0080408e  00002af6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002af6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002b54  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00002b94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007374  00000000  00000000  00002e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003ac7  00000000  00000000  0000a180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000187f  00000000  00000000  0000dc47  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000092c  00000000  00000000  0000f4c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000297f  00000000  00000000  0000fdf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002572  00000000  00000000  00012773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000238  00000000  00000000  00014ce5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1d 01 	jmp	0x23a	; 0x23a <__ctors_end>
       4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
       c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      10:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      14:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      18:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      1c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      20:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      24:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_9>
      28:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      2c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      30:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      34:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      38:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      3c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      40:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      44:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      48:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      4c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      50:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      54:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      58:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      5c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      60:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      64:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      68:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      6c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      70:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      74:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      78:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      7c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      80:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      84:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      88:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      8c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      90:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      94:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      98:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      9c:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      a0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      a4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      a8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      ac:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      b0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      b4:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_45>
      b8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      bc:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      c0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      c4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      c8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      cc:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      d0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      d4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      d8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      dc:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      e0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      e4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      e8:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      ec:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      f0:	0c 94 3c 01 	jmp	0x278	; 0x278 <__bad_interrupt>
      f4:	08 4a       	sbci	r16, 0xA8	; 168
      f6:	d7 3b       	cpi	r29, 0xB7	; 183
      f8:	3b ce       	rjmp	.-906    	; 0xfffffd70 <__eeprom_end+0xff7efd70>
      fa:	01 6e       	ori	r16, 0xE1	; 225
      fc:	84 bc       	out	0x24, r8	; 36
      fe:	bf fd       	.word	0xfdbf	; ????
     100:	c1 2f       	mov	r28, r17
     102:	3d 6c       	ori	r19, 0xCD	; 205
     104:	74 31       	cpi	r23, 0x14	; 20
     106:	9a bd       	out	0x2a, r25	; 42
     108:	56 83       	std	Z+6, r21	; 0x06
     10a:	3d da       	rcall	.-2950   	; 0xfffff586 <__eeprom_end+0xff7ef586>
     10c:	3d 00       	.word	0x003d	; ????
     10e:	c7 7f       	andi	r28, 0xF7	; 247
     110:	11 be       	out	0x31, r1	; 49
     112:	d9 e4       	ldi	r29, 0x49	; 73
     114:	bb 4c       	sbci	r27, 0xCB	; 203
     116:	3e 91       	ld	r19, -X
     118:	6b aa       	std	Y+51, r6	; 0x33
     11a:	aa be       	out	0x3a, r10	; 58
     11c:	00 00       	nop
     11e:	00 80       	ld	r0, Z
     120:	3f 05       	cpc	r19, r15
     122:	a8 4c       	sbci	r26, 0xC8	; 200
     124:	cd b2       	in	r12, 0x1d	; 29
     126:	d4 4e       	sbci	r29, 0xE4	; 228
     128:	b9 38       	cpi	r27, 0x89	; 137
     12a:	36 a9       	ldd	r19, Z+54	; 0x36
     12c:	02 0c       	add	r0, r2
     12e:	50 b9       	out	0x00, r21	; 0
     130:	91 86       	std	Z+9, r9	; 0x09
     132:	88 08       	sbc	r8, r8
     134:	3c a6       	std	Y+44, r3	; 0x2c
     136:	aa aa       	std	Y+50, r10	; 0x32
     138:	2a be       	out	0x3a, r2	; 58
     13a:	00 00       	nop
     13c:	00 80       	ld	r0, Z
     13e:	3f 00       	.word	0x003f	; ????

00000140 <__trampolines_end>:
     140:	00 40       	sbci	r16, 0x00	; 0
     142:	7a 10       	cpse	r7, r10
     144:	f3 5a       	subi	r31, 0xA3	; 163
     146:	00 a0       	ldd	r0, Z+32	; 0x20
     148:	72 4e       	sbci	r23, 0xE2	; 226
     14a:	18 09       	sbc	r17, r8
     14c:	00 10       	cpse	r0, r0
     14e:	a5 d4       	rcall	.+2378   	; 0xa9a <main+0x264>
     150:	e8 00       	.word	0x00e8	; ????
     152:	00 e8       	ldi	r16, 0x80	; 128
     154:	76 48       	sbci	r23, 0x86	; 134
     156:	17 00       	.word	0x0017	; ????
     158:	00 e4       	ldi	r16, 0x40	; 64
     15a:	0b 54       	subi	r16, 0x4B	; 75
     15c:	02 00       	.word	0x0002	; ????
     15e:	00 ca       	rjmp	.-3072   	; 0xfffff560 <__eeprom_end+0xff7ef560>
     160:	9a 3b       	cpi	r25, 0xBA	; 186
     162:	00 00       	nop
     164:	00 e1       	ldi	r16, 0x10	; 16
     166:	f5 05       	cpc	r31, r5
     168:	00 00       	nop
     16a:	80 96       	adiw	r24, 0x20	; 32
     16c:	98 00       	.word	0x0098	; ????
     16e:	00 00       	nop
     170:	40 42       	sbci	r20, 0x20	; 32
     172:	0f 00       	.word	0x000f	; ????
     174:	00 00       	nop
     176:	a0 86       	std	Z+8, r10	; 0x08
     178:	01 00       	.word	0x0001	; ????
     17a:	00 00       	nop
     17c:	10 27       	eor	r17, r16
     17e:	00 00       	nop
     180:	00 00       	nop
     182:	e8 03       	fmulsu	r22, r16
     184:	00 00       	nop
     186:	00 00       	nop
     188:	64 00       	.word	0x0064	; ????
     18a:	00 00       	nop
     18c:	00 00       	nop
     18e:	0a 00       	.word	0x000a	; ????
     190:	00 00       	nop
     192:	00 00       	nop
     194:	01 00       	.word	0x0001	; ????
     196:	00 00       	nop
     198:	00 00       	nop
     19a:	2c 76       	andi	r18, 0x6C	; 108
     19c:	d8 88       	ldd	r13, Y+16	; 0x10
     19e:	dc 67       	ori	r29, 0x7C	; 124
     1a0:	4f 08       	sbc	r4, r15
     1a2:	23 df       	rcall	.-442    	; 0xffffffea <__eeprom_end+0xff7effea>
     1a4:	c1 df       	rcall	.-126    	; 0x128 <__SREG__+0xe9>
     1a6:	ae 59       	subi	r26, 0x9E	; 158
     1a8:	e1 b1       	in	r30, 0x01	; 1
     1aa:	b7 96       	adiw	r30, 0x27	; 39
     1ac:	e5 e3       	ldi	r30, 0x35	; 53
     1ae:	e4 53       	subi	r30, 0x34	; 52
     1b0:	c6 3a       	cpi	r28, 0xA6	; 166
     1b2:	e6 51       	subi	r30, 0x16	; 22
     1b4:	99 76       	andi	r25, 0x69	; 105
     1b6:	96 e8       	ldi	r25, 0x86	; 134
     1b8:	e6 c2       	rjmp	.+1484   	; 0x786 <anim_brickbreaker+0x60>
     1ba:	84 26       	eor	r8, r20
     1bc:	eb 89       	ldd	r30, Y+19	; 0x13
     1be:	8c 9b       	sbis	0x11, 4	; 17
     1c0:	62 ed       	ldi	r22, 0xD2	; 210
     1c2:	40 7c       	andi	r20, 0xC0	; 192
     1c4:	6f fc       	.word	0xfc6f	; ????
     1c6:	ef bc       	out	0x2f, r14	; 47
     1c8:	9c 9f       	mul	r25, r28
     1ca:	40 f2       	brcs	.-112    	; 0x15c <__trampolines_end+0x1c>
     1cc:	ba a5       	ldd	r27, Y+42	; 0x2a
     1ce:	6f a5       	ldd	r22, Y+47	; 0x2f
     1d0:	f4 90       	lpm	r15, Z
     1d2:	05 5a       	subi	r16, 0xA5	; 165
     1d4:	2a f7       	brpl	.-54     	; 0x1a0 <__trampolines_end+0x60>
     1d6:	5c 93       	st	X, r21
     1d8:	6b 6c       	ori	r22, 0xCB	; 203
     1da:	f9 67       	ori	r31, 0x79	; 121
     1dc:	6d c1       	rjmp	.+730    	; 0x4b8 <anim_ripple+0xaa>
     1de:	1b fc       	.word	0xfc1b	; ????
     1e0:	e0 e4       	ldi	r30, 0x40	; 64
     1e2:	0d 47       	sbci	r16, 0x7D	; 125
     1e4:	fe f5       	brtc	.+126    	; 0x264 <__do_clear_bss+0x4>
     1e6:	20 e6       	ldi	r18, 0x60	; 96
     1e8:	b5 00       	.word	0x00b5	; ????
     1ea:	d0 ed       	ldi	r29, 0xD0	; 208
     1ec:	90 2e       	mov	r9, r16
     1ee:	03 00       	.word	0x0003	; ????
     1f0:	94 35       	cpi	r25, 0x54	; 84
     1f2:	77 05       	cpc	r23, r7
     1f4:	00 80       	ld	r0, Z
     1f6:	84 1e       	adc	r8, r20
     1f8:	08 00       	.word	0x0008	; ????
     1fa:	00 20       	and	r0, r0
     1fc:	4e 0a       	sbc	r4, r30
     1fe:	00 00       	nop
     200:	00 c8       	rjmp	.-4096   	; 0xfffff202 <__eeprom_end+0xff7ef202>
     202:	0c 33       	cpi	r16, 0x3C	; 60
     204:	33 33       	cpi	r19, 0x33	; 51
     206:	33 0f       	add	r19, r19
     208:	98 6e       	ori	r25, 0xE8	; 232
     20a:	12 83       	std	Z+2, r17	; 0x02
     20c:	11 41       	sbci	r17, 0x11	; 17
     20e:	ef 8d       	ldd	r30, Y+31	; 0x1f
     210:	21 14       	cp	r2, r1
     212:	89 3b       	cpi	r24, 0xB9	; 185
     214:	e6 55       	subi	r30, 0x56	; 86
     216:	16 cf       	rjmp	.-468    	; 0x44 <__SREG__+0x5>
     218:	fe e6       	ldi	r31, 0x6E	; 110
     21a:	db 18       	sub	r13, r11
     21c:	d1 84       	ldd	r13, Z+9	; 0x09
     21e:	4b 38       	cpi	r20, 0x8B	; 139
     220:	1b f7       	brvc	.-58     	; 0x1e8 <__trampolines_end+0xa8>
     222:	7c 1d       	adc	r23, r12
     224:	90 1d       	adc	r25, r0
     226:	a4 bb       	out	0x14, r26	; 20
     228:	e4 24       	eor	r14, r4
     22a:	20 32       	cpi	r18, 0x20	; 32
     22c:	84 72       	andi	r24, 0x24	; 36
     22e:	5e 22       	and	r5, r30
     230:	81 00       	.word	0x0081	; ????
     232:	c9 f1       	breq	.+114    	; 0x2a6 <init_ADC0+0xa>
     234:	24 ec       	ldi	r18, 0xC4	; 196
     236:	a1 e5       	ldi	r26, 0x51	; 81
     238:	3d 27       	eor	r19, r29

0000023a <__ctors_end>:
     23a:	11 24       	eor	r1, r1
     23c:	1f be       	out	0x3f, r1	; 63
     23e:	cf ef       	ldi	r28, 0xFF	; 255
     240:	cd bf       	out	0x3d, r28	; 61
     242:	df e7       	ldi	r29, 0x7F	; 127
     244:	de bf       	out	0x3e, r29	; 62

00000246 <__do_copy_data>:
     246:	10 e4       	ldi	r17, 0x40	; 64
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b0 e4       	ldi	r27, 0x40	; 64
     24c:	e4 ed       	ldi	r30, 0xD4	; 212
     24e:	f9 e2       	ldi	r31, 0x29	; 41
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	ae 38       	cpi	r26, 0x8E	; 142
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	23 e4       	ldi	r18, 0x43	; 67
     262:	ae e8       	ldi	r26, 0x8E	; 142
     264:	b0 e4       	ldi	r27, 0x40	; 64
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	af 3f       	cpi	r26, 0xFF	; 255
     26c:	b2 07       	cpc	r27, r18
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	0e 94 1b 04 	call	0x836	; 0x836 <main>
     274:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <_exit>

00000278 <__bad_interrupt>:
     278:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000027c <init_clock>:
int16_t exp_filter(float alpha, int16_t prev, int16_t curr) {
	float res;
	if (abs(curr - prev) > 5) res = prev;
	else res = (1.0*alpha*curr - (1.0-alpha)*prev);
	return (int16_t)res;
}
     27c:	88 ed       	ldi	r24, 0xD8	; 216
     27e:	84 bf       	out	0x34, r24	; 52
     280:	e0 e6       	ldi	r30, 0x60	; 96
     282:	f0 e0       	ldi	r31, 0x00	; 0
     284:	95 e0       	ldi	r25, 0x05	; 5
     286:	90 a3       	std	Z+32, r25	; 0x20
     288:	84 bf       	out	0x34, r24	; 52
     28a:	93 e0       	ldi	r25, 0x03	; 3
     28c:	90 83       	st	Z, r25
     28e:	84 bf       	out	0x34, r24	; 52
     290:	11 82       	std	Z+1, r1	; 0x01
     292:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     296:	84 ff       	sbrs	r24, 4
     298:	fc cf       	rjmp	.-8      	; 0x292 <init_clock+0x16>
     29a:	08 95       	ret

0000029c <init_ADC0>:
     29c:	e0 e0       	ldi	r30, 0x00	; 0
     29e:	f6 e0       	ldi	r31, 0x06	; 6
     2a0:	88 e0       	ldi	r24, 0x08	; 8
     2a2:	80 87       	std	Z+8, r24	; 0x08
     2a4:	84 e0       	ldi	r24, 0x04	; 4
     2a6:	82 83       	std	Z+2, r24	; 0x02
     2a8:	80 e2       	ldi	r24, 0x20	; 32
     2aa:	83 83       	std	Z+3, r24	; 0x03
     2ac:	85 e0       	ldi	r24, 0x05	; 5
     2ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	90 83       	st	Z, r25
     2b6:	80 81       	ld	r24, Z
     2b8:	8f 7e       	andi	r24, 0xEF	; 239
     2ba:	80 83       	st	Z, r24
     2bc:	92 87       	std	Z+10, r25	; 0x0a
     2be:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     2c2:	80 fd       	sbrc	r24, 0
     2c4:	fc cf       	rjmp	.-8      	; 0x2be <init_ADC0+0x22>
     2c6:	08 95       	ret

000002c8 <start_ADC0>:
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     2ce:	08 95       	ret

000002d0 <read_ADC0>:
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	ec 01       	movw	r28, r24
     2d6:	60 91 10 06 	lds	r22, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x7e0610>
     2da:	70 91 11 06 	lds	r23, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x7e0611>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	0e 94 a8 0c 	call	0x1950	; 0x1950 <__floatunsisf>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e8       	ldi	r20, 0x80	; 128
     2ec:	59 e3       	ldi	r21, 0x39	; 57
     2ee:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     2f2:	68 83       	st	Y, r22
     2f4:	79 83       	std	Y+1, r23	; 0x01
     2f6:	8a 83       	std	Y+2, r24	; 0x02
     2f8:	9b 83       	std	Y+3, r25	; 0x03
     2fa:	0e 94 64 01 	call	0x2c8	; 0x2c8 <start_ADC0>
     2fe:	df 91       	pop	r29
     300:	cf 91       	pop	r28
     302:	08 95       	ret

00000304 <init_TCA0>:
     304:	e0 e0       	ldi	r30, 0x00	; 0
     306:	fa e0       	ldi	r31, 0x0A	; 10
     308:	11 82       	std	Z+1, r1	; 0x01
     30a:	89 ef       	ldi	r24, 0xF9	; 249
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	86 a3       	std	Z+38, r24	; 0x26
     310:	97 a3       	std	Z+39, r25	; 0x27
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	82 87       	std	Z+10, r24	; 0x0a
     316:	80 81       	ld	r24, Z
     318:	8b 60       	ori	r24, 0x0B	; 11
     31a:	80 83       	st	Z, r24
     31c:	08 95       	ret

0000031e <init_btn>:
     31e:	e0 e2       	ldi	r30, 0x20	; 32
     320:	f4 e0       	ldi	r31, 0x04	; 4
     322:	82 89       	ldd	r24, Z+18	; 0x12
     324:	8a 60       	ori	r24, 0x0A	; 10
     326:	82 8b       	std	Z+18, r24	; 0x12
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	82 83       	std	Z+2, r24	; 0x02
     32c:	08 95       	ret

0000032e <__vector_9>:
			}
		}
    }
}

ISR(TCA0_OVF_vect) {
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	0b b6       	in	r0, 0x3b	; 59
     33a:	0f 92       	push	r0
     33c:	2f 93       	push	r18
     33e:	8f 93       	push	r24
     340:	9f 93       	push	r25
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	if (millis < UINT16_MAX) millis++;
     346:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <millis>
     34a:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <millis+0x1>
     34e:	01 96       	adiw	r24, 0x01	; 1
     350:	49 f0       	breq	.+18     	; 0x364 <__vector_9+0x36>
     352:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <millis>
     356:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <millis+0x1>
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	80 93 a1 40 	sts	0x40A1, r24	; 0x8040a1 <millis>
     360:	90 93 a2 40 	sts	0x40A2, r25	; 0x8040a2 <millis+0x1>
	if (tc_btn2 < INT_MAX) tc_btn2++;
     364:	80 91 9f 40 	lds	r24, 0x409F	; 0x80409f <tc_btn2>
     368:	90 91 a0 40 	lds	r25, 0x40A0	; 0x8040a0 <tc_btn2+0x1>
     36c:	8f 3f       	cpi	r24, 0xFF	; 255
     36e:	9f 47       	sbci	r25, 0x7F	; 127
     370:	49 f0       	breq	.+18     	; 0x384 <__vector_9+0x56>
     372:	80 91 9f 40 	lds	r24, 0x409F	; 0x80409f <tc_btn2>
     376:	90 91 a0 40 	lds	r25, 0x40A0	; 0x8040a0 <tc_btn2+0x1>
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	80 93 9f 40 	sts	0x409F, r24	; 0x80409f <tc_btn2>
     380:	90 93 a0 40 	sts	0x40A0, r25	; 0x8040a0 <tc_btn2+0x1>
	if (tc_btn2 >= DEBOUNCE_TIME && BTN2) btn2_flag = 1;
     384:	80 91 9f 40 	lds	r24, 0x409F	; 0x80409f <tc_btn2>
     388:	90 91 a0 40 	lds	r25, 0x40A0	; 0x8040a0 <tc_btn2+0x1>
     38c:	0a 97       	sbiw	r24, 0x0a	; 10
     38e:	2c f0       	brlt	.+10     	; 0x39a <__vector_9+0x6c>
     390:	32 99       	sbic	0x06, 2	; 6
     392:	03 c0       	rjmp	.+6      	; 0x39a <__vector_9+0x6c>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	80 93 9e 40 	sts	0x409E, r24	; 0x80409e <btn2_flag>
	TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
     39a:	e0 e0       	ldi	r30, 0x00	; 0
     39c:	fa e0       	ldi	r31, 0x0A	; 10
     39e:	83 85       	ldd	r24, Z+11	; 0x0b
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	83 87       	std	Z+11, r24	; 0x0b
}
     3a4:	ff 91       	pop	r31
     3a6:	ef 91       	pop	r30
     3a8:	9f 91       	pop	r25
     3aa:	8f 91       	pop	r24
     3ac:	2f 91       	pop	r18
     3ae:	0f 90       	pop	r0
     3b0:	0b be       	out	0x3b, r0	; 59
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_45>:

ISR(PORTB_PORT_vect) {
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	0b b6       	in	r0, 0x3b	; 59
     3c8:	0f 92       	push	r0
     3ca:	8f 93       	push	r24
     3cc:	9f 93       	push	r25
     3ce:	ef 93       	push	r30
     3d0:	ff 93       	push	r31
	if (PORTB.INTFLAGS & PIN2_bm) {
     3d2:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
     3d6:	82 ff       	sbrs	r24, 2
     3d8:	0f c0       	rjmp	.+30     	; 0x3f8 <__vector_45+0x3c>
		PORTB.INTFLAGS |= PIN2_bm;
     3da:	e0 e2       	ldi	r30, 0x20	; 32
     3dc:	f4 e0       	ldi	r31, 0x04	; 4
     3de:	81 85       	ldd	r24, Z+9	; 0x09
     3e0:	84 60       	ori	r24, 0x04	; 4
     3e2:	81 87       	std	Z+9, r24	; 0x09
		if (tc_btn2 >= DEBOUNCE_TIME) tc_btn2 = 0;
     3e4:	80 91 9f 40 	lds	r24, 0x409F	; 0x80409f <tc_btn2>
     3e8:	90 91 a0 40 	lds	r25, 0x40A0	; 0x8040a0 <tc_btn2+0x1>
     3ec:	0a 97       	sbiw	r24, 0x0a	; 10
     3ee:	24 f0       	brlt	.+8      	; 0x3f8 <__vector_45+0x3c>
     3f0:	10 92 9f 40 	sts	0x409F, r1	; 0x80409f <tc_btn2>
     3f4:	10 92 a0 40 	sts	0x40A0, r1	; 0x8040a0 <tc_btn2+0x1>
	}
}
     3f8:	ff 91       	pop	r31
     3fa:	ef 91       	pop	r30
     3fc:	9f 91       	pop	r25
     3fe:	8f 91       	pop	r24
     400:	0f 90       	pop	r0
     402:	0b be       	out	0x3b, r0	; 59
     404:	0f 90       	pop	r0
     406:	0f be       	out	0x3f, r0	; 63
     408:	0f 90       	pop	r0
     40a:	1f 90       	pop	r1
     40c:	18 95       	reti

0000040e <anim_ripple>:

void anim_ripple(void) {
     40e:	ef 92       	push	r14
     410:	ff 92       	push	r15
     412:	0f 93       	push	r16
	static uint8_t g = 0;
	static uint8_t anim = 0;
	
	if (abs(acc_z_prev - acc_z) > 5) {
     414:	80 91 92 40 	lds	r24, 0x4092	; 0x804092 <acc_z_prev>
     418:	90 91 93 40 	lds	r25, 0x4093	; 0x804093 <acc_z_prev+0x1>
     41c:	20 91 98 40 	lds	r18, 0x4098	; 0x804098 <acc_z>
     420:	30 91 99 40 	lds	r19, 0x4099	; 0x804099 <acc_z+0x1>
     424:	82 1b       	sub	r24, r18
     426:	93 0b       	sbc	r25, r19
     428:	9c 01       	movw	r18, r24
     42a:	22 f4       	brpl	.+8      	; 0x434 <anim_ripple+0x26>
     42c:	22 27       	eor	r18, r18
     42e:	33 27       	eor	r19, r19
     430:	28 1b       	sub	r18, r24
     432:	39 0b       	sbc	r19, r25
     434:	26 30       	cpi	r18, 0x06	; 6
     436:	31 05       	cpc	r19, r1
     438:	3c f0       	brlt	.+14     	; 0x448 <anim_ripple+0x3a>
		anim = 1;
     43a:	81 e0       	ldi	r24, 0x01	; 1
     43c:	80 93 8f 40 	sts	0x408F, r24	; 0x80408f <anim.5041>
		printf("trigd\n");
     440:	89 e4       	ldi	r24, 0x49	; 73
     442:	90 e4       	ldi	r25, 0x40	; 64
     444:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <puts>
	}
	
	
	LED_fill_color(leds, *BLACK, NUM_LEDS);
     448:	e0 91 0f 40 	lds	r30, 0x400F	; 0x80400f <BLACK>
     44c:	f0 91 10 40 	lds	r31, 0x4010	; 0x804010 <BLACK+0x1>
     450:	40 81       	ld	r20, Z
     452:	51 81       	ldd	r21, Z+1	; 0x01
     454:	62 81       	ldd	r22, Z+2	; 0x02
     456:	2f ef       	ldi	r18, 0xFF	; 255
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	85 ef       	ldi	r24, 0xF5	; 245
     45c:	90 e4       	ldi	r25, 0x40	; 64
     45e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LED_fill_color>
	if (anim > 0) {
     462:	80 91 8f 40 	lds	r24, 0x408F	; 0x80408f <anim.5041>
     466:	88 23       	and	r24, r24
     468:	b1 f1       	breq	.+108    	; 0x4d6 <anim_ripple+0xc8>
		g++;
     46a:	80 91 8e 40 	lds	r24, 0x408E	; 0x80408e <__data_end>
     46e:	8f 5f       	subi	r24, 0xFF	; 255
     470:	80 93 8e 40 	sts	0x408E, r24	; 0x80408e <__data_end>
		Matrix_circle(leds, 7, 7, g%radius, *TEAL);
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	60 91 90 40 	lds	r22, 0x4090	; 0x804090 <radius>
     47a:	70 91 91 40 	lds	r23, 0x4091	; 0x804091 <radius+0x1>
     47e:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__udivmodhi4>
     482:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <TEAL>
     486:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <TEAL+0x1>
     48a:	e0 80       	ld	r14, Z
     48c:	f1 80       	ldd	r15, Z+1	; 0x01
     48e:	02 81       	ldd	r16, Z+2	; 0x02
     490:	9c 01       	movw	r18, r24
     492:	47 e0       	ldi	r20, 0x07	; 7
     494:	50 e0       	ldi	r21, 0x00	; 0
     496:	67 e0       	ldi	r22, 0x07	; 7
     498:	70 e0       	ldi	r23, 0x00	; 0
     49a:	85 ef       	ldi	r24, 0xF5	; 245
     49c:	90 e4       	ldi	r25, 0x40	; 64
     49e:	0e 94 aa 07 	call	0xf54	; 0xf54 <Matrix_circle>
		Matrix_circle(leds, 7, 7, (g-5)%radius, *TEAL);
     4a2:	80 91 8e 40 	lds	r24, 0x408E	; 0x80408e <__data_end>
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	05 97       	sbiw	r24, 0x05	; 5
     4aa:	60 91 90 40 	lds	r22, 0x4090	; 0x804090 <radius>
     4ae:	70 91 91 40 	lds	r23, 0x4091	; 0x804091 <radius+0x1>
     4b2:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <__udivmodhi4>
     4b6:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <TEAL>
     4ba:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <TEAL+0x1>
     4be:	e0 80       	ld	r14, Z
     4c0:	f1 80       	ldd	r15, Z+1	; 0x01
     4c2:	02 81       	ldd	r16, Z+2	; 0x02
     4c4:	9c 01       	movw	r18, r24
     4c6:	47 e0       	ldi	r20, 0x07	; 7
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	67 e0       	ldi	r22, 0x07	; 7
     4cc:	70 e0       	ldi	r23, 0x00	; 0
     4ce:	85 ef       	ldi	r24, 0xF5	; 245
     4d0:	90 e4       	ldi	r25, 0x40	; 64
     4d2:	0e 94 aa 07 	call	0xf54	; 0xf54 <Matrix_circle>
	}
	
	LED_show(leds, NUM_LEDS);
     4d6:	6f ef       	ldi	r22, 0xFF	; 255
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	85 ef       	ldi	r24, 0xF5	; 245
     4dc:	90 e4       	ldi	r25, 0x40	; 64
     4de:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LED_show>
	if (g > 20) {
     4e2:	80 91 8e 40 	lds	r24, 0x408E	; 0x80408e <__data_end>
     4e6:	85 31       	cpi	r24, 0x15	; 21
     4e8:	20 f0       	brcs	.+8      	; 0x4f2 <anim_ripple+0xe4>
		anim = 0;
     4ea:	10 92 8f 40 	sts	0x408F, r1	; 0x80408f <anim.5041>
		g = 0;
     4ee:	10 92 8e 40 	sts	0x408E, r1	; 0x80408e <__data_end>
	}
}
     4f2:	0f 91       	pop	r16
     4f4:	ff 90       	pop	r15
     4f6:	ef 90       	pop	r14
     4f8:	08 95       	ret

000004fa <anim_debug>:

void anim_debug(void) {
     4fa:	4f 92       	push	r4
     4fc:	5f 92       	push	r5
     4fe:	6f 92       	push	r6
     500:	7f 92       	push	r7
     502:	8f 92       	push	r8
     504:	9f 92       	push	r9
     506:	af 92       	push	r10
     508:	bf 92       	push	r11
     50a:	cf 92       	push	r12
     50c:	df 92       	push	r13
     50e:	ef 92       	push	r14
     510:	ff 92       	push	r15
     512:	0f 93       	push	r16
     514:	1f 93       	push	r17
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
	float theta = atan2(acc_y, acc_x);
     51a:	c0 91 9c 40 	lds	r28, 0x409C	; 0x80409c <acc_x>
     51e:	d0 91 9d 40 	lds	r29, 0x409D	; 0x80409d <acc_x+0x1>
     522:	be 01       	movw	r22, r28
     524:	0d 2e       	mov	r0, r29
     526:	00 0c       	add	r0, r0
     528:	88 0b       	sbc	r24, r24
     52a:	99 0b       	sbc	r25, r25
     52c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     530:	4b 01       	movw	r8, r22
     532:	5c 01       	movw	r10, r24
     534:	e0 90 9a 40 	lds	r14, 0x409A	; 0x80409a <acc_y>
     538:	f0 90 9b 40 	lds	r15, 0x409B	; 0x80409b <acc_y+0x1>
     53c:	b7 01       	movw	r22, r14
     53e:	0f 2c       	mov	r0, r15
     540:	00 0c       	add	r0, r0
     542:	88 0b       	sbc	r24, r24
     544:	99 0b       	sbc	r25, r25
     546:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     54a:	a5 01       	movw	r20, r10
     54c:	94 01       	movw	r18, r8
     54e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <atan2>
     552:	4b 01       	movw	r8, r22
     554:	5c 01       	movw	r10, r24
	float mag = (sqrt(acc_x*acc_x + acc_y*acc_y)/10);
     556:	cc 9f       	mul	r28, r28
     558:	60 01       	movw	r12, r0
     55a:	cd 9f       	mul	r28, r29
     55c:	d0 0c       	add	r13, r0
     55e:	d0 0c       	add	r13, r0
     560:	11 24       	eor	r1, r1
     562:	ee 9c       	mul	r14, r14
     564:	c0 01       	movw	r24, r0
     566:	ef 9c       	mul	r14, r15
     568:	90 0d       	add	r25, r0
     56a:	90 0d       	add	r25, r0
     56c:	11 24       	eor	r1, r1
     56e:	c8 0e       	add	r12, r24
     570:	d9 1e       	adc	r13, r25
     572:	0d 2c       	mov	r0, r13
     574:	00 0c       	add	r0, r0
     576:	ee 08       	sbc	r14, r14
     578:	ff 08       	sbc	r15, r15
     57a:	c7 01       	movw	r24, r14
     57c:	b6 01       	movw	r22, r12
     57e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     582:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <sqrt>
     586:	20 e0       	ldi	r18, 0x00	; 0
     588:	30 e0       	ldi	r19, 0x00	; 0
     58a:	40 e2       	ldi	r20, 0x20	; 32
     58c:	51 e4       	ldi	r21, 0x41	; 65
     58e:	0e 94 00 0c 	call	0x1800	; 0x1800 <__divsf3>
	float c = round(7+7*mag*cos(theta));
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 ee       	ldi	r20, 0xE0	; 224
     598:	50 e4       	ldi	r21, 0x40	; 64
     59a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     59e:	6b 01       	movw	r12, r22
     5a0:	7c 01       	movw	r14, r24
     5a2:	c5 01       	movw	r24, r10
     5a4:	b4 01       	movw	r22, r8
     5a6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <cos>
     5aa:	9b 01       	movw	r18, r22
     5ac:	ac 01       	movw	r20, r24
     5ae:	c7 01       	movw	r24, r14
     5b0:	b6 01       	movw	r22, r12
     5b2:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     5b6:	20 e0       	ldi	r18, 0x00	; 0
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	40 ee       	ldi	r20, 0xE0	; 224
     5bc:	50 e4       	ldi	r21, 0x40	; 64
     5be:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     5c2:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <round>
     5c6:	2b 01       	movw	r4, r22
     5c8:	3c 01       	movw	r6, r24
	float s = round(7+7*mag*sin(theta));
     5ca:	c5 01       	movw	r24, r10
     5cc:	b4 01       	movw	r22, r8
     5ce:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <sin>
     5d2:	9b 01       	movw	r18, r22
     5d4:	ac 01       	movw	r20, r24
     5d6:	c7 01       	movw	r24, r14
     5d8:	b6 01       	movw	r22, r12
     5da:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 ee       	ldi	r20, 0xE0	; 224
     5e4:	50 e4       	ldi	r21, 0x40	; 64
     5e6:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     5ea:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <round>
     5ee:	6b 01       	movw	r12, r22
     5f0:	7c 01       	movw	r14, r24
	c = CONSTRAIN(c, 0, 15);
     5f2:	a3 01       	movw	r20, r6
     5f4:	92 01       	movw	r18, r4
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	80 e7       	ldi	r24, 0x70	; 112
     5fc:	91 e4       	ldi	r25, 0x41	; 65
     5fe:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fmin>
     602:	9b 01       	movw	r18, r22
     604:	ac 01       	movw	r20, r24
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	70 e0       	ldi	r23, 0x00	; 0
     60a:	cb 01       	movw	r24, r22
     60c:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fmax>
     610:	2b 01       	movw	r4, r22
     612:	3c 01       	movw	r6, r24
	s = CONSTRAIN(s, 0, 15);
     614:	a7 01       	movw	r20, r14
     616:	96 01       	movw	r18, r12
     618:	60 e0       	ldi	r22, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	80 e7       	ldi	r24, 0x70	; 112
     61e:	91 e4       	ldi	r25, 0x41	; 65
     620:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <fmin>
     624:	9b 01       	movw	r18, r22
     626:	ac 01       	movw	r20, r24
     628:	60 e0       	ldi	r22, 0x00	; 0
     62a:	70 e0       	ldi	r23, 0x00	; 0
     62c:	cb 01       	movw	r24, r22
     62e:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fmax>
     632:	4b 01       	movw	r8, r22
     634:	5c 01       	movw	r10, r24
	
	LED_fill_color(leds, *BLACK, NUM_LEDS);
     636:	e0 91 0f 40 	lds	r30, 0x400F	; 0x80400f <BLACK>
     63a:	f0 91 10 40 	lds	r31, 0x4010	; 0x804010 <BLACK+0x1>
     63e:	40 81       	ld	r20, Z
     640:	51 81       	ldd	r21, Z+1	; 0x01
     642:	62 81       	ldd	r22, Z+2	; 0x02
     644:	2f ef       	ldi	r18, 0xFF	; 255
     646:	30 e0       	ldi	r19, 0x00	; 0
     648:	85 ef       	ldi	r24, 0xF5	; 245
     64a:	90 e4       	ldi	r25, 0x40	; 64
     64c:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LED_fill_color>
	Matrix_circle(leds, 7, 7, radius, *TEAL);
     650:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <TEAL>
     654:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <TEAL+0x1>
     658:	e0 80       	ld	r14, Z
     65a:	f1 80       	ldd	r15, Z+1	; 0x01
     65c:	02 81       	ldd	r16, Z+2	; 0x02
     65e:	20 91 90 40 	lds	r18, 0x4090	; 0x804090 <radius>
     662:	30 91 91 40 	lds	r19, 0x4091	; 0x804091 <radius+0x1>
     666:	47 e0       	ldi	r20, 0x07	; 7
     668:	50 e0       	ldi	r21, 0x00	; 0
     66a:	67 e0       	ldi	r22, 0x07	; 7
     66c:	70 e0       	ldi	r23, 0x00	; 0
     66e:	85 ef       	ldi	r24, 0xF5	; 245
     670:	90 e4       	ldi	r25, 0x40	; 64
     672:	0e 94 aa 07 	call	0xf54	; 0xf54 <Matrix_circle>
	Matrix_line(leds, 7, 7, 12, 7, *RED);
     676:	e0 91 0d 40 	lds	r30, 0x400D	; 0x80400d <RED>
     67a:	f0 91 0e 40 	lds	r31, 0x400E	; 0x80400e <RED+0x1>
     67e:	c0 80       	ld	r12, Z
     680:	d1 80       	ldd	r13, Z+1	; 0x01
     682:	e2 80       	ldd	r14, Z+2	; 0x02
     684:	07 e0       	ldi	r16, 0x07	; 7
     686:	10 e0       	ldi	r17, 0x00	; 0
     688:	2c e0       	ldi	r18, 0x0C	; 12
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	47 e0       	ldi	r20, 0x07	; 7
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	67 e0       	ldi	r22, 0x07	; 7
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	85 ef       	ldi	r24, 0xF5	; 245
     696:	90 e4       	ldi	r25, 0x40	; 64
     698:	0e 94 08 07 	call	0xe10	; 0xe10 <Matrix_line>
	Matrix_line(leds, 7, 7, 7, 12, *BLUE);
     69c:	e0 91 09 40 	lds	r30, 0x4009	; 0x804009 <BLUE>
     6a0:	f0 91 0a 40 	lds	r31, 0x400A	; 0x80400a <BLUE+0x1>
     6a4:	c0 80       	ld	r12, Z
     6a6:	d1 80       	ldd	r13, Z+1	; 0x01
     6a8:	e2 80       	ldd	r14, Z+2	; 0x02
     6aa:	0c e0       	ldi	r16, 0x0C	; 12
     6ac:	10 e0       	ldi	r17, 0x00	; 0
     6ae:	27 e0       	ldi	r18, 0x07	; 7
     6b0:	30 e0       	ldi	r19, 0x00	; 0
     6b2:	47 e0       	ldi	r20, 0x07	; 7
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	67 e0       	ldi	r22, 0x07	; 7
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	85 ef       	ldi	r24, 0xF5	; 245
     6bc:	90 e4       	ldi	r25, 0x40	; 64
     6be:	0e 94 08 07 	call	0xe10	; 0xe10 <Matrix_line>
	Matrix_line(leds, 7, 7, c, s, *GREEN);
     6c2:	e0 91 0b 40 	lds	r30, 0x400B	; 0x80400b <GREEN>
     6c6:	f0 91 0c 40 	lds	r31, 0x400C	; 0x80400c <GREEN+0x1>
     6ca:	c0 80       	ld	r12, Z
     6cc:	d1 80       	ldd	r13, Z+1	; 0x01
     6ce:	e2 80       	ldd	r14, Z+2	; 0x02
     6d0:	c5 01       	movw	r24, r10
     6d2:	b4 01       	movw	r22, r8
     6d4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fixunssfsi>
     6d8:	4b 01       	movw	r8, r22
     6da:	5c 01       	movw	r10, r24
     6dc:	c3 01       	movw	r24, r6
     6de:	b2 01       	movw	r22, r4
     6e0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fixunssfsi>
     6e4:	84 01       	movw	r16, r8
     6e6:	9b 01       	movw	r18, r22
     6e8:	47 e0       	ldi	r20, 0x07	; 7
     6ea:	50 e0       	ldi	r21, 0x00	; 0
     6ec:	67 e0       	ldi	r22, 0x07	; 7
     6ee:	70 e0       	ldi	r23, 0x00	; 0
     6f0:	85 ef       	ldi	r24, 0xF5	; 245
     6f2:	90 e4       	ldi	r25, 0x40	; 64
     6f4:	0e 94 08 07 	call	0xe10	; 0xe10 <Matrix_line>
	
	LED_show(leds, NUM_LEDS);
     6f8:	6f ef       	ldi	r22, 0xFF	; 255
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	85 ef       	ldi	r24, 0xF5	; 245
     6fe:	90 e4       	ldi	r25, 0x40	; 64
     700:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LED_show>
}
     704:	df 91       	pop	r29
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16
     70c:	ff 90       	pop	r15
     70e:	ef 90       	pop	r14
     710:	df 90       	pop	r13
     712:	cf 90       	pop	r12
     714:	bf 90       	pop	r11
     716:	af 90       	pop	r10
     718:	9f 90       	pop	r9
     71a:	8f 90       	pop	r8
     71c:	7f 90       	pop	r7
     71e:	6f 90       	pop	r6
     720:	5f 90       	pop	r5
     722:	4f 90       	pop	r4
     724:	08 95       	ret

00000726 <anim_brickbreaker>:

void anim_brickbreaker() {
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	0f 93       	push	r16
     72e:	1f 93       	push	r17
     730:	cf 93       	push	r28
	uint8_t r = 2;
	uint8_t paddle_y = 1;
	uint8_t paddle_x = 8 + 6*(-2*adc_data + 1);
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	50 ec       	ldi	r21, 0xC0	; 192
     73a:	60 91 f5 43 	lds	r22, 0x43F5	; 0x8043f5 <adc_data>
     73e:	70 91 f6 43 	lds	r23, 0x43F6	; 0x8043f6 <adc_data+0x1>
     742:	80 91 f7 43 	lds	r24, 0x43F7	; 0x8043f7 <adc_data+0x2>
     746:	90 91 f8 43 	lds	r25, 0x43F8	; 0x8043f8 <adc_data+0x3>
     74a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     74e:	20 e0       	ldi	r18, 0x00	; 0
     750:	30 e0       	ldi	r19, 0x00	; 0
     752:	40 e8       	ldi	r20, 0x80	; 128
     754:	5f e3       	ldi	r21, 0x3F	; 63
     756:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     75a:	20 e0       	ldi	r18, 0x00	; 0
     75c:	30 e0       	ldi	r19, 0x00	; 0
     75e:	40 ec       	ldi	r20, 0xC0	; 192
     760:	50 e4       	ldi	r21, 0x40	; 64
     762:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     766:	20 e0       	ldi	r18, 0x00	; 0
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	40 e0       	ldi	r20, 0x00	; 0
     76c:	51 e4       	ldi	r21, 0x41	; 65
     76e:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     772:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fixunssfsi>
     776:	c6 2f       	mov	r28, r22
	
	LED_fill_color(leds, *BLACK, NUM_LEDS);
     778:	e0 91 0f 40 	lds	r30, 0x400F	; 0x80400f <BLACK>
     77c:	f0 91 10 40 	lds	r31, 0x4010	; 0x804010 <BLACK+0x1>
     780:	40 81       	ld	r20, Z
     782:	51 81       	ldd	r21, Z+1	; 0x01
     784:	62 81       	ldd	r22, Z+2	; 0x02
     786:	2f ef       	ldi	r18, 0xFF	; 255
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	85 ef       	ldi	r24, 0xF5	; 245
     78c:	90 e4       	ldi	r25, 0x40	; 64
     78e:	0e 94 52 09 	call	0x12a4	; 0x12a4 <LED_fill_color>
	Matrix_line(leds, paddle_x-r, 1, paddle_x+r, 1, *TEAL);
     792:	6c 2f       	mov	r22, r28
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	9b 01       	movw	r18, r22
     798:	2e 5f       	subi	r18, 0xFE	; 254
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	62 50       	subi	r22, 0x02	; 2
     79e:	71 09       	sbc	r23, r1
     7a0:	e0 91 05 40 	lds	r30, 0x4005	; 0x804005 <TEAL>
     7a4:	f0 91 06 40 	lds	r31, 0x4006	; 0x804006 <TEAL+0x1>
     7a8:	c0 80       	ld	r12, Z
     7aa:	d1 80       	ldd	r13, Z+1	; 0x01
     7ac:	e2 80       	ldd	r14, Z+2	; 0x02
     7ae:	01 e0       	ldi	r16, 0x01	; 1
     7b0:	10 e0       	ldi	r17, 0x00	; 0
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	85 ef       	ldi	r24, 0xF5	; 245
     7b8:	90 e4       	ldi	r25, 0x40	; 64
     7ba:	0e 94 08 07 	call	0xe10	; 0xe10 <Matrix_line>
	static uint8_t ball_x = 4;
	static uint8_t ball_y = 2;
	static int8_t	ball_vel_x = 1;
	static int8_t	ball_vel_y = 1;
	
	if (ball_x >= COLS) ball_vel_x = -1;
     7be:	60 91 03 40 	lds	r22, 0x4003	; 0x804003 <ball_x.5054>
     7c2:	60 31       	cpi	r22, 0x10	; 16
     7c4:	18 f0       	brcs	.+6      	; 0x7cc <anim_brickbreaker+0xa6>
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <ball_vel_x.5056>
	if (ball_x <= 0)	ball_vel_x = 1;
     7cc:	61 11       	cpse	r22, r1
     7ce:	03 c0       	rjmp	.+6      	; 0x7d6 <anim_brickbreaker+0xb0>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <ball_vel_x.5056>
	
	if (ball_y >= ROWS) ball_vel_y = -1;
     7d6:	40 91 01 40 	lds	r20, 0x4001	; 0x804001 <ball_y.5055>
     7da:	40 31       	cpi	r20, 0x10	; 16
     7dc:	18 f0       	brcs	.+6      	; 0x7e4 <anim_brickbreaker+0xbe>
     7de:	8f ef       	ldi	r24, 0xFF	; 255
     7e0:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
			//collision &= 1;
		//}
	//}
	
	
	if (ball_y <= 0)	ball_vel_y = 1;
     7e4:	41 11       	cpse	r20, r1
     7e6:	03 c0       	rjmp	.+6      	; 0x7ee <anim_brickbreaker+0xc8>
     7e8:	81 e0       	ldi	r24, 0x01	; 1
     7ea:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
	
	ball_x += ball_vel_x;
     7ee:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <ball_vel_x.5056>
     7f2:	68 0f       	add	r22, r24
     7f4:	60 93 03 40 	sts	0x4003, r22	; 0x804003 <ball_x.5054>
	ball_y += ball_vel_y;
     7f8:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     7fc:	48 0f       	add	r20, r24
     7fe:	40 93 01 40 	sts	0x4001, r20	; 0x804001 <ball_y.5055>
	
	Matrix_set_pixel(leds, ball_x, ball_y, *YELLOW);
     802:	e0 91 07 40 	lds	r30, 0x4007	; 0x804007 <YELLOW>
     806:	f0 91 08 40 	lds	r31, 0x4008	; 0x804008 <YELLOW+0x1>
     80a:	00 81       	ld	r16, Z
     80c:	11 81       	ldd	r17, Z+1	; 0x01
     80e:	22 81       	ldd	r18, Z+2	; 0x02
     810:	50 e0       	ldi	r21, 0x00	; 0
     812:	70 e0       	ldi	r23, 0x00	; 0
     814:	85 ef       	ldi	r24, 0xF5	; 245
     816:	90 e4       	ldi	r25, 0x40	; 64
     818:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	
	LED_show(leds, NUM_LEDS);
     81c:	6f ef       	ldi	r22, 0xFF	; 255
     81e:	70 e0       	ldi	r23, 0x00	; 0
     820:	85 ef       	ldi	r24, 0xF5	; 245
     822:	90 e4       	ldi	r25, 0x40	; 64
     824:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <LED_show>
}
     828:	cf 91       	pop	r28
     82a:	1f 91       	pop	r17
     82c:	0f 91       	pop	r16
     82e:	ef 90       	pop	r14
     830:	df 90       	pop	r13
     832:	cf 90       	pop	r12
     834:	08 95       	ret

00000836 <main>:
uint16_t radius = 0;

float adc_data;

int main(void)
{
     836:	cf 93       	push	r28
     838:	df 93       	push	r29
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62
     83e:	26 97       	sbiw	r28, 0x06	; 6
     840:	cd bf       	out	0x3d, r28	; 61
     842:	de bf       	out	0x3e, r29	; 62
	init_clock();
     844:	0e 94 3e 01 	call	0x27c	; 0x27c <init_clock>
	init_TCA0();
     848:	0e 94 82 01 	call	0x304	; 0x304 <init_TCA0>
	init_ADC0();
     84c:	0e 94 4e 01 	call	0x29c	; 0x29c <init_ADC0>
	uart_init(3, 9600, NULL);
     850:	20 e0       	ldi	r18, 0x00	; 0
     852:	30 e0       	ldi	r19, 0x00	; 0
     854:	40 e8       	ldi	r20, 0x80	; 128
     856:	55 e2       	ldi	r21, 0x25	; 37
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	83 e0       	ldi	r24, 0x03	; 3
     85e:	0e 94 fb 0a 	call	0x15f6	; 0x15f6 <uart_init>
	LIS331_init();
     862:	0e 94 9b 08 	call	0x1136	; 0x1136 <LIS331_init>
	LED_init();
     866:	0e 94 30 09 	call	0x1260	; 0x1260 <LED_init>
	init_btn();
     86a:	0e 94 8f 01 	call	0x31e	; 0x31e <init_btn>
	
	printf("end of init functions\n");
     86e:	8f e4       	ldi	r24, 0x4F	; 79
     870:	90 e4       	ldi	r25, 0x40	; 64
     872:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <puts>
	LED_set_brightness(10);
     876:	8a e0       	ldi	r24, 0x0A	; 10
     878:	0e 94 b7 09 	call	0x136e	; 0x136e <LED_set_brightness>
	
	sei();
     87c:	78 94       	sei
    while (1) 
    {	
		if (millis > TIME_STEP) {
     87e:	80 91 a1 40 	lds	r24, 0x40A1	; 0x8040a1 <millis>
     882:	90 91 a2 40 	lds	r25, 0x40A2	; 0x8040a2 <millis+0x1>
     886:	89 97       	sbiw	r24, 0x29	; 41
     888:	d0 f3       	brcs	.-12     	; 0x87e <main+0x48>
			millis = 0;
     88a:	10 92 a1 40 	sts	0x40A1, r1	; 0x8040a1 <millis>
     88e:	10 92 a2 40 	sts	0x40A2, r1	; 0x8040a2 <millis+0x1>
			
			acc_y_prev = acc_y;
     892:	80 91 9a 40 	lds	r24, 0x409A	; 0x80409a <acc_y>
     896:	90 91 9b 40 	lds	r25, 0x409B	; 0x80409b <acc_y+0x1>
     89a:	80 93 94 40 	sts	0x4094, r24	; 0x804094 <acc_y_prev>
     89e:	90 93 95 40 	sts	0x4095, r25	; 0x804095 <acc_y_prev+0x1>
			acc_x_prev = acc_x;
     8a2:	80 91 9c 40 	lds	r24, 0x409C	; 0x80409c <acc_x>
     8a6:	90 91 9d 40 	lds	r25, 0x409D	; 0x80409d <acc_x+0x1>
     8aa:	80 93 96 40 	sts	0x4096, r24	; 0x804096 <acc_x_prev>
     8ae:	90 93 97 40 	sts	0x4097, r25	; 0x804097 <acc_x_prev+0x1>
			acc_z_prev = acc_z;
     8b2:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <acc_z>
     8b6:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <acc_z+0x1>
     8ba:	80 93 92 40 	sts	0x4092, r24	; 0x804092 <acc_z_prev>
     8be:	90 93 93 40 	sts	0x4093, r25	; 0x804093 <acc_z_prev+0x1>
			
			(void)LIS331_readY(&acc_y);
     8c2:	8a e9       	ldi	r24, 0x9A	; 154
     8c4:	90 e4       	ldi	r25, 0x40	; 64
     8c6:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <LIS331_readY>
			(void)LIS331_readX(&acc_x);
     8ca:	8c e9       	ldi	r24, 0x9C	; 156
     8cc:	90 e4       	ldi	r25, 0x40	; 64
     8ce:	0e 94 a6 08 	call	0x114c	; 0x114c <LIS331_readX>
			(void)LIS331_readZ(&acc_z);
     8d2:	88 e9       	ldi	r24, 0x98	; 152
     8d4:	90 e4       	ldi	r25, 0x40	; 64
     8d6:	0e 94 02 09 	call	0x1204	; 0x1204 <LIS331_readZ>
			read_ADC0(&adc_data);
     8da:	85 ef       	ldi	r24, 0xF5	; 245
     8dc:	93 e4       	ldi	r25, 0x43	; 67
     8de:	0e 94 68 01 	call	0x2d0	; 0x2d0 <read_ADC0>
			radius = CONSTRAIN(25*adc_data, 1, 25*adc_data);
     8e2:	60 91 f5 43 	lds	r22, 0x43F5	; 0x8043f5 <adc_data>
     8e6:	70 91 f6 43 	lds	r23, 0x43F6	; 0x8043f6 <adc_data+0x1>
     8ea:	80 91 f7 43 	lds	r24, 0x43F7	; 0x8043f7 <adc_data+0x2>
     8ee:	90 91 f8 43 	lds	r25, 0x43F8	; 0x8043f8 <adc_data+0x3>
     8f2:	20 e0       	ldi	r18, 0x00	; 0
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	48 ec       	ldi	r20, 0xC8	; 200
     8f8:	51 e4       	ldi	r21, 0x41	; 65
     8fa:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     8fe:	9b 01       	movw	r18, r22
     900:	ac 01       	movw	r20, r24
     902:	60 e0       	ldi	r22, 0x00	; 0
     904:	70 e0       	ldi	r23, 0x00	; 0
     906:	80 e8       	ldi	r24, 0x80	; 128
     908:	9f e3       	ldi	r25, 0x3F	; 63
     90a:	0e 94 e5 0c 	call	0x19ca	; 0x19ca <fmax>
     90e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fixunssfsi>
     912:	60 93 90 40 	sts	0x4090, r22	; 0x804090 <radius>
     916:	70 93 91 40 	sts	0x4091, r23	; 0x804091 <radius+0x1>
			
			acc_y = (acc_y - 7)*0.7;
     91a:	60 91 9a 40 	lds	r22, 0x409A	; 0x80409a <acc_y>
     91e:	70 91 9b 40 	lds	r23, 0x409B	; 0x80409b <acc_y+0x1>
     922:	67 50       	subi	r22, 0x07	; 7
     924:	71 09       	sbc	r23, r1
     926:	07 2e       	mov	r0, r23
     928:	00 0c       	add	r0, r0
     92a:	88 0b       	sbc	r24, r24
     92c:	99 0b       	sbc	r25, r25
     92e:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     932:	23 e3       	ldi	r18, 0x33	; 51
     934:	33 e3       	ldi	r19, 0x33	; 51
     936:	43 e3       	ldi	r20, 0x33	; 51
     938:	5f e3       	ldi	r21, 0x3F	; 63
     93a:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     93e:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     942:	6b 01       	movw	r12, r22
     944:	7c 01       	movw	r14, r24
			acc_x = (acc_x - 17)*0.7;
     946:	80 91 9c 40 	lds	r24, 0x409C	; 0x80409c <acc_x>
     94a:	90 91 9d 40 	lds	r25, 0x409D	; 0x80409d <acc_x+0x1>
     94e:	bc 01       	movw	r22, r24
     950:	61 51       	subi	r22, 0x11	; 17
     952:	71 09       	sbc	r23, r1
     954:	07 2e       	mov	r0, r23
     956:	00 0c       	add	r0, r0
     958:	88 0b       	sbc	r24, r24
     95a:	99 0b       	sbc	r25, r25
     95c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     960:	23 e3       	ldi	r18, 0x33	; 51
     962:	33 e3       	ldi	r19, 0x33	; 51
     964:	43 e3       	ldi	r20, 0x33	; 51
     966:	5f e3       	ldi	r21, 0x3F	; 63
     968:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     96c:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     970:	2b 01       	movw	r4, r22
     972:	3c 01       	movw	r6, r24
			acc_z *= 0.7;
     974:	60 91 98 40 	lds	r22, 0x4098	; 0x804098 <acc_z>
     978:	70 91 99 40 	lds	r23, 0x4099	; 0x804099 <acc_z+0x1>
     97c:	07 2e       	mov	r0, r23
     97e:	00 0c       	add	r0, r0
     980:	88 0b       	sbc	r24, r24
     982:	99 0b       	sbc	r25, r25
     984:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     988:	23 e3       	ldi	r18, 0x33	; 51
     98a:	33 e3       	ldi	r19, 0x33	; 51
     98c:	43 e3       	ldi	r20, 0x33	; 51
     98e:	5f e3       	ldi	r21, 0x3F	; 63
     990:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     994:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     998:	4b 01       	movw	r8, r22
     99a:	5c 01       	movw	r10, r24
			
			
			acc_y = acc_y * 0.2 + acc_y_prev * 0.8;
     99c:	b6 01       	movw	r22, r12
     99e:	dd 0c       	add	r13, r13
     9a0:	88 0b       	sbc	r24, r24
     9a2:	99 0b       	sbc	r25, r25
     9a4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     9a8:	2d ec       	ldi	r18, 0xCD	; 205
     9aa:	3c ec       	ldi	r19, 0xCC	; 204
     9ac:	4c e4       	ldi	r20, 0x4C	; 76
     9ae:	5e e3       	ldi	r21, 0x3E	; 62
     9b0:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     9b4:	6b 01       	movw	r12, r22
     9b6:	7c 01       	movw	r14, r24
     9b8:	60 91 94 40 	lds	r22, 0x4094	; 0x804094 <acc_y_prev>
     9bc:	70 91 95 40 	lds	r23, 0x4095	; 0x804095 <acc_y_prev+0x1>
     9c0:	07 2e       	mov	r0, r23
     9c2:	00 0c       	add	r0, r0
     9c4:	88 0b       	sbc	r24, r24
     9c6:	99 0b       	sbc	r25, r25
     9c8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     9cc:	2d ec       	ldi	r18, 0xCD	; 205
     9ce:	3c ec       	ldi	r19, 0xCC	; 204
     9d0:	4c e4       	ldi	r20, 0x4C	; 76
     9d2:	5f e3       	ldi	r21, 0x3F	; 63
     9d4:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     9d8:	9b 01       	movw	r18, r22
     9da:	ac 01       	movw	r20, r24
     9dc:	c7 01       	movw	r24, r14
     9de:	b6 01       	movw	r22, r12
     9e0:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     9e4:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     9e8:	60 93 9a 40 	sts	0x409A, r22	; 0x80409a <acc_y>
     9ec:	70 93 9b 40 	sts	0x409B, r23	; 0x80409b <acc_y+0x1>
			acc_x = acc_x * 0.2 + acc_x_prev * 0.8;
     9f0:	b2 01       	movw	r22, r4
     9f2:	55 0c       	add	r5, r5
     9f4:	88 0b       	sbc	r24, r24
     9f6:	99 0b       	sbc	r25, r25
     9f8:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     9fc:	2d ec       	ldi	r18, 0xCD	; 205
     9fe:	3c ec       	ldi	r19, 0xCC	; 204
     a00:	4c e4       	ldi	r20, 0x4C	; 76
     a02:	5e e3       	ldi	r21, 0x3E	; 62
     a04:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     a08:	6b 01       	movw	r12, r22
     a0a:	7c 01       	movw	r14, r24
     a0c:	60 91 96 40 	lds	r22, 0x4096	; 0x804096 <acc_x_prev>
     a10:	70 91 97 40 	lds	r23, 0x4097	; 0x804097 <acc_x_prev+0x1>
     a14:	07 2e       	mov	r0, r23
     a16:	00 0c       	add	r0, r0
     a18:	88 0b       	sbc	r24, r24
     a1a:	99 0b       	sbc	r25, r25
     a1c:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     a20:	2d ec       	ldi	r18, 0xCD	; 205
     a22:	3c ec       	ldi	r19, 0xCC	; 204
     a24:	4c e4       	ldi	r20, 0x4C	; 76
     a26:	5f e3       	ldi	r21, 0x3F	; 63
     a28:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c7 01       	movw	r24, r14
     a32:	b6 01       	movw	r22, r12
     a34:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     a38:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     a3c:	6b 01       	movw	r12, r22
     a3e:	7c 01       	movw	r14, r24
     a40:	60 93 9c 40 	sts	0x409C, r22	; 0x80409c <acc_x>
     a44:	70 93 9d 40 	sts	0x409D, r23	; 0x80409d <acc_x+0x1>
			acc_z = acc_z * 0.2 + acc_z_prev * 0.8;
     a48:	b4 01       	movw	r22, r8
     a4a:	99 0c       	add	r9, r9
     a4c:	88 0b       	sbc	r24, r24
     a4e:	99 0b       	sbc	r25, r25
     a50:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     a54:	2d ec       	ldi	r18, 0xCD	; 205
     a56:	3c ec       	ldi	r19, 0xCC	; 204
     a58:	4c e4       	ldi	r20, 0x4C	; 76
     a5a:	5e e3       	ldi	r21, 0x3E	; 62
     a5c:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     a60:	4b 01       	movw	r8, r22
     a62:	5c 01       	movw	r10, r24
     a64:	60 91 92 40 	lds	r22, 0x4092	; 0x804092 <acc_z_prev>
     a68:	70 91 93 40 	lds	r23, 0x4093	; 0x804093 <acc_z_prev+0x1>
     a6c:	07 2e       	mov	r0, r23
     a6e:	00 0c       	add	r0, r0
     a70:	88 0b       	sbc	r24, r24
     a72:	99 0b       	sbc	r25, r25
     a74:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     a78:	2d ec       	ldi	r18, 0xCD	; 205
     a7a:	3c ec       	ldi	r19, 0xCC	; 204
     a7c:	4c e4       	ldi	r20, 0x4C	; 76
     a7e:	5f e3       	ldi	r21, 0x3F	; 63
     a80:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	0e 94 1d 0b 	call	0x163a	; 0x163a <__addsf3>
     a90:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__fixsfsi>
     a94:	60 93 98 40 	sts	0x4098, r22	; 0x804098 <acc_z>
     a98:	70 93 99 40 	sts	0x4099, r23	; 0x804099 <acc_z+0x1>
			
			char buf[6];
			dtostrf(acc_x, 4, 2, buf);
     a9c:	b6 01       	movw	r22, r12
     a9e:	dd 0c       	add	r13, r13
     aa0:	88 0b       	sbc	r24, r24
     aa2:	99 0b       	sbc	r25, r25
     aa4:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     aa8:	9e 01       	movw	r18, r28
     aaa:	2f 5f       	subi	r18, 0xFF	; 255
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	79 01       	movw	r14, r18
     ab0:	89 01       	movw	r16, r18
     ab2:	22 e0       	ldi	r18, 0x02	; 2
     ab4:	44 e0       	ldi	r20, 0x04	; 4
     ab6:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <dtostrf>
			printf("RAWX:%s\t|\t", buf);
     aba:	ff 92       	push	r15
     abc:	ef 92       	push	r14
     abe:	85 e6       	ldi	r24, 0x65	; 101
     ac0:	90 e4       	ldi	r25, 0x40	; 64
     ac2:	9f 93       	push	r25
     ac4:	8f 93       	push	r24
     ac6:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <printf>
			dtostrf(abs(acc_z-acc_z_prev), 4, 2, buf);
     aca:	80 91 98 40 	lds	r24, 0x4098	; 0x804098 <acc_z>
     ace:	90 91 99 40 	lds	r25, 0x4099	; 0x804099 <acc_z+0x1>
     ad2:	20 91 92 40 	lds	r18, 0x4092	; 0x804092 <acc_z_prev>
     ad6:	30 91 93 40 	lds	r19, 0x4093	; 0x804093 <acc_z_prev+0x1>
     ada:	82 1b       	sub	r24, r18
     adc:	93 0b       	sbc	r25, r19
     ade:	bc 01       	movw	r22, r24
     ae0:	22 f4       	brpl	.+8      	; 0xaea <main+0x2b4>
     ae2:	66 27       	eor	r22, r22
     ae4:	77 27       	eor	r23, r23
     ae6:	68 1b       	sub	r22, r24
     ae8:	79 0b       	sbc	r23, r25
     aea:	07 2e       	mov	r0, r23
     aec:	00 0c       	add	r0, r0
     aee:	88 0b       	sbc	r24, r24
     af0:	99 0b       	sbc	r25, r25
     af2:	0e 94 aa 0c 	call	0x1954	; 0x1954 <__floatsisf>
     af6:	9e 01       	movw	r18, r28
     af8:	2f 5f       	subi	r18, 0xFF	; 255
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	79 01       	movw	r14, r18
     afe:	89 01       	movw	r16, r18
     b00:	22 e0       	ldi	r18, 0x02	; 2
     b02:	44 e0       	ldi	r20, 0x04	; 4
     b04:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <dtostrf>
			printf("RAWZ:%s\t|\t", buf);
     b08:	ff 92       	push	r15
     b0a:	ef 92       	push	r14
     b0c:	80 e7       	ldi	r24, 0x70	; 112
     b0e:	90 e4       	ldi	r25, 0x40	; 64
     b10:	9f 93       	push	r25
     b12:	8f 93       	push	r24
     b14:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <printf>
			
			dtostrf(adc_data, 4, 2, buf);
     b18:	60 91 f5 43 	lds	r22, 0x43F5	; 0x8043f5 <adc_data>
     b1c:	70 91 f6 43 	lds	r23, 0x43F6	; 0x8043f6 <adc_data+0x1>
     b20:	80 91 f7 43 	lds	r24, 0x43F7	; 0x8043f7 <adc_data+0x2>
     b24:	90 91 f8 43 	lds	r25, 0x43F8	; 0x8043f8 <adc_data+0x3>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	44 e0       	ldi	r20, 0x04	; 4
     b2c:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <dtostrf>
			printf("ADC:%s\t|\t", buf);
     b30:	ff 92       	push	r15
     b32:	ef 92       	push	r14
     b34:	8b e7       	ldi	r24, 0x7B	; 123
     b36:	90 e4       	ldi	r25, 0x40	; 64
     b38:	9f 93       	push	r25
     b3a:	8f 93       	push	r24
     b3c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <printf>
			//
			//dtostrf(c, 4, 2, buf);
			//printf("COS:%s\t|\t", buf);
			//dtostrf(s, 4, 2, buf);
			//printf("SIN:%s\t", buf);
			printf("\n");
     b40:	8a e0       	ldi	r24, 0x0A	; 10
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <putchar>
			
			switch (mode) {
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <mode>
     b50:	81 30       	cpi	r24, 0x01	; 1
     b52:	39 f0       	breq	.+14     	; 0xb62 <main+0x32c>
     b54:	18 f0       	brcs	.+6      	; 0xb5c <main+0x326>
     b56:	82 30       	cpi	r24, 0x02	; 2
     b58:	39 f0       	breq	.+14     	; 0xb68 <main+0x332>
     b5a:	08 c0       	rjmp	.+16     	; 0xb6c <main+0x336>
				case RIPPLE_ANIM:
					anim_ripple();
     b5c:	0e 94 07 02 	call	0x40e	; 0x40e <anim_ripple>
					break;
     b60:	05 c0       	rjmp	.+10     	; 0xb6c <main+0x336>
				case DEBUG_ANIM:
					anim_debug();
     b62:	0e 94 7d 02 	call	0x4fa	; 0x4fa <anim_debug>
					break;
     b66:	02 c0       	rjmp	.+4      	; 0xb6c <main+0x336>
				case BB_POT_ANIM:
					anim_brickbreaker();
     b68:	0e 94 93 03 	call	0x726	; 0x726 <anim_brickbreaker>
					break;
			}
			
			
			if (btn2_flag) {
     b6c:	80 91 9e 40 	lds	r24, 0x409E	; 0x80409e <btn2_flag>
     b70:	88 23       	and	r24, r24
     b72:	09 f4       	brne	.+2      	; 0xb76 <main+0x340>
     b74:	84 ce       	rjmp	.-760    	; 0x87e <main+0x48>
				if (!BTN2) {
     b76:	32 9b       	sbis	0x06, 2	; 6
     b78:	82 ce       	rjmp	.-764    	; 0x87e <main+0x48>
					btn2_flag = 0;
     b7a:	10 92 9e 40 	sts	0x409E, r1	; 0x80409e <btn2_flag>
					if (mode == BB_POT_ANIM) mode = RIPPLE_ANIM;
     b7e:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <mode>
     b82:	82 30       	cpi	r24, 0x02	; 2
     b84:	19 f4       	brne	.+6      	; 0xb8c <main+0x356>
     b86:	10 92 04 40 	sts	0x4004, r1	; 0x804004 <mode>
     b8a:	79 ce       	rjmp	.-782    	; 0x87e <main+0x48>
					else mode++;
     b8c:	8f 5f       	subi	r24, 0xFF	; 255
     b8e:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <mode>
     b92:	75 ce       	rjmp	.-790    	; 0x87e <main+0x48>

00000b94 <TWI_Host_Init>:
#include <string.h>

void TWI_Host_Init(uint32_t scl, bool enable_pullups)
{
    //TWI0.MBAUD = F_CPU/(2*scl) - (5 + F_CPU * 10 / 2000000000);		// assume rise time of 10ns
    TWI0.MBAUD = 35;
     b94:	83 e2       	ldi	r24, 0x23	; 35
     b96:	80 93 06 09 	sts	0x0906, r24	; 0x800906 <__TEXT_REGION_LENGTH__+0x7e0906>
	if (enable_pullups) {
     b9a:	44 23       	and	r20, r20
     b9c:	59 f0       	breq	.+22     	; 0xbb4 <TWI_Host_Init+0x20>
		PORTA.DIRSET |= PIN2_bm | PIN3_bm;
     b9e:	e0 e0       	ldi	r30, 0x00	; 0
     ba0:	f4 e0       	ldi	r31, 0x04	; 4
     ba2:	81 81       	ldd	r24, Z+1	; 0x01
     ba4:	8c 60       	ori	r24, 0x0C	; 12
     ba6:	81 83       	std	Z+1, r24	; 0x01
        PORTA.PIN2CTRL |= PORT_PULLUPEN_bm;	// enable internal pull-ups if
     ba8:	82 89       	ldd	r24, Z+18	; 0x12
     baa:	88 60       	ori	r24, 0x08	; 8
     bac:	82 8b       	std	Z+18, r24	; 0x12
        PORTA.PIN3CTRL |= PORT_PULLUPEN_bm;	// there is no external pull-up
     bae:	83 89       	ldd	r24, Z+19	; 0x13
     bb0:	88 60       	ori	r24, 0x08	; 8
     bb2:	83 8b       	std	Z+19, r24	; 0x13
    }

    TWI0.MCTRLA |= TWI_ENABLE_bm;
     bb4:	e0 e0       	ldi	r30, 0x00	; 0
     bb6:	f9 e0       	ldi	r31, 0x09	; 9
     bb8:	83 81       	ldd	r24, Z+3	; 0x03
     bba:	81 60       	ori	r24, 0x01	; 1
     bbc:	83 83       	std	Z+3, r24	; 0x03
    TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
     bbe:	85 81       	ldd	r24, Z+5	; 0x05
     bc0:	81 60       	ori	r24, 0x01	; 1
     bc2:	85 83       	std	Z+5, r24	; 0x05
     bc4:	08 95       	ret

00000bc6 <TWI_Stop>:
}

void TWI_Stop(void)
{
    TWI0.MCTRLB |= TWI_MCMD_STOP_gc;
     bc6:	e0 e0       	ldi	r30, 0x00	; 0
     bc8:	f9 e0       	ldi	r31, 0x09	; 9
     bca:	84 81       	ldd	r24, Z+4	; 0x04
     bcc:	83 60       	ori	r24, 0x03	; 3
     bce:	84 83       	std	Z+4, r24	; 0x04
     bd0:	08 95       	ret

00000bd2 <TWI_Address>:
}

void TWI_Address(uint8_t Address, uint8_t mode)
{
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	d8 2f       	mov	r29, r24
     bd8:	c6 2f       	mov	r28, r22
	while (1) {
		// set addr & R/W bit, starts transfer
		TWI0.MADDR = (Address << 1) | (mode);
     bda:	8d 2f       	mov	r24, r29
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	8c 2b       	or	r24, r28
     be4:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>

		// Wait for Read/Write Interrupt Flag.
		uint8_t flag = (mode == TW_WRITE) ? TWI_WIF_bp : TWI_RIF_bp;
     be8:	c1 11       	cpse	r28, r1
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <TWI_Address+0x1e>
     bec:	26 e0       	ldi	r18, 0x06	; 6
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <TWI_Address+0x20>
     bf0:	27 e0       	ldi	r18, 0x07	; 7
		loop_until_bit_is_set(TWI0.MSTATUS, flag);
     bf2:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	02 2e       	mov	r0, r18
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <TWI_Address+0x2e>
     bfc:	95 95       	asr	r25
     bfe:	87 95       	ror	r24
     c00:	0a 94       	dec	r0
     c02:	e2 f7       	brpl	.-8      	; 0xbfc <TWI_Address+0x2a>
     c04:	80 ff       	sbrs	r24, 0
     c06:	f5 cf       	rjmp	.-22     	; 0xbf2 <TWI_Address+0x20>

		// if the client didn't ack, or bus or arbitration error,
		// stop the transaction and try again
		if ((TWI0.MSTATUS & TWI_RXACK_bm) ||
     c08:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     c0c:	84 fd       	sbrc	r24, 4
     c0e:	04 c0       	rjmp	.+8      	; 0xc18 <TWI_Address+0x46>
		    (TWI0.MSTATUS & (TWI_ARBLOST_bm | TWI_BUSERR_bm))) {
     c10:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
		uint8_t flag = (mode == TW_WRITE) ? TWI_WIF_bp : TWI_RIF_bp;
		loop_until_bit_is_set(TWI0.MSTATUS, flag);

		// if the client didn't ack, or bus or arbitration error,
		// stop the transaction and try again
		if ((TWI0.MSTATUS & TWI_RXACK_bm) ||
     c14:	8c 70       	andi	r24, 0x0C	; 12
     c16:	41 f0       	breq	.+16     	; 0xc28 <TWI_Address+0x56>
		    (TWI0.MSTATUS & (TWI_ARBLOST_bm | TWI_BUSERR_bm))) {
			TWI_Stop();
     c18:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_Stop>
			TWI0.MSTATUS |= TWI_BUSSTATE_IDLE_gc;
     c1c:	e0 e0       	ldi	r30, 0x00	; 0
     c1e:	f9 e0       	ldi	r31, 0x09	; 9
     c20:	85 81       	ldd	r24, Z+5	; 0x05
     c22:	81 60       	ori	r24, 0x01	; 1
     c24:	85 83       	std	Z+5, r24	; 0x05
		} else {
			break;
		}
	}
     c26:	d9 cf       	rjmp	.-78     	; 0xbda <TWI_Address+0x8>
}
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <TWI_Transmit_Data>:

int TWI_Transmit_Data(uint8_t data)
{
    // start data transfer by writing to MDATA
    TWI0.MDATA = data;
     c2e:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>

    // Wait for Write Interrupt Flag.
    loop_until_bit_is_set(TWI0.MSTATUS, TWI_WIF_bp);
     c32:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     c36:	86 ff       	sbrs	r24, 6
     c38:	fc cf       	rjmp	.-8      	; 0xc32 <TWI_Transmit_Data+0x4>

    // if bus or arbitration error, return error
    return ((TWI0.MSTATUS & (TWI_ARBLOST_bm | TWI_BUSERR_bm)) ? -1 : 0);
     c3a:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     c3e:	8c 70       	andi	r24, 0x0C	; 12
     c40:	19 f0       	breq	.+6      	; 0xc48 <TWI_Transmit_Data+0x1a>
     c42:	8f ef       	ldi	r24, 0xFF	; 255
     c44:	9f ef       	ldi	r25, 0xFF	; 255
     c46:	08 95       	ret
     c48:	80 e0       	ldi	r24, 0x00	; 0
     c4a:	90 e0       	ldi	r25, 0x00	; 0
}
     c4c:	08 95       	ret

00000c4e <TWI_Receive_Data>:

uint8_t TWI_Receive_Data(void)
{
    // Wait for Read Interrupt Flag.
    loop_until_bit_is_set(TWI0.MSTATUS, TWI_RIF_bp);
     c4e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     c52:	88 23       	and	r24, r24
     c54:	e4 f7       	brge	.-8      	; 0xc4e <TWI_Receive_Data>

    uint8_t data = TWI0.MDATA;
     c56:	e0 e0       	ldi	r30, 0x00	; 0
     c58:	f9 e0       	ldi	r31, 0x09	; 9
     c5a:	80 85       	ldd	r24, Z+8	; 0x08

    // Respond with NACK
    TWI0.MCTRLB |= TWI_ACKACT_bm;
     c5c:	94 81       	ldd	r25, Z+4	; 0x04
     c5e:	94 60       	ori	r25, 0x04	; 4
     c60:	94 83       	std	Z+4, r25	; 0x04

    return data;
}
     c62:	08 95       	ret

00000c64 <TWI_Host_Write>:

void TWI_Host_Write(uint8_t Address, uint8_t Data)
{
     c64:	cf 93       	push	r28
     c66:	c6 2f       	mov	r28, r22
    TWI_Address(Address, TW_WRITE);
     c68:	60 e0       	ldi	r22, 0x00	; 0
     c6a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TWI_Address>
    TWI_Transmit_Data(Data);
     c6e:	8c 2f       	mov	r24, r28
     c70:	0e 94 17 06 	call	0xc2e	; 0xc2e <TWI_Transmit_Data>
    TWI_Stop();
     c74:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_Stop>
}
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <Matrix_XY>:
	uint16_t idx;
	#if (ROTATE == 0)
		if (y & 0x01) idx = y*COLS + x;
		else idx = (y*COLS + COLS - 1 - x);
	#elif (ROTATE == -90)
		if (x & 0x01) idx = x*ROWS + y;
     c7c:	80 ff       	sbrs	r24, 0
     c7e:	09 c0       	rjmp	.+18     	; 0xc92 <Matrix_XY+0x16>
     c80:	82 95       	swap	r24
     c82:	92 95       	swap	r25
     c84:	90 7f       	andi	r25, 0xF0	; 240
     c86:	98 27       	eor	r25, r24
     c88:	80 7f       	andi	r24, 0xF0	; 240
     c8a:	98 27       	eor	r25, r24
     c8c:	86 0f       	add	r24, r22
     c8e:	97 1f       	adc	r25, r23
     c90:	08 95       	ret
		else idx = (x*ROWS + COLS - 1 - y);
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	82 95       	swap	r24
     c96:	92 95       	swap	r25
     c98:	90 7f       	andi	r25, 0xF0	; 240
     c9a:	98 27       	eor	r25, r24
     c9c:	80 7f       	andi	r24, 0xF0	; 240
     c9e:	98 27       	eor	r25, r24
     ca0:	86 1b       	sub	r24, r22
     ca2:	97 0b       	sbc	r25, r23
     ca4:	01 97       	sbiw	r24, 0x01	; 1
		if (y & 0x01) idx = (y*COLS + COLS - 1 - x);
		else idx = y*COLS + x;
	#endif
	
	return idx;
}
     ca6:	08 95       	ret

00000ca8 <Matrix_set_pixel>:

void Matrix_set_pixel(CRGB* leds, uint16_t x, uint16_t y, CRGB color) {
     ca8:	ef 92       	push	r14
     caa:	ff 92       	push	r15
     cac:	0f 93       	push	r16
     cae:	1f 93       	push	r17
     cb0:	cf 93       	push	r28
	// dedicated function
	if (x < COLS && y < ROWS ) {
     cb2:	60 31       	cpi	r22, 0x10	; 16
     cb4:	71 05       	cpc	r23, r1
     cb6:	a0 f4       	brcc	.+40     	; 0xce0 <Matrix_set_pixel+0x38>
     cb8:	40 31       	cpi	r20, 0x10	; 16
     cba:	51 05       	cpc	r21, r1
     cbc:	88 f4       	brcc	.+34     	; 0xce0 <Matrix_set_pixel+0x38>
     cbe:	c2 2f       	mov	r28, r18
     cc0:	db 01       	movw	r26, r22
     cc2:	7c 01       	movw	r14, r24
		uint16_t idx = Matrix_XY(x, y);
     cc4:	ba 01       	movw	r22, r20
     cc6:	cd 01       	movw	r24, r26
     cc8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <Matrix_XY>
		leds[idx].r = color.r;
     ccc:	fc 01       	movw	r30, r24
     cce:	ee 0f       	add	r30, r30
     cd0:	ff 1f       	adc	r31, r31
     cd2:	e8 0f       	add	r30, r24
     cd4:	f9 1f       	adc	r31, r25
     cd6:	ee 0d       	add	r30, r14
     cd8:	ff 1d       	adc	r31, r15
     cda:	00 83       	st	Z, r16
		leds[idx].b = color.b;
     cdc:	c2 83       	std	Z+2, r28	; 0x02
		leds[idx].g = color.g;
     cde:	11 83       	std	Z+1, r17	; 0x01
	}
}
     ce0:	cf 91       	pop	r28
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <circle_helper>:
			y0 += sy;
		}
	}
}

void circle_helper(CRGB* leds, uint16_t x0, uint16_t y0, int x, int y, CRGB color) {
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
     d14:	25 97       	sbiw	r28, 0x05	; 5
     d16:	cd bf       	out	0x3d, r28	; 61
     d18:	de bf       	out	0x3e, r29	; 62
     d1a:	8c 83       	std	Y+4, r24	; 0x04
     d1c:	9d 83       	std	Y+5, r25	; 0x05
     d1e:	5b 01       	movw	r10, r22
     d20:	3a 01       	movw	r6, r20
     d22:	49 01       	movw	r8, r18
     d24:	28 01       	movw	r4, r16
     d26:	c9 82       	std	Y+1, r12	; 0x01
     d28:	da 82       	std	Y+2, r13	; 0x02
     d2a:	eb 82       	std	Y+3, r14	; 0x03
	// helper function for creating circles
	// sets all the symmetric pixels to color
	Matrix_set_pixel(leds, x0+x, y0+y, color);
     d2c:	68 01       	movw	r12, r16
     d2e:	c4 0e       	add	r12, r20
     d30:	d5 1e       	adc	r13, r21
     d32:	79 01       	movw	r14, r18
     d34:	e6 0e       	add	r14, r22
     d36:	f7 1e       	adc	r15, r23
     d38:	09 81       	ldd	r16, Y+1	; 0x01
     d3a:	1a 81       	ldd	r17, Y+2	; 0x02
     d3c:	2b 81       	ldd	r18, Y+3	; 0x03
     d3e:	a6 01       	movw	r20, r12
     d40:	b7 01       	movw	r22, r14
     d42:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0+x, y0-y, color);
     d46:	13 01       	movw	r2, r6
     d48:	24 18       	sub	r2, r4
     d4a:	35 08       	sbc	r3, r5
     d4c:	09 81       	ldd	r16, Y+1	; 0x01
     d4e:	1a 81       	ldd	r17, Y+2	; 0x02
     d50:	2b 81       	ldd	r18, Y+3	; 0x03
     d52:	a1 01       	movw	r20, r2
     d54:	b7 01       	movw	r22, r14
     d56:	8c 81       	ldd	r24, Y+4	; 0x04
     d58:	9d 81       	ldd	r25, Y+5	; 0x05
     d5a:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0-x, y0+y, color);
     d5e:	75 01       	movw	r14, r10
     d60:	e8 18       	sub	r14, r8
     d62:	f9 08       	sbc	r15, r9
     d64:	09 81       	ldd	r16, Y+1	; 0x01
     d66:	1a 81       	ldd	r17, Y+2	; 0x02
     d68:	2b 81       	ldd	r18, Y+3	; 0x03
     d6a:	a6 01       	movw	r20, r12
     d6c:	b7 01       	movw	r22, r14
     d6e:	8c 81       	ldd	r24, Y+4	; 0x04
     d70:	9d 81       	ldd	r25, Y+5	; 0x05
     d72:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0-x, y0-y, color);
     d76:	09 81       	ldd	r16, Y+1	; 0x01
     d78:	1a 81       	ldd	r17, Y+2	; 0x02
     d7a:	2b 81       	ldd	r18, Y+3	; 0x03
     d7c:	a1 01       	movw	r20, r2
     d7e:	b7 01       	movw	r22, r14
     d80:	8c 81       	ldd	r24, Y+4	; 0x04
     d82:	9d 81       	ldd	r25, Y+5	; 0x05
     d84:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0+y, y0+x, color);
     d88:	63 01       	movw	r12, r6
     d8a:	c8 0c       	add	r12, r8
     d8c:	d9 1c       	adc	r13, r9
     d8e:	72 01       	movw	r14, r4
     d90:	ea 0c       	add	r14, r10
     d92:	fb 1c       	adc	r15, r11
     d94:	09 81       	ldd	r16, Y+1	; 0x01
     d96:	1a 81       	ldd	r17, Y+2	; 0x02
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	a6 01       	movw	r20, r12
     d9c:	b7 01       	movw	r22, r14
     d9e:	8c 81       	ldd	r24, Y+4	; 0x04
     da0:	9d 81       	ldd	r25, Y+5	; 0x05
     da2:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0+y, y0-x, color);
     da6:	68 18       	sub	r6, r8
     da8:	79 08       	sbc	r7, r9
     daa:	09 81       	ldd	r16, Y+1	; 0x01
     dac:	1a 81       	ldd	r17, Y+2	; 0x02
     dae:	2b 81       	ldd	r18, Y+3	; 0x03
     db0:	a3 01       	movw	r20, r6
     db2:	b7 01       	movw	r22, r14
     db4:	8c 81       	ldd	r24, Y+4	; 0x04
     db6:	9d 81       	ldd	r25, Y+5	; 0x05
     db8:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0-y, y0+x, color);
     dbc:	a4 18       	sub	r10, r4
     dbe:	b5 08       	sbc	r11, r5
     dc0:	09 81       	ldd	r16, Y+1	; 0x01
     dc2:	1a 81       	ldd	r17, Y+2	; 0x02
     dc4:	2b 81       	ldd	r18, Y+3	; 0x03
     dc6:	a6 01       	movw	r20, r12
     dc8:	b5 01       	movw	r22, r10
     dca:	8c 81       	ldd	r24, Y+4	; 0x04
     dcc:	9d 81       	ldd	r25, Y+5	; 0x05
     dce:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	Matrix_set_pixel(leds, x0-y, y0-x, color);
     dd2:	09 81       	ldd	r16, Y+1	; 0x01
     dd4:	1a 81       	ldd	r17, Y+2	; 0x02
     dd6:	2b 81       	ldd	r18, Y+3	; 0x03
     dd8:	a3 01       	movw	r20, r6
     dda:	b5 01       	movw	r22, r10
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
	
}
     de4:	25 96       	adiw	r28, 0x05	; 5
     de6:	cd bf       	out	0x3d, r28	; 61
     de8:	de bf       	out	0x3e, r29	; 62
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	df 90       	pop	r13
     df8:	cf 90       	pop	r12
     dfa:	bf 90       	pop	r11
     dfc:	af 90       	pop	r10
     dfe:	9f 90       	pop	r9
     e00:	8f 90       	pop	r8
     e02:	7f 90       	pop	r7
     e04:	6f 90       	pop	r6
     e06:	5f 90       	pop	r5
     e08:	4f 90       	pop	r4
     e0a:	3f 90       	pop	r3
     e0c:	2f 90       	pop	r2
     e0e:	08 95       	ret

00000e10 <Matrix_line>:
		leds[idx].b = color.b;
		leds[idx].g = color.g;
	}
}

void Matrix_line(CRGB* leds, uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, CRGB color) {
     e10:	2f 92       	push	r2
     e12:	3f 92       	push	r3
     e14:	4f 92       	push	r4
     e16:	5f 92       	push	r5
     e18:	6f 92       	push	r6
     e1a:	7f 92       	push	r7
     e1c:	8f 92       	push	r8
     e1e:	9f 92       	push	r9
     e20:	af 92       	push	r10
     e22:	bf 92       	push	r11
     e24:	cf 92       	push	r12
     e26:	df 92       	push	r13
     e28:	ef 92       	push	r14
     e2a:	ff 92       	push	r15
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62
     e38:	2b 97       	sbiw	r28, 0x0b	; 11
     e3a:	cd bf       	out	0x3d, r28	; 61
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	89 83       	std	Y+1, r24	; 0x01
     e40:	9a 83       	std	Y+2, r25	; 0x02
     e42:	6a 87       	std	Y+10, r22	; 0x0a
     e44:	7b 87       	std	Y+11, r23	; 0x0b
     e46:	5a 01       	movw	r10, r20
     e48:	39 01       	movw	r6, r18
     e4a:	08 87       	std	Y+8, r16	; 0x08
     e4c:	19 87       	std	Y+9, r17	; 0x09
     e4e:	cb 82       	std	Y+3, r12	; 0x03
     e50:	dc 82       	std	Y+4, r13	; 0x04
     e52:	ed 82       	std	Y+5, r14	; 0x05
	// Bresenham's line algorithm from wikipedia
	// possibly upgrade with anti-aliasing?
	
	int dx = abs(x1-x0);
     e54:	c9 01       	movw	r24, r18
     e56:	86 1b       	sub	r24, r22
     e58:	97 0b       	sbc	r25, r23
     e5a:	6c 01       	movw	r12, r24
     e5c:	22 f4       	brpl	.+8      	; 0xe66 <Matrix_line+0x56>
     e5e:	cc 24       	eor	r12, r12
     e60:	dd 24       	eor	r13, r13
     e62:	c8 1a       	sub	r12, r24
     e64:	d9 0a       	sbc	r13, r25
	int sx = x0 < x1 ? 1 : -1;
     e66:	2a 85       	ldd	r18, Y+10	; 0x0a
     e68:	3b 85       	ldd	r19, Y+11	; 0x0b
     e6a:	26 15       	cp	r18, r6
     e6c:	37 05       	cpc	r19, r7
     e6e:	20 f4       	brcc	.+8      	; 0xe78 <Matrix_line+0x68>
     e70:	22 24       	eor	r2, r2
     e72:	23 94       	inc	r2
     e74:	31 2c       	mov	r3, r1
     e76:	03 c0       	rjmp	.+6      	; 0xe7e <Matrix_line+0x6e>
     e78:	22 24       	eor	r2, r2
     e7a:	2a 94       	dec	r2
     e7c:	32 2c       	mov	r3, r2
	int dy = -abs(y1-y0);
     e7e:	88 85       	ldd	r24, Y+8	; 0x08
     e80:	99 85       	ldd	r25, Y+9	; 0x09
     e82:	8a 19       	sub	r24, r10
     e84:	9b 09       	sbc	r25, r11
     e86:	4c 01       	movw	r8, r24
     e88:	22 f4       	brpl	.+8      	; 0xe92 <Matrix_line+0x82>
     e8a:	88 24       	eor	r8, r8
     e8c:	99 24       	eor	r9, r9
     e8e:	88 1a       	sub	r8, r24
     e90:	99 0a       	sbc	r9, r25
     e92:	8e 82       	std	Y+6, r8	; 0x06
     e94:	9f 82       	std	Y+7, r9	; 0x07
     e96:	91 94       	neg	r9
     e98:	81 94       	neg	r8
     e9a:	91 08       	sbc	r9, r1
	int sy = y0 < y1 ? 1 : -1;
     e9c:	88 85       	ldd	r24, Y+8	; 0x08
     e9e:	99 85       	ldd	r25, Y+9	; 0x09
     ea0:	a8 16       	cp	r10, r24
     ea2:	b9 06       	cpc	r11, r25
     ea4:	20 f4       	brcc	.+8      	; 0xeae <Matrix_line+0x9e>
     ea6:	44 24       	eor	r4, r4
     ea8:	43 94       	inc	r4
     eaa:	51 2c       	mov	r5, r1
     eac:	03 c0       	rjmp	.+6      	; 0xeb4 <Matrix_line+0xa4>
     eae:	44 24       	eor	r4, r4
     eb0:	4a 94       	dec	r4
     eb2:	54 2c       	mov	r5, r4
	int error = dx + dy;
     eb4:	76 01       	movw	r14, r12
     eb6:	2e 81       	ldd	r18, Y+6	; 0x06
     eb8:	3f 81       	ldd	r19, Y+7	; 0x07
     eba:	e2 1a       	sub	r14, r18
     ebc:	f3 0a       	sbc	r15, r19
	
	while (1) {
		if (x0 < 0 || y0 < 0 || x0 > COLS || y0 > ROWS) continue;
     ebe:	2a 85       	ldd	r18, Y+10	; 0x0a
     ec0:	3b 85       	ldd	r19, Y+11	; 0x0b
     ec2:	21 31       	cpi	r18, 0x11	; 17
     ec4:	31 05       	cpc	r19, r1
     ec6:	d8 f7       	brcc	.-10     	; 0xebe <Matrix_line+0xae>
     ec8:	31 e1       	ldi	r19, 0x11	; 17
     eca:	a3 16       	cp	r10, r19
     ecc:	b1 04       	cpc	r11, r1
     ece:	b8 f7       	brcc	.-18     	; 0xebe <Matrix_line+0xae>
		
		Matrix_set_pixel(leds, x0, y0, color);
     ed0:	0b 81       	ldd	r16, Y+3	; 0x03
     ed2:	1c 81       	ldd	r17, Y+4	; 0x04
     ed4:	2d 81       	ldd	r18, Y+5	; 0x05
     ed6:	a5 01       	movw	r20, r10
     ed8:	6a 85       	ldd	r22, Y+10	; 0x0a
     eda:	7b 85       	ldd	r23, Y+11	; 0x0b
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	0e 94 54 06 	call	0xca8	; 0xca8 <Matrix_set_pixel>
				
		if (x0 == x1 && y0 == y1) break;
     ee4:	8a 85       	ldd	r24, Y+10	; 0x0a
     ee6:	9b 85       	ldd	r25, Y+11	; 0x0b
     ee8:	86 15       	cp	r24, r6
     eea:	97 05       	cpc	r25, r7
     eec:	29 f4       	brne	.+10     	; 0xef8 <Matrix_line+0xe8>
     eee:	28 85       	ldd	r18, Y+8	; 0x08
     ef0:	39 85       	ldd	r19, Y+9	; 0x09
     ef2:	a2 16       	cp	r10, r18
     ef4:	b3 06       	cpc	r11, r19
     ef6:	c1 f0       	breq	.+48     	; 0xf28 <Matrix_line+0x118>
		int e2 = 2 * error;
     ef8:	c7 01       	movw	r24, r14
     efa:	88 0f       	add	r24, r24
     efc:	99 1f       	adc	r25, r25
		if (e2 >= dy) {
     efe:	88 15       	cp	r24, r8
     f00:	99 05       	cpc	r25, r9
     f02:	54 f0       	brlt	.+20     	; 0xf18 <Matrix_line+0x108>
			error += dy;
     f04:	2e 81       	ldd	r18, Y+6	; 0x06
     f06:	3f 81       	ldd	r19, Y+7	; 0x07
     f08:	e2 1a       	sub	r14, r18
     f0a:	f3 0a       	sbc	r15, r19
			x0 += sx;
     f0c:	2a 85       	ldd	r18, Y+10	; 0x0a
     f0e:	3b 85       	ldd	r19, Y+11	; 0x0b
     f10:	22 0d       	add	r18, r2
     f12:	33 1d       	adc	r19, r3
     f14:	2a 87       	std	Y+10, r18	; 0x0a
     f16:	3b 87       	std	Y+11, r19	; 0x0b
		}
		if (e2 <= dx) {
     f18:	c8 16       	cp	r12, r24
     f1a:	d9 06       	cpc	r13, r25
     f1c:	84 f2       	brlt	.-96     	; 0xebe <Matrix_line+0xae>
			error += dx;
     f1e:	ec 0c       	add	r14, r12
     f20:	fd 1c       	adc	r15, r13
			y0 += sy;
     f22:	a4 0c       	add	r10, r4
     f24:	b5 1c       	adc	r11, r5
     f26:	cb cf       	rjmp	.-106    	; 0xebe <Matrix_line+0xae>
		}
	}
}
     f28:	2b 96       	adiw	r28, 0x0b	; 11
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	de bf       	out	0x3e, r29	; 62
     f2e:	df 91       	pop	r29
     f30:	cf 91       	pop	r28
     f32:	1f 91       	pop	r17
     f34:	0f 91       	pop	r16
     f36:	ff 90       	pop	r15
     f38:	ef 90       	pop	r14
     f3a:	df 90       	pop	r13
     f3c:	cf 90       	pop	r12
     f3e:	bf 90       	pop	r11
     f40:	af 90       	pop	r10
     f42:	9f 90       	pop	r9
     f44:	8f 90       	pop	r8
     f46:	7f 90       	pop	r7
     f48:	6f 90       	pop	r6
     f4a:	5f 90       	pop	r5
     f4c:	4f 90       	pop	r4
     f4e:	3f 90       	pop	r3
     f50:	2f 90       	pop	r2
     f52:	08 95       	ret

00000f54 <Matrix_circle>:
	Matrix_set_pixel(leds, x0-y, y0+x, color);
	Matrix_set_pixel(leds, x0-y, y0-x, color);
	
}

void Matrix_circle(CRGB* leds, uint16_t x0, uint16_t y0, int16_t r, CRGB color) {
     f54:	2f 92       	push	r2
     f56:	3f 92       	push	r3
     f58:	4f 92       	push	r4
     f5a:	5f 92       	push	r5
     f5c:	6f 92       	push	r6
     f5e:	7f 92       	push	r7
     f60:	8f 92       	push	r8
     f62:	9f 92       	push	r9
     f64:	af 92       	push	r10
     f66:	bf 92       	push	r11
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	0f 93       	push	r16
     f72:	1f 93       	push	r17
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	25 97       	sbiw	r28, 0x05	; 5
     f7e:	cd bf       	out	0x3d, r28	; 61
     f80:	de bf       	out	0x3e, r29	; 62
     f82:	1c 01       	movw	r2, r24
     f84:	2b 01       	movw	r4, r22
     f86:	3a 01       	movw	r6, r20
     f88:	59 01       	movw	r10, r18
     f8a:	e9 82       	std	Y+1, r14	; 0x01
     f8c:	fa 82       	std	Y+2, r15	; 0x02
     f8e:	0b 83       	std	Y+3, r16	; 0x03
	// Bresenham's midpoint circle algorithm from GeeksForGeeks
	int x = 0;
	int y = r;
	int d = 3 - (r << 1);
     f90:	c9 01       	movw	r24, r18
     f92:	88 0f       	add	r24, r24
     f94:	99 1f       	adc	r25, r25
     f96:	23 e0       	ldi	r18, 0x03	; 3
     f98:	30 e0       	ldi	r19, 0x00	; 0
     f9a:	49 01       	movw	r8, r18
     f9c:	88 1a       	sub	r8, r24
     f9e:	99 0a       	sbc	r9, r25
	if (r < 0) return;
     fa0:	bb 20       	and	r11, r11
     fa2:	f4 f1       	brlt	.+124    	; 0x1020 <Matrix_circle+0xcc>
	circle_helper(leds, x0, y0, x, y, color);
     fa4:	67 01       	movw	r12, r14
     fa6:	e0 2e       	mov	r14, r16
     fa8:	85 01       	movw	r16, r10
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	c1 01       	movw	r24, r2
     fb0:	0e 94 76 06 	call	0xcec	; 0xcec <circle_helper>
	
}

void Matrix_circle(CRGB* leds, uint16_t x0, uint16_t y0, int16_t r, CRGB color) {
	// Bresenham's midpoint circle algorithm from GeeksForGeeks
	int x = 0;
     fb4:	1c 82       	std	Y+4, r1	; 0x04
     fb6:	1d 82       	std	Y+5, r1	; 0x05
	int y = r;
	int d = 3 - (r << 1);
	if (r < 0) return;
	circle_helper(leds, x0, y0, x, y, color);
	while (y >= x) {
     fb8:	2e c0       	rjmp	.+92     	; 0x1016 <Matrix_circle+0xc2>
		if (d > 0) {
     fba:	18 14       	cp	r1, r8
     fbc:	19 04       	cpc	r1, r9
     fbe:	8c f4       	brge	.+34     	; 0xfe2 <Matrix_circle+0x8e>
			y--;
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	a8 1a       	sub	r10, r24
     fc4:	b1 08       	sbc	r11, r1
			d = d + 4*(x-y) + 10;
     fc6:	8c 81       	ldd	r24, Y+4	; 0x04
     fc8:	9d 81       	ldd	r25, Y+5	; 0x05
     fca:	8a 19       	sub	r24, r10
     fcc:	9b 09       	sbc	r25, r11
     fce:	88 0f       	add	r24, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	88 0e       	add	r8, r24
     fd8:	99 1e       	adc	r9, r25
     fda:	9a e0       	ldi	r25, 0x0A	; 10
     fdc:	89 0e       	add	r8, r25
     fde:	91 1c       	adc	r9, r1
     fe0:	0b c0       	rjmp	.+22     	; 0xff8 <Matrix_circle+0xa4>
		} else {
			d = d + 4*x + 6;
     fe2:	8c 81       	ldd	r24, Y+4	; 0x04
     fe4:	9d 81       	ldd	r25, Y+5	; 0x05
     fe6:	88 0f       	add	r24, r24
     fe8:	99 1f       	adc	r25, r25
     fea:	88 0f       	add	r24, r24
     fec:	99 1f       	adc	r25, r25
     fee:	88 0e       	add	r8, r24
     ff0:	99 1e       	adc	r9, r25
     ff2:	86 e0       	ldi	r24, 0x06	; 6
     ff4:	88 0e       	add	r8, r24
     ff6:	91 1c       	adc	r9, r1
		}
		x++;
     ff8:	8c 81       	ldd	r24, Y+4	; 0x04
     ffa:	9d 81       	ldd	r25, Y+5	; 0x05
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	8c 83       	std	Y+4, r24	; 0x04
    1000:	9d 83       	std	Y+5, r25	; 0x05
		circle_helper(leds, x0, y0, x, y, color);
    1002:	c9 80       	ldd	r12, Y+1	; 0x01
    1004:	da 80       	ldd	r13, Y+2	; 0x02
    1006:	eb 80       	ldd	r14, Y+3	; 0x03
    1008:	85 01       	movw	r16, r10
    100a:	9c 01       	movw	r18, r24
    100c:	a3 01       	movw	r20, r6
    100e:	b2 01       	movw	r22, r4
    1010:	c1 01       	movw	r24, r2
    1012:	0e 94 76 06 	call	0xcec	; 0xcec <circle_helper>
	int x = 0;
	int y = r;
	int d = 3 - (r << 1);
	if (r < 0) return;
	circle_helper(leds, x0, y0, x, y, color);
	while (y >= x) {
    1016:	8c 81       	ldd	r24, Y+4	; 0x04
    1018:	9d 81       	ldd	r25, Y+5	; 0x05
    101a:	a8 16       	cp	r10, r24
    101c:	b9 06       	cpc	r11, r25
    101e:	6c f6       	brge	.-102    	; 0xfba <Matrix_circle+0x66>
			d = d + 4*x + 6;
		}
		x++;
		circle_helper(leds, x0, y0, x, y, color);
	}
}
    1020:	25 96       	adiw	r28, 0x05	; 5
    1022:	cd bf       	out	0x3d, r28	; 61
    1024:	de bf       	out	0x3e, r29	; 62
    1026:	df 91       	pop	r29
    1028:	cf 91       	pop	r28
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	ff 90       	pop	r15
    1030:	ef 90       	pop	r14
    1032:	df 90       	pop	r13
    1034:	cf 90       	pop	r12
    1036:	bf 90       	pop	r11
    1038:	af 90       	pop	r10
    103a:	9f 90       	pop	r9
    103c:	8f 90       	pop	r8
    103e:	7f 90       	pop	r7
    1040:	6f 90       	pop	r6
    1042:	5f 90       	pop	r5
    1044:	4f 90       	pop	r4
    1046:	3f 90       	pop	r3
    1048:	2f 90       	pop	r2
    104a:	08 95       	ret

0000104c <LIS331_write>:

uint8_t LIS331_ret_reg(uint8_t reg_addr) {
  uint8_t data;
  (void)LIS331_read_reg(reg_addr, &data);
  return data;
}
    104c:	ef 92       	push	r14
    104e:	ff 92       	push	r15
    1050:	1f 93       	push	r17
    1052:	cf 93       	push	r28
    1054:	df 93       	push	r29
    1056:	c8 2f       	mov	r28, r24
    1058:	7b 01       	movw	r14, r22
    105a:	14 2f       	mov	r17, r20
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	89 e1       	ldi	r24, 0x19	; 25
    1060:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TWI_Address>
    1064:	8c 2f       	mov	r24, r28
    1066:	0e 94 17 06 	call	0xc2e	; 0xc2e <TWI_Transmit_Data>
    106a:	c0 e0       	ldi	r28, 0x00	; 0
    106c:	d0 e0       	ldi	r29, 0x00	; 0
    106e:	07 c0       	rjmp	.+14     	; 0x107e <LIS331_write+0x32>
    1070:	f7 01       	movw	r30, r14
    1072:	ec 0f       	add	r30, r28
    1074:	fd 1f       	adc	r31, r29
    1076:	80 81       	ld	r24, Z
    1078:	0e 94 17 06 	call	0xc2e	; 0xc2e <TWI_Transmit_Data>
    107c:	21 96       	adiw	r28, 0x01	; 1
    107e:	81 2f       	mov	r24, r17
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	c8 17       	cp	r28, r24
    1084:	d9 07       	cpc	r29, r25
    1086:	a4 f3       	brlt	.-24     	; 0x1070 <LIS331_write+0x24>
    1088:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_Stop>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	ff 90       	pop	r15
    1098:	ef 90       	pop	r14
    109a:	08 95       	ret

0000109c <LIS331_read>:
    109c:	1f 93       	push	r17
    109e:	cf 93       	push	r28
    10a0:	df 93       	push	r29
    10a2:	eb 01       	movw	r28, r22
    10a4:	14 2f       	mov	r17, r20
    10a6:	68 2f       	mov	r22, r24
    10a8:	89 e1       	ldi	r24, 0x19	; 25
    10aa:	0e 94 32 06 	call	0xc64	; 0xc64 <TWI_Host_Write>
    10ae:	61 e0       	ldi	r22, 0x01	; 1
    10b0:	89 e1       	ldi	r24, 0x19	; 25
    10b2:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <TWI_Address>
    10b6:	20 e0       	ldi	r18, 0x00	; 0
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	13 c0       	rjmp	.+38     	; 0x10e2 <LIS331_read+0x46>
    10bc:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
    10c0:	88 23       	and	r24, r24
    10c2:	e4 f7       	brge	.-8      	; 0x10bc <LIS331_read+0x20>
    10c4:	de 01       	movw	r26, r28
    10c6:	a2 0f       	add	r26, r18
    10c8:	b3 1f       	adc	r27, r19
    10ca:	e0 e0       	ldi	r30, 0x00	; 0
    10cc:	f9 e0       	ldi	r31, 0x09	; 9
    10ce:	80 85       	ldd	r24, Z+8	; 0x08
    10d0:	8c 93       	st	X, r24
    10d2:	84 81       	ldd	r24, Z+4	; 0x04
    10d4:	8b 7f       	andi	r24, 0xFB	; 251
    10d6:	84 83       	std	Z+4, r24	; 0x04
    10d8:	84 81       	ldd	r24, Z+4	; 0x04
    10da:	82 60       	ori	r24, 0x02	; 2
    10dc:	84 83       	std	Z+4, r24	; 0x04
    10de:	2f 5f       	subi	r18, 0xFF	; 255
    10e0:	3f 4f       	sbci	r19, 0xFF	; 255
    10e2:	81 2f       	mov	r24, r17
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	28 17       	cp	r18, r24
    10ea:	39 07       	cpc	r19, r25
    10ec:	3c f3       	brlt	.-50     	; 0x10bc <LIS331_read+0x20>
    10ee:	81 2f       	mov	r24, r17
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	c8 0f       	add	r28, r24
    10f6:	d9 1f       	adc	r29, r25
    10f8:	0e 94 27 06 	call	0xc4e	; 0xc4e <TWI_Receive_Data>
    10fc:	88 83       	st	Y, r24
    10fe:	0e 94 e3 05 	call	0xbc6	; 0xbc6 <TWI_Stop>
    1102:	80 e0       	ldi	r24, 0x00	; 0
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	df 91       	pop	r29
    1108:	cf 91       	pop	r28
    110a:	1f 91       	pop	r17
    110c:	08 95       	ret

0000110e <LIS331_write_reg>:
    110e:	cf 93       	push	r28
    1110:	df 93       	push	r29
    1112:	1f 92       	push	r1
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	69 83       	std	Y+1, r22	; 0x01
    111a:	41 e0       	ldi	r20, 0x01	; 1
    111c:	be 01       	movw	r22, r28
    111e:	6f 5f       	subi	r22, 0xFF	; 255
    1120:	7f 4f       	sbci	r23, 0xFF	; 255
    1122:	0e 94 26 08 	call	0x104c	; 0x104c <LIS331_write>
    1126:	0f 90       	pop	r0
    1128:	df 91       	pop	r29
    112a:	cf 91       	pop	r28
    112c:	08 95       	ret

0000112e <LIS331_read_reg>:
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 4e 08 	call	0x109c	; 0x109c <LIS331_read>
    1134:	08 95       	ret

00001136 <LIS331_init>:

int LIS331_init(void) {
	TWI_Host_Init(0, true);
    1136:	41 e0       	ldi	r20, 0x01	; 1
    1138:	60 e0       	ldi	r22, 0x00	; 0
    113a:	70 e0       	ldi	r23, 0x00	; 0
    113c:	cb 01       	movw	r24, r22
    113e:	0e 94 ca 05 	call	0xb94	; 0xb94 <TWI_Host_Init>
	return LIS331_write_reg(CTRL_REG1, 0b00100111);
    1142:	67 e2       	ldi	r22, 0x27	; 39
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	0e 94 87 08 	call	0x110e	; 0x110e <LIS331_write_reg>
}
    114a:	08 95       	ret

0000114c <LIS331_readX>:

int LIS331_readX(int16_t* x) {
    114c:	0f 93       	push	r16
    114e:	1f 93       	push	r17
    1150:	cf 93       	push	r28
    1152:	df 93       	push	r29
    1154:	00 d0       	rcall	.+0      	; 0x1156 <LIS331_readX+0xa>
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
    115a:	8c 01       	movw	r16, r24
  uint8_t x_l, x_h;
  LIS331_read_reg(OUT_X_L, &x_l);
    115c:	be 01       	movw	r22, r28
    115e:	6f 5f       	subi	r22, 0xFF	; 255
    1160:	7f 4f       	sbci	r23, 0xFF	; 255
    1162:	88 e2       	ldi	r24, 0x28	; 40
    1164:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>
  LIS331_read_reg(OUT_X_H, &x_h);
    1168:	be 01       	movw	r22, r28
    116a:	6e 5f       	subi	r22, 0xFE	; 254
    116c:	7f 4f       	sbci	r23, 0xFF	; 255
    116e:	89 e2       	ldi	r24, 0x29	; 41
    1170:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>

  #if (INVERTED)
    *x = -1*REGS_TO_DATA(x_l, x_h);
  #else
    *x =    REGS_TO_DATA(x_l, x_h);
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	90 e0       	ldi	r25, 0x00	; 0
    1178:	98 2f       	mov	r25, r24
    117a:	88 27       	eor	r24, r24
    117c:	29 81       	ldd	r18, Y+1	; 0x01
    117e:	82 2b       	or	r24, r18
    1180:	95 95       	asr	r25
    1182:	87 95       	ror	r24
    1184:	95 95       	asr	r25
    1186:	87 95       	ror	r24
    1188:	95 95       	asr	r25
    118a:	87 95       	ror	r24
    118c:	95 95       	asr	r25
    118e:	87 95       	ror	r24
    1190:	f8 01       	movw	r30, r16
    1192:	80 83       	st	Z, r24
    1194:	91 83       	std	Z+1, r25	; 0x01
  #endif       
  
  return 0;
}
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	0f 90       	pop	r0
    119c:	0f 90       	pop	r0
    119e:	df 91       	pop	r29
    11a0:	cf 91       	pop	r28
    11a2:	1f 91       	pop	r17
    11a4:	0f 91       	pop	r16
    11a6:	08 95       	ret

000011a8 <LIS331_readY>:

int LIS331_readY(int16_t* y) {
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	00 d0       	rcall	.+0      	; 0x11b2 <LIS331_readY+0xa>
    11b2:	cd b7       	in	r28, 0x3d	; 61
    11b4:	de b7       	in	r29, 0x3e	; 62
    11b6:	8c 01       	movw	r16, r24
  uint8_t y_l, y_h;
  LIS331_read_reg(OUT_Y_L, &y_l);
    11b8:	be 01       	movw	r22, r28
    11ba:	6f 5f       	subi	r22, 0xFF	; 255
    11bc:	7f 4f       	sbci	r23, 0xFF	; 255
    11be:	8a e2       	ldi	r24, 0x2A	; 42
    11c0:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>
  LIS331_read_reg(OUT_Y_H, &y_h);
    11c4:	be 01       	movw	r22, r28
    11c6:	6e 5f       	subi	r22, 0xFE	; 254
    11c8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ca:	8b e2       	ldi	r24, 0x2B	; 43
    11cc:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>


  #if (INVERTED)
    *y = -1*REGS_TO_DATA(y_l, y_h);
  #else
    *y =    REGS_TO_DATA(y_l, y_h);
    11d0:	8a 81       	ldd	r24, Y+2	; 0x02
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	98 2f       	mov	r25, r24
    11d6:	88 27       	eor	r24, r24
    11d8:	29 81       	ldd	r18, Y+1	; 0x01
    11da:	82 2b       	or	r24, r18
    11dc:	95 95       	asr	r25
    11de:	87 95       	ror	r24
    11e0:	95 95       	asr	r25
    11e2:	87 95       	ror	r24
    11e4:	95 95       	asr	r25
    11e6:	87 95       	ror	r24
    11e8:	95 95       	asr	r25
    11ea:	87 95       	ror	r24
    11ec:	f8 01       	movw	r30, r16
    11ee:	80 83       	st	Z, r24
    11f0:	91 83       	std	Z+1, r25	; 0x01
  #endif

  return 0;
}
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0f 90       	pop	r0
    11f8:	0f 90       	pop	r0
    11fa:	df 91       	pop	r29
    11fc:	cf 91       	pop	r28
    11fe:	1f 91       	pop	r17
    1200:	0f 91       	pop	r16
    1202:	08 95       	ret

00001204 <LIS331_readZ>:

int LIS331_readZ(int16_t* z) {
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	00 d0       	rcall	.+0      	; 0x120e <LIS331_readZ+0xa>
    120e:	cd b7       	in	r28, 0x3d	; 61
    1210:	de b7       	in	r29, 0x3e	; 62
    1212:	8c 01       	movw	r16, r24
  uint8_t z_l, z_h;
  LIS331_read_reg(OUT_Z_L, &z_l);
    1214:	be 01       	movw	r22, r28
    1216:	6f 5f       	subi	r22, 0xFF	; 255
    1218:	7f 4f       	sbci	r23, 0xFF	; 255
    121a:	8c e2       	ldi	r24, 0x2C	; 44
    121c:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>
  LIS331_read_reg(OUT_Z_H, &z_h);
    1220:	be 01       	movw	r22, r28
    1222:	6e 5f       	subi	r22, 0xFE	; 254
    1224:	7f 4f       	sbci	r23, 0xFF	; 255
    1226:	8d e2       	ldi	r24, 0x2D	; 45
    1228:	0e 94 97 08 	call	0x112e	; 0x112e <LIS331_read_reg>
  
  #if (INVERTED)
    *z = -1*REGS_TO_DATA(z_l, z_h);
  #else
    *z =    REGS_TO_DATA(z_l, z_h);
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 2f       	mov	r25, r24
    1232:	88 27       	eor	r24, r24
    1234:	29 81       	ldd	r18, Y+1	; 0x01
    1236:	82 2b       	or	r24, r18
    1238:	95 95       	asr	r25
    123a:	87 95       	ror	r24
    123c:	95 95       	asr	r25
    123e:	87 95       	ror	r24
    1240:	95 95       	asr	r25
    1242:	87 95       	ror	r24
    1244:	95 95       	asr	r25
    1246:	87 95       	ror	r24
    1248:	f8 01       	movw	r30, r16
    124a:	80 83       	st	Z, r24
    124c:	91 83       	std	Z+1, r25	; 0x01
  #endif

  return 0;
}
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	df 91       	pop	r29
    1258:	cf 91       	pop	r28
    125a:	1f 91       	pop	r17
    125c:	0f 91       	pop	r16
    125e:	08 95       	ret

00001260 <LED_init>:
	led->b = b;
}

void LED_clear(CRGB* leds, uint16_t num) {
	//LED_fill_color(leds, BLACK, num);
	LED_reset();
    1260:	e0 e4       	ldi	r30, 0x40	; 64
    1262:	f9 e0       	ldi	r31, 0x09	; 9
    1264:	84 e8       	ldi	r24, 0x84	; 132
    1266:	81 83       	std	Z+1, r24	; 0x01
    1268:	81 e2       	ldi	r24, 0x21	; 33
    126a:	80 83       	st	Z, r24
    126c:	e0 e0       	ldi	r30, 0x00	; 0
    126e:	f4 e0       	ldi	r31, 0x04	; 4
    1270:	80 e1       	ldi	r24, 0x10	; 16
    1272:	85 83       	std	Z+5, r24	; 0x05
    1274:	90 e8       	ldi	r25, 0x80	; 128
    1276:	94 8b       	std	Z+20, r25	; 0x14
    1278:	81 83       	std	Z+1, r24	; 0x01
    127a:	08 95       	ret

0000127c <LED_send_byte>:
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	0f c0       	rjmp	.+30     	; 0x129e <LED_send_byte+0x22>
    1280:	90 91 43 09 	lds	r25, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
    1284:	95 ff       	sbrs	r25, 5
    1286:	fc cf       	rjmp	.-8      	; 0x1280 <LED_send_byte+0x4>
    1288:	88 23       	and	r24, r24
    128a:	24 f4       	brge	.+8      	; 0x1294 <LED_send_byte+0x18>
    128c:	9f e0       	ldi	r25, 0x0F	; 15
    128e:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
    1292:	03 c0       	rjmp	.+6      	; 0x129a <LED_send_byte+0x1e>
    1294:	9f e7       	ldi	r25, 0x7F	; 127
    1296:	90 93 44 09 	sts	0x0944, r25	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
    129a:	88 0f       	add	r24, r24
    129c:	2f 5f       	subi	r18, 0xFF	; 255
    129e:	28 30       	cpi	r18, 0x08	; 8
    12a0:	78 f3       	brcs	.-34     	; 0x1280 <LED_send_byte+0x4>
    12a2:	08 95       	ret

000012a4 <LED_fill_color>:
    12a4:	cf 93       	push	r28
    12a6:	df 93       	push	r29
    12a8:	ec 01       	movw	r28, r24
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0b c0       	rjmp	.+22     	; 0x12c4 <LED_fill_color+0x20>
    12ae:	df 01       	movw	r26, r30
    12b0:	aa 0f       	add	r26, r26
    12b2:	bb 1f       	adc	r27, r27
    12b4:	ea 0f       	add	r30, r26
    12b6:	fb 1f       	adc	r31, r27
    12b8:	ec 0f       	add	r30, r28
    12ba:	fd 1f       	adc	r31, r29
    12bc:	40 83       	st	Z, r20
    12be:	51 83       	std	Z+1, r21	; 0x01
    12c0:	62 83       	std	Z+2, r22	; 0x02
    12c2:	9f 5f       	subi	r25, 0xFF	; 255
    12c4:	e9 2f       	mov	r30, r25
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	e2 17       	cp	r30, r18
    12ca:	f3 07       	cpc	r31, r19
    12cc:	80 f3       	brcs	.-32     	; 0x12ae <LED_fill_color+0xa>
    12ce:	df 91       	pop	r29
    12d0:	cf 91       	pop	r28
    12d2:	08 95       	ret

000012d4 <LED_show>:
}

void LED_show(CRGB* leds, uint16_t num) {
    12d4:	af 92       	push	r10
    12d6:	bf 92       	push	r11
    12d8:	cf 92       	push	r12
    12da:	df 92       	push	r13
    12dc:	ef 92       	push	r14
    12de:	ff 92       	push	r15
    12e0:	0f 93       	push	r16
    12e2:	1f 93       	push	r17
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	8c 01       	movw	r16, r24
    12ea:	eb 01       	movw	r28, r22
	
	#if (HANDLE_INTR)
		cli();
	#endif
	
	for (uint16_t i = 0; i < num; i++) {
    12ec:	e1 2c       	mov	r14, r1
    12ee:	f1 2c       	mov	r15, r1
    12f0:	30 c0       	rjmp	.+96     	; 0x1352 <LED_show+0x7e>
		// compute brightness (check to see if this is not too time intensive)
		buf_r = ((uint16_t)(brightness * leds[i].r + 1) >> 8) % 256;
    12f2:	80 91 29 40 	lds	r24, 0x4029	; 0x804029 <brightness>
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	f7 01       	movw	r30, r14
    12fa:	ee 0f       	add	r30, r30
    12fc:	ff 1f       	adc	r31, r31
    12fe:	ee 0d       	add	r30, r14
    1300:	ff 1d       	adc	r31, r15
    1302:	e0 0f       	add	r30, r16
    1304:	f1 1f       	adc	r31, r17
    1306:	20 81       	ld	r18, Z
    1308:	28 9f       	mul	r18, r24
    130a:	60 01       	movw	r12, r0
    130c:	29 9f       	mul	r18, r25
    130e:	d0 0c       	add	r13, r0
    1310:	11 24       	eor	r1, r1
    1312:	2f ef       	ldi	r18, 0xFF	; 255
    1314:	c2 1a       	sub	r12, r18
    1316:	d2 0a       	sbc	r13, r18
		buf_g = ((uint16_t)(brightness * leds[i].g + 1) >> 8) % 256;
    1318:	41 81       	ldd	r20, Z+1	; 0x01
    131a:	48 9f       	mul	r20, r24
    131c:	90 01       	movw	r18, r0
    131e:	49 9f       	mul	r20, r25
    1320:	30 0d       	add	r19, r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 5f       	subi	r18, 0xFF	; 255
    1326:	3f 4f       	sbci	r19, 0xFF	; 255
		buf_b = ((uint16_t)(brightness * leds[i].b + 1) >> 8) % 256;
    1328:	22 81       	ldd	r18, Z+2	; 0x02
    132a:	28 9f       	mul	r18, r24
    132c:	50 01       	movw	r10, r0
    132e:	29 9f       	mul	r18, r25
    1330:	b0 0c       	add	r11, r0
    1332:	11 24       	eor	r1, r1
    1334:	8f ef       	ldi	r24, 0xFF	; 255
    1336:	a8 1a       	sub	r10, r24
    1338:	b8 0a       	sbc	r11, r24
		// send data, LEDs ordered GRB
		LED_send_byte(buf_g);
    133a:	83 2f       	mov	r24, r19
    133c:	0e 94 3e 09 	call	0x127c	; 0x127c <LED_send_byte>
		LED_send_byte(buf_r);
    1340:	8d 2d       	mov	r24, r13
    1342:	0e 94 3e 09 	call	0x127c	; 0x127c <LED_send_byte>
		LED_send_byte(buf_b);
    1346:	8b 2d       	mov	r24, r11
    1348:	0e 94 3e 09 	call	0x127c	; 0x127c <LED_send_byte>
	
	#if (HANDLE_INTR)
		cli();
	#endif
	
	for (uint16_t i = 0; i < num; i++) {
    134c:	2f ef       	ldi	r18, 0xFF	; 255
    134e:	e2 1a       	sub	r14, r18
    1350:	f2 0a       	sbc	r15, r18
    1352:	ec 16       	cp	r14, r28
    1354:	fd 06       	cpc	r15, r29
    1356:	68 f2       	brcs	.-102    	; 0x12f2 <LED_show+0x1e>
	
	#if (HANDLE_INTR)
		sei();
	#endif
	
}
    1358:	df 91       	pop	r29
    135a:	cf 91       	pop	r28
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	08 95       	ret

0000136e <LED_set_brightness>:

void LED_set_brightness(uint8_t amnt) {
	brightness = amnt;
    136e:	80 93 29 40 	sts	0x4029, r24	; 0x804029 <brightness>
    1372:	08 95       	ret

00001374 <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    1374:	cf 93       	push	r28
    1376:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
    1378:	81 11       	cpse	r24, r1
    137a:	06 c0       	rjmp	.+12     	; 0x1388 <usart_init+0x14>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
    1382:	c0 e0       	ldi	r28, 0x00	; 0
    1384:	d8 e0       	ldi	r29, 0x08	; 8
    1386:	19 c0       	rjmp	.+50     	; 0x13ba <usart_init+0x46>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
    1388:	81 30       	cpi	r24, 0x01	; 1
    138a:	29 f4       	brne	.+10     	; 0x1396 <usart_init+0x22>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    138c:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
    1390:	c0 e2       	ldi	r28, 0x20	; 32
    1392:	d8 e0       	ldi	r29, 0x08	; 8
    1394:	12 c0       	rjmp	.+36     	; 0x13ba <usart_init+0x46>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
    1396:	82 30       	cpi	r24, 0x02	; 2
    1398:	31 f4       	brne	.+12     	; 0x13a6 <usart_init+0x32>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
    13a0:	c0 e4       	ldi	r28, 0x40	; 64
    13a2:	d8 e0       	ldi	r29, 0x08	; 8
    13a4:	0a c0       	rjmp	.+20     	; 0x13ba <usart_init+0x46>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
    13a6:	83 30       	cpi	r24, 0x03	; 3
    13a8:	31 f4       	brne	.+12     	; 0x13b6 <usart_init+0x42>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
    13b0:	c0 e6       	ldi	r28, 0x60	; 96
    13b2:	d8 e0       	ldi	r29, 0x08	; 8
    13b4:	02 c0       	rjmp	.+4      	; 0x13ba <usart_init+0x46>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
    13b6:	c0 e0       	ldi	r28, 0x00	; 0
    13b8:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
    13ba:	db 01       	movw	r26, r22
    13bc:	ca 01       	movw	r24, r20
    13be:	88 0f       	add	r24, r24
    13c0:	99 1f       	adc	r25, r25
    13c2:	aa 1f       	adc	r26, r26
    13c4:	bb 1f       	adc	r27, r27
    13c6:	88 0f       	add	r24, r24
    13c8:	99 1f       	adc	r25, r25
    13ca:	aa 1f       	adc	r26, r26
    13cc:	bb 1f       	adc	r27, r27
    13ce:	9c 01       	movw	r18, r24
    13d0:	ad 01       	movw	r20, r26
    13d2:	22 0f       	add	r18, r18
    13d4:	33 1f       	adc	r19, r19
    13d6:	44 1f       	adc	r20, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	22 0f       	add	r18, r18
    13dc:	33 1f       	adc	r19, r19
    13de:	44 1f       	adc	r20, r20
    13e0:	55 1f       	adc	r21, r21
    13e2:	60 e0       	ldi	r22, 0x00	; 0
    13e4:	70 e0       	ldi	r23, 0x00	; 0
    13e6:	89 e0       	ldi	r24, 0x09	; 9
    13e8:	9d e3       	ldi	r25, 0x3D	; 61
    13ea:	0e 94 1d 0f 	call	0x1e3a	; 0x1e3a <__udivmodsi4>
    13ee:	28 87       	std	Y+8, r18	; 0x08
    13f0:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
    13f2:	8e 81       	ldd	r24, Y+6	; 0x06
    13f4:	80 6c       	ori	r24, 0xC0	; 192
    13f6:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
    13f8:	ce 01       	movw	r24, r28
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
    1400:	fc 01       	movw	r30, r24
    1402:	62 83       	std	Z+2, r22	; 0x02
    1404:	08 95       	ret

00001406 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
    1406:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
    1408:	94 81       	ldd	r25, Z+4	; 0x04
    140a:	95 ff       	sbrs	r25, 5
    140c:	fd cf       	rjmp	.-6      	; 0x1408 <usart_wait_until_transmit_ready+0x2>
}
    140e:	08 95       	ret

00001410 <usart_receive_data>:

int usart_receive_data(void* ptr)
{
    1410:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
    1412:	94 81       	ldd	r25, Z+4	; 0x04
    1414:	99 23       	and	r25, r25
    1416:	ec f7       	brge	.-6      	; 0x1412 <usart_receive_data+0x2>
	return (usart->RXDATAL);
    1418:	80 81       	ld	r24, Z
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	08 95       	ret

0000141e <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
    141e:	0f 93       	push	r16
    1420:	1f 93       	push	r17
    1422:	cf 93       	push	r28
    1424:	c8 2f       	mov	r28, r24
    1426:	8b 01       	movw	r16, r22
	if (c == '\a') {
    1428:	87 30       	cpi	r24, 0x07	; 7
    142a:	69 f4       	brne	.+26     	; 0x1446 <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
    142c:	20 91 fd 43 	lds	r18, 0x43FD	; 0x8043fd <__iob+0x4>
    1430:	30 91 fe 43 	lds	r19, 0x43FE	; 0x8043fe <__iob+0x5>
    1434:	47 e0       	ldi	r20, 0x07	; 7
    1436:	50 e0       	ldi	r21, 0x00	; 0
    1438:	61 e0       	ldi	r22, 0x01	; 1
    143a:	70 e0       	ldi	r23, 0x00	; 0
    143c:	85 e8       	ldi	r24, 0x85	; 133
    143e:	90 e4       	ldi	r25, 0x40	; 64
    1440:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <fwrite>
		return 0;
    1444:	0f c0       	rjmp	.+30     	; 0x1464 <uart_putchar+0x46>
	}

	if (c == '\n') {
    1446:	8a 30       	cpi	r24, 0x0A	; 10
    1448:	19 f4       	brne	.+6      	; 0x1450 <uart_putchar+0x32>
		uart_putchar('\r', stream);
    144a:	8d e0       	ldi	r24, 0x0D	; 13
    144c:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
    1450:	f8 01       	movw	r30, r16
    1452:	04 85       	ldd	r16, Z+12	; 0x0c
    1454:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
    1456:	c8 01       	movw	r24, r16
    1458:	0e 94 03 0a 	call	0x1406	; 0x1406 <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
    145c:	6c 2f       	mov	r22, r28
    145e:	c8 01       	movw	r24, r16
    1460:	0e 94 00 0a 	call	0x1400	; 0x1400 <usart_transmit_data>

	return 0;
}
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	cf 91       	pop	r28
    146a:	1f 91       	pop	r17
    146c:	0f 91       	pop	r16
    146e:	08 95       	ret

00001470 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
    1470:	ef 92       	push	r14
    1472:	ff 92       	push	r15
    1474:	0f 93       	push	r16
    1476:	1f 93       	push	r17
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
    147c:	20 91 f3 40 	lds	r18, 0x40F3	; 0x8040f3 <rxp.1995>
    1480:	30 91 f4 40 	lds	r19, 0x40F4	; 0x8040f4 <rxp.1995+0x1>
    1484:	23 2b       	or	r18, r19
    1486:	09 f0       	breq	.+2      	; 0x148a <uart_getchar+0x1a>
    1488:	9a c0       	rjmp	.+308    	; 0x15be <uart_getchar+0x14e>
    148a:	8c 01       	movw	r16, r24
    148c:	c3 ea       	ldi	r28, 0xA3	; 163
    148e:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
    1490:	f8 01       	movw	r30, r16
    1492:	84 85       	ldd	r24, Z+12	; 0x0c
    1494:	95 85       	ldd	r25, Z+13	; 0x0d
    1496:	0e 94 08 0a 	call	0x1410	; 0x1410 <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
    149a:	8d 30       	cpi	r24, 0x0D	; 13
    149c:	09 f4       	brne	.+2      	; 0x14a0 <uart_getchar+0x30>
				c = '\n';
    149e:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
    14a0:	8a 30       	cpi	r24, 0x0A	; 10
    14a2:	59 f4       	brne	.+22     	; 0x14ba <uart_getchar+0x4a>
			    *cp = c;
    14a4:	88 83       	st	Y, r24
				uart_putchar(c, stream);
    14a6:	b8 01       	movw	r22, r16
    14a8:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
			    rxp = b;
    14ac:	83 ea       	ldi	r24, 0xA3	; 163
    14ae:	90 e4       	ldi	r25, 0x40	; 64
    14b0:	80 93 f3 40 	sts	0x40F3, r24	; 0x8040f3 <rxp.1995>
    14b4:	90 93 f4 40 	sts	0x40F4, r25	; 0x8040f4 <rxp.1995+0x1>
				break;
    14b8:	82 c0       	rjmp	.+260    	; 0x15be <uart_getchar+0x14e>
			}
			else if (c == '\t')
    14ba:	89 30       	cpi	r24, 0x09	; 9
    14bc:	09 f4       	brne	.+2      	; 0x14c0 <uart_getchar+0x50>
				c = ' ';
    14be:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
    14c0:	90 ee       	ldi	r25, 0xE0	; 224
    14c2:	98 0f       	add	r25, r24
    14c4:	9f 35       	cpi	r25, 0x5F	; 95
    14c6:	10 f0       	brcs	.+4      	; 0x14cc <uart_getchar+0x5c>
    14c8:	80 3a       	cpi	r24, 0xA0	; 160
    14ca:	98 f0       	brcs	.+38     	; 0x14f2 <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
    14cc:	f0 e4       	ldi	r31, 0x40	; 64
    14ce:	c2 3f       	cpi	r28, 0xF2	; 242
    14d0:	df 07       	cpc	r29, r31
    14d2:	29 f4       	brne	.+10     	; 0x14de <uart_getchar+0x6e>
					uart_putchar('\a', stream);
    14d4:	b8 01       	movw	r22, r16
    14d6:	87 e0       	ldi	r24, 0x07	; 7
    14d8:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
    14dc:	d9 cf       	rjmp	.-78     	; 0x1490 <uart_getchar+0x20>
				else {
					*cp++ = c;
    14de:	7e 01       	movw	r14, r28
    14e0:	9f ef       	ldi	r25, 0xFF	; 255
    14e2:	e9 1a       	sub	r14, r25
    14e4:	f9 0a       	sbc	r15, r25
    14e6:	88 83       	st	Y, r24
					uart_putchar(c, stream);
    14e8:	b8 01       	movw	r22, r16
    14ea:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
    14ee:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
    14f0:	cf cf       	rjmp	.-98     	; 0x1490 <uart_getchar+0x20>
			}

			switch (c) {
    14f2:	82 31       	cpi	r24, 0x12	; 18
    14f4:	19 f1       	breq	.+70     	; 0x153c <uart_getchar+0xcc>
    14f6:	30 f4       	brcc	.+12     	; 0x1504 <uart_getchar+0x94>
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	09 f4       	brne	.+2      	; 0x14fe <uart_getchar+0x8e>
    14fc:	73 c0       	rjmp	.+230    	; 0x15e4 <uart_getchar+0x174>
    14fe:	88 30       	cpi	r24, 0x08	; 8
    1500:	49 f0       	breq	.+18     	; 0x1514 <uart_getchar+0xa4>
    1502:	c6 cf       	rjmp	.-116    	; 0x1490 <uart_getchar+0x20>
    1504:	87 31       	cpi	r24, 0x17	; 23
    1506:	09 f4       	brne	.+2      	; 0x150a <uart_getchar+0x9a>
    1508:	4e c0       	rjmp	.+156    	; 0x15a6 <uart_getchar+0x136>
    150a:	8f 37       	cpi	r24, 0x7F	; 127
    150c:	19 f0       	breq	.+6      	; 0x1514 <uart_getchar+0xa4>
    150e:	85 31       	cpi	r24, 0x15	; 21
    1510:	b9 f1       	breq	.+110    	; 0x1580 <uart_getchar+0x110>
    1512:	be cf       	rjmp	.-132    	; 0x1490 <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
    1514:	e0 e4       	ldi	r30, 0x40	; 64
    1516:	c3 3a       	cpi	r28, 0xA3	; 163
    1518:	de 07       	cpc	r29, r30
    151a:	09 f0       	breq	.+2      	; 0x151e <uart_getchar+0xae>
    151c:	08 f4       	brcc	.+2      	; 0x1520 <uart_getchar+0xb0>
    151e:	b8 cf       	rjmp	.-144    	; 0x1490 <uart_getchar+0x20>
						uart_putchar('\b', stream);
    1520:	b8 01       	movw	r22, r16
    1522:	88 e0       	ldi	r24, 0x08	; 8
    1524:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar(' ', stream);
    1528:	b8 01       	movw	r22, r16
    152a:	80 e2       	ldi	r24, 0x20	; 32
    152c:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar('\b', stream);
    1530:	b8 01       	movw	r22, r16
    1532:	88 e0       	ldi	r24, 0x08	; 8
    1534:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						cp--;
    1538:	21 97       	sbiw	r28, 0x01	; 1
    153a:	aa cf       	rjmp	.-172    	; 0x1490 <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
    153c:	b8 01       	movw	r22, r16
    153e:	8d e0       	ldi	r24, 0x0D	; 13
    1540:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
    1544:	0f 2e       	mov	r0, r31
    1546:	f3 ea       	ldi	r31, 0xA3	; 163
    1548:	ef 2e       	mov	r14, r31
    154a:	f0 e4       	ldi	r31, 0x40	; 64
    154c:	ff 2e       	mov	r15, r31
    154e:	f0 2d       	mov	r31, r0
    1550:	06 c0       	rjmp	.+12     	; 0x155e <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
    1552:	b8 01       	movw	r22, r16
    1554:	f7 01       	movw	r30, r14
    1556:	81 91       	ld	r24, Z+
    1558:	7f 01       	movw	r14, r30
    155a:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
    155e:	ec 16       	cp	r14, r28
    1560:	fd 06       	cpc	r15, r29
    1562:	b8 f3       	brcs	.-18     	; 0x1552 <uart_getchar+0xe2>
    1564:	95 cf       	rjmp	.-214    	; 0x1490 <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
    1566:	b8 01       	movw	r22, r16
    1568:	88 e0       	ldi	r24, 0x08	; 8
    156a:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar(' ', stream);
    156e:	b8 01       	movw	r22, r16
    1570:	80 e2       	ldi	r24, 0x20	; 32
    1572:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar('\b', stream);
    1576:	b8 01       	movw	r22, r16
    1578:	88 e0       	ldi	r24, 0x08	; 8
    157a:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						cp--;
    157e:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
    1580:	f0 e4       	ldi	r31, 0x40	; 64
    1582:	c3 3a       	cpi	r28, 0xA3	; 163
    1584:	df 07       	cpc	r29, r31
    1586:	09 f0       	breq	.+2      	; 0x158a <uart_getchar+0x11a>
    1588:	70 f7       	brcc	.-36     	; 0x1566 <uart_getchar+0xf6>
    158a:	82 cf       	rjmp	.-252    	; 0x1490 <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
    158c:	b8 01       	movw	r22, r16
    158e:	88 e0       	ldi	r24, 0x08	; 8
    1590:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar(' ', stream);
    1594:	b8 01       	movw	r22, r16
    1596:	80 e2       	ldi	r24, 0x20	; 32
    1598:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						uart_putchar('\b', stream);
    159c:	b8 01       	movw	r22, r16
    159e:	88 e0       	ldi	r24, 0x08	; 8
    15a0:	0e 94 0f 0a 	call	0x141e	; 0x141e <uart_putchar>
						cp--;
    15a4:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
    15a6:	80 e4       	ldi	r24, 0x40	; 64
    15a8:	c3 3a       	cpi	r28, 0xA3	; 163
    15aa:	d8 07       	cpc	r29, r24
    15ac:	09 f0       	breq	.+2      	; 0x15b0 <uart_getchar+0x140>
    15ae:	08 f4       	brcc	.+2      	; 0x15b2 <uart_getchar+0x142>
    15b0:	6f cf       	rjmp	.-290    	; 0x1490 <uart_getchar+0x20>
    15b2:	fe 01       	movw	r30, r28
    15b4:	31 97       	sbiw	r30, 0x01	; 1
    15b6:	80 81       	ld	r24, Z
    15b8:	80 32       	cpi	r24, 0x20	; 32
    15ba:	41 f7       	brne	.-48     	; 0x158c <uart_getchar+0x11c>
    15bc:	69 cf       	rjmp	.-302    	; 0x1490 <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
    15be:	e0 91 f3 40 	lds	r30, 0x40F3	; 0x8040f3 <rxp.1995>
    15c2:	f0 91 f4 40 	lds	r31, 0x40F4	; 0x8040f4 <rxp.1995+0x1>
    15c6:	cf 01       	movw	r24, r30
    15c8:	01 96       	adiw	r24, 0x01	; 1
    15ca:	80 93 f3 40 	sts	0x40F3, r24	; 0x8040f3 <rxp.1995>
    15ce:	90 93 f4 40 	sts	0x40F4, r25	; 0x8040f4 <rxp.1995+0x1>
    15d2:	80 81       	ld	r24, Z
	if (c == '\n')
    15d4:	8a 30       	cpi	r24, 0x0A	; 10
    15d6:	21 f4       	brne	.+8      	; 0x15e0 <uart_getchar+0x170>
		rxp = 0;
    15d8:	10 92 f3 40 	sts	0x40F3, r1	; 0x8040f3 <rxp.1995>
    15dc:	10 92 f4 40 	sts	0x40F4, r1	; 0x8040f4 <rxp.1995+0x1>

	return c;
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
    15e4:	8f ef       	ldi	r24, 0xFF	; 255
    15e6:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	0f 91       	pop	r16
    15f0:	ff 90       	pop	r15
    15f2:	ef 90       	pop	r14
    15f4:	08 95       	ret

000015f6 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	e9 01       	movw	r28, r18
	if (stream) {
    15fc:	20 97       	sbiw	r28, 0x00	; 0
    15fe:	49 f0       	breq	.+18     	; 0x1612 <uart_init+0x1c>
		*stream = uartFile;
    1600:	9e e0       	ldi	r25, 0x0E	; 14
    1602:	ea e2       	ldi	r30, 0x2A	; 42
    1604:	f0 e4       	ldi	r31, 0x40	; 64
    1606:	d9 01       	movw	r26, r18
    1608:	01 90       	ld	r0, Z+
    160a:	0d 92       	st	X+, r0
    160c:	9a 95       	dec	r25
    160e:	e1 f7       	brne	.-8      	; 0x1608 <uart_init+0x12>
    1610:	0b c0       	rjmp	.+22     	; 0x1628 <uart_init+0x32>
	} else {
		stdout = &uartFile;
    1612:	e9 ef       	ldi	r30, 0xF9	; 249
    1614:	f3 e4       	ldi	r31, 0x43	; 67
    1616:	2a e2       	ldi	r18, 0x2A	; 42
    1618:	30 e4       	ldi	r19, 0x40	; 64
    161a:	22 83       	std	Z+2, r18	; 0x02
    161c:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
    161e:	20 83       	st	Z, r18
    1620:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
    1622:	24 83       	std	Z+4, r18	; 0x04
    1624:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
    1626:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
    1628:	0e 94 ba 09 	call	0x1374	; 0x1374 <usart_init>
	fdev_set_udata(stream, usart);
    162c:	8c 87       	std	Y+12, r24	; 0x0c
    162e:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
    1630:	ce 01       	movw	r24, r28
    1632:	df 91       	pop	r29
    1634:	cf 91       	pop	r28
    1636:	08 95       	ret

00001638 <__subsf3>:
    1638:	50 58       	subi	r21, 0x80	; 128

0000163a <__addsf3>:
    163a:	bb 27       	eor	r27, r27
    163c:	aa 27       	eor	r26, r26
    163e:	0e 94 34 0b 	call	0x1668	; 0x1668 <__addsf3x>
    1642:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    1646:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__fp_pscA>
    164a:	38 f0       	brcs	.+14     	; 0x165a <__addsf3+0x20>
    164c:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_pscB>
    1650:	20 f0       	brcs	.+8      	; 0x165a <__addsf3+0x20>
    1652:	39 f4       	brne	.+14     	; 0x1662 <__addsf3+0x28>
    1654:	9f 3f       	cpi	r25, 0xFF	; 255
    1656:	19 f4       	brne	.+6      	; 0x165e <__addsf3+0x24>
    1658:	26 f4       	brtc	.+8      	; 0x1662 <__addsf3+0x28>
    165a:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>
    165e:	0e f4       	brtc	.+2      	; 0x1662 <__addsf3+0x28>
    1660:	e0 95       	com	r30
    1662:	e7 fb       	bst	r30, 7
    1664:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_inf>

00001668 <__addsf3x>:
    1668:	e9 2f       	mov	r30, r25
    166a:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_split3>
    166e:	58 f3       	brcs	.-42     	; 0x1646 <__addsf3+0xc>
    1670:	ba 17       	cp	r27, r26
    1672:	62 07       	cpc	r22, r18
    1674:	73 07       	cpc	r23, r19
    1676:	84 07       	cpc	r24, r20
    1678:	95 07       	cpc	r25, r21
    167a:	20 f0       	brcs	.+8      	; 0x1684 <__addsf3x+0x1c>
    167c:	79 f4       	brne	.+30     	; 0x169c <__addsf3x+0x34>
    167e:	a6 f5       	brtc	.+104    	; 0x16e8 <__addsf3x+0x80>
    1680:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_zero>
    1684:	0e f4       	brtc	.+2      	; 0x1688 <__addsf3x+0x20>
    1686:	e0 95       	com	r30
    1688:	0b 2e       	mov	r0, r27
    168a:	ba 2f       	mov	r27, r26
    168c:	a0 2d       	mov	r26, r0
    168e:	0b 01       	movw	r0, r22
    1690:	b9 01       	movw	r22, r18
    1692:	90 01       	movw	r18, r0
    1694:	0c 01       	movw	r0, r24
    1696:	ca 01       	movw	r24, r20
    1698:	a0 01       	movw	r20, r0
    169a:	11 24       	eor	r1, r1
    169c:	ff 27       	eor	r31, r31
    169e:	59 1b       	sub	r21, r25
    16a0:	99 f0       	breq	.+38     	; 0x16c8 <__addsf3x+0x60>
    16a2:	59 3f       	cpi	r21, 0xF9	; 249
    16a4:	50 f4       	brcc	.+20     	; 0x16ba <__addsf3x+0x52>
    16a6:	50 3e       	cpi	r21, 0xE0	; 224
    16a8:	68 f1       	brcs	.+90     	; 0x1704 <__addsf3x+0x9c>
    16aa:	1a 16       	cp	r1, r26
    16ac:	f0 40       	sbci	r31, 0x00	; 0
    16ae:	a2 2f       	mov	r26, r18
    16b0:	23 2f       	mov	r18, r19
    16b2:	34 2f       	mov	r19, r20
    16b4:	44 27       	eor	r20, r20
    16b6:	58 5f       	subi	r21, 0xF8	; 248
    16b8:	f3 cf       	rjmp	.-26     	; 0x16a0 <__addsf3x+0x38>
    16ba:	46 95       	lsr	r20
    16bc:	37 95       	ror	r19
    16be:	27 95       	ror	r18
    16c0:	a7 95       	ror	r26
    16c2:	f0 40       	sbci	r31, 0x00	; 0
    16c4:	53 95       	inc	r21
    16c6:	c9 f7       	brne	.-14     	; 0x16ba <__addsf3x+0x52>
    16c8:	7e f4       	brtc	.+30     	; 0x16e8 <__addsf3x+0x80>
    16ca:	1f 16       	cp	r1, r31
    16cc:	ba 0b       	sbc	r27, r26
    16ce:	62 0b       	sbc	r22, r18
    16d0:	73 0b       	sbc	r23, r19
    16d2:	84 0b       	sbc	r24, r20
    16d4:	ba f0       	brmi	.+46     	; 0x1704 <__addsf3x+0x9c>
    16d6:	91 50       	subi	r25, 0x01	; 1
    16d8:	a1 f0       	breq	.+40     	; 0x1702 <__addsf3x+0x9a>
    16da:	ff 0f       	add	r31, r31
    16dc:	bb 1f       	adc	r27, r27
    16de:	66 1f       	adc	r22, r22
    16e0:	77 1f       	adc	r23, r23
    16e2:	88 1f       	adc	r24, r24
    16e4:	c2 f7       	brpl	.-16     	; 0x16d6 <__addsf3x+0x6e>
    16e6:	0e c0       	rjmp	.+28     	; 0x1704 <__addsf3x+0x9c>
    16e8:	ba 0f       	add	r27, r26
    16ea:	62 1f       	adc	r22, r18
    16ec:	73 1f       	adc	r23, r19
    16ee:	84 1f       	adc	r24, r20
    16f0:	48 f4       	brcc	.+18     	; 0x1704 <__addsf3x+0x9c>
    16f2:	87 95       	ror	r24
    16f4:	77 95       	ror	r23
    16f6:	67 95       	ror	r22
    16f8:	b7 95       	ror	r27
    16fa:	f7 95       	ror	r31
    16fc:	9e 3f       	cpi	r25, 0xFE	; 254
    16fe:	08 f0       	brcs	.+2      	; 0x1702 <__addsf3x+0x9a>
    1700:	b0 cf       	rjmp	.-160    	; 0x1662 <__addsf3+0x28>
    1702:	93 95       	inc	r25
    1704:	88 0f       	add	r24, r24
    1706:	08 f0       	brcs	.+2      	; 0x170a <__addsf3x+0xa2>
    1708:	99 27       	eor	r25, r25
    170a:	ee 0f       	add	r30, r30
    170c:	97 95       	ror	r25
    170e:	87 95       	ror	r24
    1710:	08 95       	ret
    1712:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__fp_pscA>
    1716:	60 f0       	brcs	.+24     	; 0x1730 <__addsf3x+0xc8>
    1718:	80 e8       	ldi	r24, 0x80	; 128
    171a:	91 e0       	ldi	r25, 0x01	; 1
    171c:	09 f4       	brne	.+2      	; 0x1720 <__addsf3x+0xb8>
    171e:	9e ef       	ldi	r25, 0xFE	; 254
    1720:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_pscB>
    1724:	28 f0       	brcs	.+10     	; 0x1730 <__addsf3x+0xc8>
    1726:	40 e8       	ldi	r20, 0x80	; 128
    1728:	51 e0       	ldi	r21, 0x01	; 1
    172a:	71 f4       	brne	.+28     	; 0x1748 <atan2+0x10>
    172c:	5e ef       	ldi	r21, 0xFE	; 254
    172e:	0c c0       	rjmp	.+24     	; 0x1748 <atan2+0x10>
    1730:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>
    1734:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_zero>

00001738 <atan2>:
    1738:	e9 2f       	mov	r30, r25
    173a:	e0 78       	andi	r30, 0x80	; 128
    173c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_split3>
    1740:	40 f3       	brcs	.-48     	; 0x1712 <__addsf3x+0xaa>
    1742:	09 2e       	mov	r0, r25
    1744:	05 2a       	or	r0, r21
    1746:	b1 f3       	breq	.-20     	; 0x1734 <__addsf3x+0xcc>
    1748:	26 17       	cp	r18, r22
    174a:	37 07       	cpc	r19, r23
    174c:	48 07       	cpc	r20, r24
    174e:	59 07       	cpc	r21, r25
    1750:	38 f0       	brcs	.+14     	; 0x1760 <atan2+0x28>
    1752:	0e 2e       	mov	r0, r30
    1754:	07 f8       	bld	r0, 7
    1756:	e0 25       	eor	r30, r0
    1758:	69 f0       	breq	.+26     	; 0x1774 <atan2+0x3c>
    175a:	e0 25       	eor	r30, r0
    175c:	e0 64       	ori	r30, 0x40	; 64
    175e:	0a c0       	rjmp	.+20     	; 0x1774 <atan2+0x3c>
    1760:	ef 63       	ori	r30, 0x3F	; 63
    1762:	07 f8       	bld	r0, 7
    1764:	00 94       	com	r0
    1766:	07 fa       	bst	r0, 7
    1768:	db 01       	movw	r26, r22
    176a:	b9 01       	movw	r22, r18
    176c:	9d 01       	movw	r18, r26
    176e:	dc 01       	movw	r26, r24
    1770:	ca 01       	movw	r24, r20
    1772:	ad 01       	movw	r20, r26
    1774:	ef 93       	push	r30
    1776:	0e 94 17 0c 	call	0x182e	; 0x182e <__divsf3_pse>
    177a:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fp_round>
    177e:	0e 94 cc 0b 	call	0x1798	; 0x1798 <atan>
    1782:	5f 91       	pop	r21
    1784:	55 23       	and	r21, r21
    1786:	39 f0       	breq	.+14     	; 0x1796 <atan2+0x5e>
    1788:	2b ed       	ldi	r18, 0xDB	; 219
    178a:	3f e0       	ldi	r19, 0x0F	; 15
    178c:	49 e4       	ldi	r20, 0x49	; 73
    178e:	50 fd       	sbrc	r21, 0
    1790:	49 ec       	ldi	r20, 0xC9	; 201
    1792:	0c 94 1d 0b 	jmp	0x163a	; 0x163a <__addsf3>
    1796:	08 95       	ret

00001798 <atan>:
    1798:	df 93       	push	r29
    179a:	dd 27       	eor	r29, r29
    179c:	b9 2f       	mov	r27, r25
    179e:	bf 77       	andi	r27, 0x7F	; 127
    17a0:	40 e8       	ldi	r20, 0x80	; 128
    17a2:	5f e3       	ldi	r21, 0x3F	; 63
    17a4:	16 16       	cp	r1, r22
    17a6:	17 06       	cpc	r1, r23
    17a8:	48 07       	cpc	r20, r24
    17aa:	5b 07       	cpc	r21, r27
    17ac:	18 f4       	brcc	.+6      	; 0x17b4 <atan+0x1c>
    17ae:	d9 2f       	mov	r29, r25
    17b0:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <inverse>
    17b4:	9f 93       	push	r25
    17b6:	8f 93       	push	r24
    17b8:	7f 93       	push	r23
    17ba:	6f 93       	push	r22
    17bc:	0e 94 c1 0e 	call	0x1d82	; 0x1d82 <square>
    17c0:	e4 ef       	ldi	r30, 0xF4	; 244
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fp_powser>
    17c8:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fp_round>
    17cc:	2f 91       	pop	r18
    17ce:	3f 91       	pop	r19
    17d0:	4f 91       	pop	r20
    17d2:	5f 91       	pop	r21
    17d4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__mulsf3x>
    17d8:	dd 23       	and	r29, r29
    17da:	51 f0       	breq	.+20     	; 0x17f0 <atan+0x58>
    17dc:	90 58       	subi	r25, 0x80	; 128
    17de:	a2 ea       	ldi	r26, 0xA2	; 162
    17e0:	2a ed       	ldi	r18, 0xDA	; 218
    17e2:	3f e0       	ldi	r19, 0x0F	; 15
    17e4:	49 ec       	ldi	r20, 0xC9	; 201
    17e6:	5f e3       	ldi	r21, 0x3F	; 63
    17e8:	d0 78       	andi	r29, 0x80	; 128
    17ea:	5d 27       	eor	r21, r29
    17ec:	0e 94 34 0b 	call	0x1668	; 0x1668 <__addsf3x>
    17f0:	df 91       	pop	r29
    17f2:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>

000017f6 <cos>:
    17f6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_rempio2>
    17fa:	e3 95       	inc	r30
    17fc:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__fp_sinus>

00001800 <__divsf3>:
    1800:	0e 94 14 0c 	call	0x1828	; 0x1828 <__divsf3x>
    1804:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    1808:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_pscB>
    180c:	58 f0       	brcs	.+22     	; 0x1824 <__divsf3+0x24>
    180e:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__fp_pscA>
    1812:	40 f0       	brcs	.+16     	; 0x1824 <__divsf3+0x24>
    1814:	29 f4       	brne	.+10     	; 0x1820 <__divsf3+0x20>
    1816:	5f 3f       	cpi	r21, 0xFF	; 255
    1818:	29 f0       	breq	.+10     	; 0x1824 <__divsf3+0x24>
    181a:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_inf>
    181e:	51 11       	cpse	r21, r1
    1820:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>
    1824:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>

00001828 <__divsf3x>:
    1828:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_split3>
    182c:	68 f3       	brcs	.-38     	; 0x1808 <__divsf3+0x8>

0000182e <__divsf3_pse>:
    182e:	99 23       	and	r25, r25
    1830:	b1 f3       	breq	.-20     	; 0x181e <__divsf3+0x1e>
    1832:	55 23       	and	r21, r21
    1834:	91 f3       	breq	.-28     	; 0x181a <__divsf3+0x1a>
    1836:	95 1b       	sub	r25, r21
    1838:	55 0b       	sbc	r21, r21
    183a:	bb 27       	eor	r27, r27
    183c:	aa 27       	eor	r26, r26
    183e:	62 17       	cp	r22, r18
    1840:	73 07       	cpc	r23, r19
    1842:	84 07       	cpc	r24, r20
    1844:	38 f0       	brcs	.+14     	; 0x1854 <__divsf3_pse+0x26>
    1846:	9f 5f       	subi	r25, 0xFF	; 255
    1848:	5f 4f       	sbci	r21, 0xFF	; 255
    184a:	22 0f       	add	r18, r18
    184c:	33 1f       	adc	r19, r19
    184e:	44 1f       	adc	r20, r20
    1850:	aa 1f       	adc	r26, r26
    1852:	a9 f3       	breq	.-22     	; 0x183e <__divsf3_pse+0x10>
    1854:	35 d0       	rcall	.+106    	; 0x18c0 <__divsf3_pse+0x92>
    1856:	0e 2e       	mov	r0, r30
    1858:	3a f0       	brmi	.+14     	; 0x1868 <__divsf3_pse+0x3a>
    185a:	e0 e8       	ldi	r30, 0x80	; 128
    185c:	32 d0       	rcall	.+100    	; 0x18c2 <__divsf3_pse+0x94>
    185e:	91 50       	subi	r25, 0x01	; 1
    1860:	50 40       	sbci	r21, 0x00	; 0
    1862:	e6 95       	lsr	r30
    1864:	00 1c       	adc	r0, r0
    1866:	ca f7       	brpl	.-14     	; 0x185a <__divsf3_pse+0x2c>
    1868:	2b d0       	rcall	.+86     	; 0x18c0 <__divsf3_pse+0x92>
    186a:	fe 2f       	mov	r31, r30
    186c:	29 d0       	rcall	.+82     	; 0x18c0 <__divsf3_pse+0x92>
    186e:	66 0f       	add	r22, r22
    1870:	77 1f       	adc	r23, r23
    1872:	88 1f       	adc	r24, r24
    1874:	bb 1f       	adc	r27, r27
    1876:	26 17       	cp	r18, r22
    1878:	37 07       	cpc	r19, r23
    187a:	48 07       	cpc	r20, r24
    187c:	ab 07       	cpc	r26, r27
    187e:	b0 e8       	ldi	r27, 0x80	; 128
    1880:	09 f0       	breq	.+2      	; 0x1884 <__divsf3_pse+0x56>
    1882:	bb 0b       	sbc	r27, r27
    1884:	80 2d       	mov	r24, r0
    1886:	bf 01       	movw	r22, r30
    1888:	ff 27       	eor	r31, r31
    188a:	93 58       	subi	r25, 0x83	; 131
    188c:	5f 4f       	sbci	r21, 0xFF	; 255
    188e:	3a f0       	brmi	.+14     	; 0x189e <__divsf3_pse+0x70>
    1890:	9e 3f       	cpi	r25, 0xFE	; 254
    1892:	51 05       	cpc	r21, r1
    1894:	78 f0       	brcs	.+30     	; 0x18b4 <__divsf3_pse+0x86>
    1896:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_inf>
    189a:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>
    189e:	5f 3f       	cpi	r21, 0xFF	; 255
    18a0:	e4 f3       	brlt	.-8      	; 0x189a <__divsf3_pse+0x6c>
    18a2:	98 3e       	cpi	r25, 0xE8	; 232
    18a4:	d4 f3       	brlt	.-12     	; 0x189a <__divsf3_pse+0x6c>
    18a6:	86 95       	lsr	r24
    18a8:	77 95       	ror	r23
    18aa:	67 95       	ror	r22
    18ac:	b7 95       	ror	r27
    18ae:	f7 95       	ror	r31
    18b0:	9f 5f       	subi	r25, 0xFF	; 255
    18b2:	c9 f7       	brne	.-14     	; 0x18a6 <__divsf3_pse+0x78>
    18b4:	88 0f       	add	r24, r24
    18b6:	91 1d       	adc	r25, r1
    18b8:	96 95       	lsr	r25
    18ba:	87 95       	ror	r24
    18bc:	97 f9       	bld	r25, 7
    18be:	08 95       	ret
    18c0:	e1 e0       	ldi	r30, 0x01	; 1
    18c2:	66 0f       	add	r22, r22
    18c4:	77 1f       	adc	r23, r23
    18c6:	88 1f       	adc	r24, r24
    18c8:	bb 1f       	adc	r27, r27
    18ca:	62 17       	cp	r22, r18
    18cc:	73 07       	cpc	r23, r19
    18ce:	84 07       	cpc	r24, r20
    18d0:	ba 07       	cpc	r27, r26
    18d2:	20 f0       	brcs	.+8      	; 0x18dc <__divsf3_pse+0xae>
    18d4:	62 1b       	sub	r22, r18
    18d6:	73 0b       	sbc	r23, r19
    18d8:	84 0b       	sbc	r24, r20
    18da:	ba 0b       	sbc	r27, r26
    18dc:	ee 1f       	adc	r30, r30
    18de:	88 f7       	brcc	.-30     	; 0x18c2 <__divsf3_pse+0x94>
    18e0:	e0 95       	com	r30
    18e2:	08 95       	ret

000018e4 <__fixsfsi>:
    18e4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <__fixunssfsi>
    18e8:	68 94       	set
    18ea:	b1 11       	cpse	r27, r1
    18ec:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>
    18f0:	08 95       	ret

000018f2 <__fixunssfsi>:
    18f2:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__fp_splitA>
    18f6:	88 f0       	brcs	.+34     	; 0x191a <__fixunssfsi+0x28>
    18f8:	9f 57       	subi	r25, 0x7F	; 127
    18fa:	98 f0       	brcs	.+38     	; 0x1922 <__fixunssfsi+0x30>
    18fc:	b9 2f       	mov	r27, r25
    18fe:	99 27       	eor	r25, r25
    1900:	b7 51       	subi	r27, 0x17	; 23
    1902:	b0 f0       	brcs	.+44     	; 0x1930 <__fixunssfsi+0x3e>
    1904:	e1 f0       	breq	.+56     	; 0x193e <__fixunssfsi+0x4c>
    1906:	66 0f       	add	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	1a f0       	brmi	.+6      	; 0x1916 <__fixunssfsi+0x24>
    1910:	ba 95       	dec	r27
    1912:	c9 f7       	brne	.-14     	; 0x1906 <__fixunssfsi+0x14>
    1914:	14 c0       	rjmp	.+40     	; 0x193e <__fixunssfsi+0x4c>
    1916:	b1 30       	cpi	r27, 0x01	; 1
    1918:	91 f0       	breq	.+36     	; 0x193e <__fixunssfsi+0x4c>
    191a:	0e 94 d3 0d 	call	0x1ba6	; 0x1ba6 <__fp_zero>
    191e:	b1 e0       	ldi	r27, 0x01	; 1
    1920:	08 95       	ret
    1922:	0c 94 d3 0d 	jmp	0x1ba6	; 0x1ba6 <__fp_zero>
    1926:	67 2f       	mov	r22, r23
    1928:	78 2f       	mov	r23, r24
    192a:	88 27       	eor	r24, r24
    192c:	b8 5f       	subi	r27, 0xF8	; 248
    192e:	39 f0       	breq	.+14     	; 0x193e <__fixunssfsi+0x4c>
    1930:	b9 3f       	cpi	r27, 0xF9	; 249
    1932:	cc f3       	brlt	.-14     	; 0x1926 <__fixunssfsi+0x34>
    1934:	86 95       	lsr	r24
    1936:	77 95       	ror	r23
    1938:	67 95       	ror	r22
    193a:	b3 95       	inc	r27
    193c:	d9 f7       	brne	.-10     	; 0x1934 <__fixunssfsi+0x42>
    193e:	3e f4       	brtc	.+14     	; 0x194e <__fixunssfsi+0x5c>
    1940:	90 95       	com	r25
    1942:	80 95       	com	r24
    1944:	70 95       	com	r23
    1946:	61 95       	neg	r22
    1948:	7f 4f       	sbci	r23, 0xFF	; 255
    194a:	8f 4f       	sbci	r24, 0xFF	; 255
    194c:	9f 4f       	sbci	r25, 0xFF	; 255
    194e:	08 95       	ret

00001950 <__floatunsisf>:
    1950:	e8 94       	clt
    1952:	09 c0       	rjmp	.+18     	; 0x1966 <__floatsisf+0x12>

00001954 <__floatsisf>:
    1954:	97 fb       	bst	r25, 7
    1956:	3e f4       	brtc	.+14     	; 0x1966 <__floatsisf+0x12>
    1958:	90 95       	com	r25
    195a:	80 95       	com	r24
    195c:	70 95       	com	r23
    195e:	61 95       	neg	r22
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	8f 4f       	sbci	r24, 0xFF	; 255
    1964:	9f 4f       	sbci	r25, 0xFF	; 255
    1966:	99 23       	and	r25, r25
    1968:	a9 f0       	breq	.+42     	; 0x1994 <__floatsisf+0x40>
    196a:	f9 2f       	mov	r31, r25
    196c:	96 e9       	ldi	r25, 0x96	; 150
    196e:	bb 27       	eor	r27, r27
    1970:	93 95       	inc	r25
    1972:	f6 95       	lsr	r31
    1974:	87 95       	ror	r24
    1976:	77 95       	ror	r23
    1978:	67 95       	ror	r22
    197a:	b7 95       	ror	r27
    197c:	f1 11       	cpse	r31, r1
    197e:	f8 cf       	rjmp	.-16     	; 0x1970 <__floatsisf+0x1c>
    1980:	fa f4       	brpl	.+62     	; 0x19c0 <__floatsisf+0x6c>
    1982:	bb 0f       	add	r27, r27
    1984:	11 f4       	brne	.+4      	; 0x198a <__floatsisf+0x36>
    1986:	60 ff       	sbrs	r22, 0
    1988:	1b c0       	rjmp	.+54     	; 0x19c0 <__floatsisf+0x6c>
    198a:	6f 5f       	subi	r22, 0xFF	; 255
    198c:	7f 4f       	sbci	r23, 0xFF	; 255
    198e:	8f 4f       	sbci	r24, 0xFF	; 255
    1990:	9f 4f       	sbci	r25, 0xFF	; 255
    1992:	16 c0       	rjmp	.+44     	; 0x19c0 <__floatsisf+0x6c>
    1994:	88 23       	and	r24, r24
    1996:	11 f0       	breq	.+4      	; 0x199c <__floatsisf+0x48>
    1998:	96 e9       	ldi	r25, 0x96	; 150
    199a:	11 c0       	rjmp	.+34     	; 0x19be <__floatsisf+0x6a>
    199c:	77 23       	and	r23, r23
    199e:	21 f0       	breq	.+8      	; 0x19a8 <__floatsisf+0x54>
    19a0:	9e e8       	ldi	r25, 0x8E	; 142
    19a2:	87 2f       	mov	r24, r23
    19a4:	76 2f       	mov	r23, r22
    19a6:	05 c0       	rjmp	.+10     	; 0x19b2 <__floatsisf+0x5e>
    19a8:	66 23       	and	r22, r22
    19aa:	71 f0       	breq	.+28     	; 0x19c8 <__floatsisf+0x74>
    19ac:	96 e8       	ldi	r25, 0x86	; 134
    19ae:	86 2f       	mov	r24, r22
    19b0:	70 e0       	ldi	r23, 0x00	; 0
    19b2:	60 e0       	ldi	r22, 0x00	; 0
    19b4:	2a f0       	brmi	.+10     	; 0x19c0 <__floatsisf+0x6c>
    19b6:	9a 95       	dec	r25
    19b8:	66 0f       	add	r22, r22
    19ba:	77 1f       	adc	r23, r23
    19bc:	88 1f       	adc	r24, r24
    19be:	da f7       	brpl	.-10     	; 0x19b6 <__floatsisf+0x62>
    19c0:	88 0f       	add	r24, r24
    19c2:	96 95       	lsr	r25
    19c4:	87 95       	ror	r24
    19c6:	97 f9       	bld	r25, 7
    19c8:	08 95       	ret

000019ca <fmax>:
    19ca:	99 0f       	add	r25, r25
    19cc:	bb 0b       	sbc	r27, r27
    19ce:	55 0f       	add	r21, r21
    19d0:	aa 0b       	sbc	r26, r26
    19d2:	e0 e8       	ldi	r30, 0x80	; 128
    19d4:	fe ef       	ldi	r31, 0xFE	; 254
    19d6:	16 16       	cp	r1, r22
    19d8:	17 06       	cpc	r1, r23
    19da:	e8 07       	cpc	r30, r24
    19dc:	f9 07       	cpc	r31, r25
    19de:	70 f0       	brcs	.+28     	; 0x19fc <fmax+0x32>
    19e0:	12 16       	cp	r1, r18
    19e2:	13 06       	cpc	r1, r19
    19e4:	e4 07       	cpc	r30, r20
    19e6:	f5 07       	cpc	r31, r21
    19e8:	60 f0       	brcs	.+24     	; 0x1a02 <fmax+0x38>
    19ea:	ba 17       	cp	r27, r26
    19ec:	3c f0       	brlt	.+14     	; 0x19fc <fmax+0x32>
    19ee:	49 f4       	brne	.+18     	; 0x1a02 <fmax+0x38>
    19f0:	62 17       	cp	r22, r18
    19f2:	73 07       	cpc	r23, r19
    19f4:	84 07       	cpc	r24, r20
    19f6:	95 07       	cpc	r25, r21
    19f8:	a7 95       	ror	r26
    19fa:	1b f4       	brvc	.+6      	; 0x1a02 <fmax+0x38>
    19fc:	b9 01       	movw	r22, r18
    19fe:	ca 01       	movw	r24, r20
    1a00:	ba 2f       	mov	r27, r26
    1a02:	b6 95       	lsr	r27
    1a04:	97 95       	ror	r25
    1a06:	08 95       	ret

00001a08 <fmin>:
    1a08:	99 0f       	add	r25, r25
    1a0a:	bb 0b       	sbc	r27, r27
    1a0c:	55 0f       	add	r21, r21
    1a0e:	aa 0b       	sbc	r26, r26
    1a10:	e0 e8       	ldi	r30, 0x80	; 128
    1a12:	fe ef       	ldi	r31, 0xFE	; 254
    1a14:	16 16       	cp	r1, r22
    1a16:	17 06       	cpc	r1, r23
    1a18:	e8 07       	cpc	r30, r24
    1a1a:	f9 07       	cpc	r31, r25
    1a1c:	70 f0       	brcs	.+28     	; 0x1a3a <fmin+0x32>
    1a1e:	12 16       	cp	r1, r18
    1a20:	13 06       	cpc	r1, r19
    1a22:	e4 07       	cpc	r30, r20
    1a24:	f5 07       	cpc	r31, r21
    1a26:	60 f0       	brcs	.+24     	; 0x1a40 <fmin+0x38>
    1a28:	ba 17       	cp	r27, r26
    1a2a:	54 f0       	brlt	.+20     	; 0x1a40 <fmin+0x38>
    1a2c:	31 f4       	brne	.+12     	; 0x1a3a <fmin+0x32>
    1a2e:	26 17       	cp	r18, r22
    1a30:	37 07       	cpc	r19, r23
    1a32:	48 07       	cpc	r20, r24
    1a34:	59 07       	cpc	r21, r25
    1a36:	a7 95       	ror	r26
    1a38:	1b f4       	brvc	.+6      	; 0x1a40 <fmin+0x38>
    1a3a:	b9 01       	movw	r22, r18
    1a3c:	ca 01       	movw	r24, r20
    1a3e:	ba 2f       	mov	r27, r26
    1a40:	b6 95       	lsr	r27
    1a42:	97 95       	ror	r25
    1a44:	08 95       	ret

00001a46 <__fp_inf>:
    1a46:	97 f9       	bld	r25, 7
    1a48:	9f 67       	ori	r25, 0x7F	; 127
    1a4a:	80 e8       	ldi	r24, 0x80	; 128
    1a4c:	70 e0       	ldi	r23, 0x00	; 0
    1a4e:	60 e0       	ldi	r22, 0x00	; 0
    1a50:	08 95       	ret

00001a52 <__fp_nan>:
    1a52:	9f ef       	ldi	r25, 0xFF	; 255
    1a54:	80 ec       	ldi	r24, 0xC0	; 192
    1a56:	08 95       	ret

00001a58 <__fp_powser>:
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	1f 93       	push	r17
    1a5e:	0f 93       	push	r16
    1a60:	ff 92       	push	r15
    1a62:	ef 92       	push	r14
    1a64:	df 92       	push	r13
    1a66:	7b 01       	movw	r14, r22
    1a68:	8c 01       	movw	r16, r24
    1a6a:	68 94       	set
    1a6c:	06 c0       	rjmp	.+12     	; 0x1a7a <__fp_powser+0x22>
    1a6e:	da 2e       	mov	r13, r26
    1a70:	ef 01       	movw	r28, r30
    1a72:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__mulsf3x>
    1a76:	fe 01       	movw	r30, r28
    1a78:	e8 94       	clt
    1a7a:	a5 91       	lpm	r26, Z+
    1a7c:	25 91       	lpm	r18, Z+
    1a7e:	35 91       	lpm	r19, Z+
    1a80:	45 91       	lpm	r20, Z+
    1a82:	55 91       	lpm	r21, Z+
    1a84:	a6 f3       	brts	.-24     	; 0x1a6e <__fp_powser+0x16>
    1a86:	ef 01       	movw	r28, r30
    1a88:	0e 94 34 0b 	call	0x1668	; 0x1668 <__addsf3x>
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	97 01       	movw	r18, r14
    1a90:	a8 01       	movw	r20, r16
    1a92:	da 94       	dec	r13
    1a94:	69 f7       	brne	.-38     	; 0x1a70 <__fp_powser+0x18>
    1a96:	df 90       	pop	r13
    1a98:	ef 90       	pop	r14
    1a9a:	ff 90       	pop	r15
    1a9c:	0f 91       	pop	r16
    1a9e:	1f 91       	pop	r17
    1aa0:	cf 91       	pop	r28
    1aa2:	df 91       	pop	r29
    1aa4:	08 95       	ret

00001aa6 <__fp_pscA>:
    1aa6:	00 24       	eor	r0, r0
    1aa8:	0a 94       	dec	r0
    1aaa:	16 16       	cp	r1, r22
    1aac:	17 06       	cpc	r1, r23
    1aae:	18 06       	cpc	r1, r24
    1ab0:	09 06       	cpc	r0, r25
    1ab2:	08 95       	ret

00001ab4 <__fp_pscB>:
    1ab4:	00 24       	eor	r0, r0
    1ab6:	0a 94       	dec	r0
    1ab8:	12 16       	cp	r1, r18
    1aba:	13 06       	cpc	r1, r19
    1abc:	14 06       	cpc	r1, r20
    1abe:	05 06       	cpc	r0, r21
    1ac0:	08 95       	ret
    1ac2:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>

00001ac6 <__fp_rempio2>:
    1ac6:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__fp_splitA>
    1aca:	d8 f3       	brcs	.-10     	; 0x1ac2 <__fp_pscB+0xe>
    1acc:	e8 94       	clt
    1ace:	e0 e0       	ldi	r30, 0x00	; 0
    1ad0:	bb 27       	eor	r27, r27
    1ad2:	9f 57       	subi	r25, 0x7F	; 127
    1ad4:	f0 f0       	brcs	.+60     	; 0x1b12 <__fp_rempio2+0x4c>
    1ad6:	2a ed       	ldi	r18, 0xDA	; 218
    1ad8:	3f e0       	ldi	r19, 0x0F	; 15
    1ada:	49 ec       	ldi	r20, 0xC9	; 201
    1adc:	06 c0       	rjmp	.+12     	; 0x1aea <__fp_rempio2+0x24>
    1ade:	ee 0f       	add	r30, r30
    1ae0:	bb 0f       	add	r27, r27
    1ae2:	66 1f       	adc	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	88 1f       	adc	r24, r24
    1ae8:	28 f0       	brcs	.+10     	; 0x1af4 <__fp_rempio2+0x2e>
    1aea:	b2 3a       	cpi	r27, 0xA2	; 162
    1aec:	62 07       	cpc	r22, r18
    1aee:	73 07       	cpc	r23, r19
    1af0:	84 07       	cpc	r24, r20
    1af2:	28 f0       	brcs	.+10     	; 0x1afe <__fp_rempio2+0x38>
    1af4:	b2 5a       	subi	r27, 0xA2	; 162
    1af6:	62 0b       	sbc	r22, r18
    1af8:	73 0b       	sbc	r23, r19
    1afa:	84 0b       	sbc	r24, r20
    1afc:	e3 95       	inc	r30
    1afe:	9a 95       	dec	r25
    1b00:	72 f7       	brpl	.-36     	; 0x1ade <__fp_rempio2+0x18>
    1b02:	80 38       	cpi	r24, 0x80	; 128
    1b04:	30 f4       	brcc	.+12     	; 0x1b12 <__fp_rempio2+0x4c>
    1b06:	9a 95       	dec	r25
    1b08:	bb 0f       	add	r27, r27
    1b0a:	66 1f       	adc	r22, r22
    1b0c:	77 1f       	adc	r23, r23
    1b0e:	88 1f       	adc	r24, r24
    1b10:	d2 f7       	brpl	.-12     	; 0x1b06 <__fp_rempio2+0x40>
    1b12:	90 48       	sbci	r25, 0x80	; 128
    1b14:	0c 94 e2 0e 	jmp	0x1dc4	; 0x1dc4 <__fp_mpack_finite>

00001b18 <__fp_round>:
    1b18:	09 2e       	mov	r0, r25
    1b1a:	03 94       	inc	r0
    1b1c:	00 0c       	add	r0, r0
    1b1e:	11 f4       	brne	.+4      	; 0x1b24 <__fp_round+0xc>
    1b20:	88 23       	and	r24, r24
    1b22:	52 f0       	brmi	.+20     	; 0x1b38 <__fp_round+0x20>
    1b24:	bb 0f       	add	r27, r27
    1b26:	40 f4       	brcc	.+16     	; 0x1b38 <__fp_round+0x20>
    1b28:	bf 2b       	or	r27, r31
    1b2a:	11 f4       	brne	.+4      	; 0x1b30 <__fp_round+0x18>
    1b2c:	60 ff       	sbrs	r22, 0
    1b2e:	04 c0       	rjmp	.+8      	; 0x1b38 <__fp_round+0x20>
    1b30:	6f 5f       	subi	r22, 0xFF	; 255
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	08 95       	ret

00001b3a <__fp_sinus>:
    1b3a:	ef 93       	push	r30
    1b3c:	e0 ff       	sbrs	r30, 0
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <__fp_sinus+0x14>
    1b40:	a2 ea       	ldi	r26, 0xA2	; 162
    1b42:	2a ed       	ldi	r18, 0xDA	; 218
    1b44:	3f e0       	ldi	r19, 0x0F	; 15
    1b46:	49 ec       	ldi	r20, 0xC9	; 201
    1b48:	5f eb       	ldi	r21, 0xBF	; 191
    1b4a:	0e 94 34 0b 	call	0x1668	; 0x1668 <__addsf3x>
    1b4e:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <__fp_round>
    1b52:	0f 90       	pop	r0
    1b54:	03 94       	inc	r0
    1b56:	01 fc       	sbrc	r0, 1
    1b58:	90 58       	subi	r25, 0x80	; 128
    1b5a:	e1 e2       	ldi	r30, 0x21	; 33
    1b5c:	f1 e0       	ldi	r31, 0x01	; 1
    1b5e:	0c 94 f5 0e 	jmp	0x1dea	; 0x1dea <__fp_powsodd>

00001b62 <__fp_split3>:
    1b62:	57 fd       	sbrc	r21, 7
    1b64:	90 58       	subi	r25, 0x80	; 128
    1b66:	44 0f       	add	r20, r20
    1b68:	55 1f       	adc	r21, r21
    1b6a:	59 f0       	breq	.+22     	; 0x1b82 <__fp_splitA+0x10>
    1b6c:	5f 3f       	cpi	r21, 0xFF	; 255
    1b6e:	71 f0       	breq	.+28     	; 0x1b8c <__fp_splitA+0x1a>
    1b70:	47 95       	ror	r20

00001b72 <__fp_splitA>:
    1b72:	88 0f       	add	r24, r24
    1b74:	97 fb       	bst	r25, 7
    1b76:	99 1f       	adc	r25, r25
    1b78:	61 f0       	breq	.+24     	; 0x1b92 <__fp_splitA+0x20>
    1b7a:	9f 3f       	cpi	r25, 0xFF	; 255
    1b7c:	79 f0       	breq	.+30     	; 0x1b9c <__fp_splitA+0x2a>
    1b7e:	87 95       	ror	r24
    1b80:	08 95       	ret
    1b82:	12 16       	cp	r1, r18
    1b84:	13 06       	cpc	r1, r19
    1b86:	14 06       	cpc	r1, r20
    1b88:	55 1f       	adc	r21, r21
    1b8a:	f2 cf       	rjmp	.-28     	; 0x1b70 <__fp_split3+0xe>
    1b8c:	46 95       	lsr	r20
    1b8e:	f1 df       	rcall	.-30     	; 0x1b72 <__fp_splitA>
    1b90:	08 c0       	rjmp	.+16     	; 0x1ba2 <__fp_splitA+0x30>
    1b92:	16 16       	cp	r1, r22
    1b94:	17 06       	cpc	r1, r23
    1b96:	18 06       	cpc	r1, r24
    1b98:	99 1f       	adc	r25, r25
    1b9a:	f1 cf       	rjmp	.-30     	; 0x1b7e <__fp_splitA+0xc>
    1b9c:	86 95       	lsr	r24
    1b9e:	71 05       	cpc	r23, r1
    1ba0:	61 05       	cpc	r22, r1
    1ba2:	08 94       	sec
    1ba4:	08 95       	ret

00001ba6 <__fp_zero>:
    1ba6:	e8 94       	clt

00001ba8 <__fp_szero>:
    1ba8:	bb 27       	eor	r27, r27
    1baa:	66 27       	eor	r22, r22
    1bac:	77 27       	eor	r23, r23
    1bae:	cb 01       	movw	r24, r22
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	08 95       	ret

00001bb4 <inverse>:
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	60 e0       	ldi	r22, 0x00	; 0
    1bba:	70 e0       	ldi	r23, 0x00	; 0
    1bbc:	80 e8       	ldi	r24, 0x80	; 128
    1bbe:	9f e3       	ldi	r25, 0x3F	; 63
    1bc0:	0c 94 00 0c 	jmp	0x1800	; 0x1800 <__divsf3>

00001bc4 <__mulsf3>:
    1bc4:	0e 94 f5 0d 	call	0x1bea	; 0x1bea <__mulsf3x>
    1bc8:	0c 94 8c 0d 	jmp	0x1b18	; 0x1b18 <__fp_round>
    1bcc:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <__fp_pscA>
    1bd0:	38 f0       	brcs	.+14     	; 0x1be0 <__mulsf3+0x1c>
    1bd2:	0e 94 5a 0d 	call	0x1ab4	; 0x1ab4 <__fp_pscB>
    1bd6:	20 f0       	brcs	.+8      	; 0x1be0 <__mulsf3+0x1c>
    1bd8:	95 23       	and	r25, r21
    1bda:	11 f0       	breq	.+4      	; 0x1be0 <__mulsf3+0x1c>
    1bdc:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_inf>
    1be0:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>
    1be4:	11 24       	eor	r1, r1
    1be6:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>

00001bea <__mulsf3x>:
    1bea:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <__fp_split3>
    1bee:	70 f3       	brcs	.-36     	; 0x1bcc <__mulsf3+0x8>

00001bf0 <__mulsf3_pse>:
    1bf0:	95 9f       	mul	r25, r21
    1bf2:	c1 f3       	breq	.-16     	; 0x1be4 <__mulsf3+0x20>
    1bf4:	95 0f       	add	r25, r21
    1bf6:	50 e0       	ldi	r21, 0x00	; 0
    1bf8:	55 1f       	adc	r21, r21
    1bfa:	62 9f       	mul	r22, r18
    1bfc:	f0 01       	movw	r30, r0
    1bfe:	72 9f       	mul	r23, r18
    1c00:	bb 27       	eor	r27, r27
    1c02:	f0 0d       	add	r31, r0
    1c04:	b1 1d       	adc	r27, r1
    1c06:	63 9f       	mul	r22, r19
    1c08:	aa 27       	eor	r26, r26
    1c0a:	f0 0d       	add	r31, r0
    1c0c:	b1 1d       	adc	r27, r1
    1c0e:	aa 1f       	adc	r26, r26
    1c10:	64 9f       	mul	r22, r20
    1c12:	66 27       	eor	r22, r22
    1c14:	b0 0d       	add	r27, r0
    1c16:	a1 1d       	adc	r26, r1
    1c18:	66 1f       	adc	r22, r22
    1c1a:	82 9f       	mul	r24, r18
    1c1c:	22 27       	eor	r18, r18
    1c1e:	b0 0d       	add	r27, r0
    1c20:	a1 1d       	adc	r26, r1
    1c22:	62 1f       	adc	r22, r18
    1c24:	73 9f       	mul	r23, r19
    1c26:	b0 0d       	add	r27, r0
    1c28:	a1 1d       	adc	r26, r1
    1c2a:	62 1f       	adc	r22, r18
    1c2c:	83 9f       	mul	r24, r19
    1c2e:	a0 0d       	add	r26, r0
    1c30:	61 1d       	adc	r22, r1
    1c32:	22 1f       	adc	r18, r18
    1c34:	74 9f       	mul	r23, r20
    1c36:	33 27       	eor	r19, r19
    1c38:	a0 0d       	add	r26, r0
    1c3a:	61 1d       	adc	r22, r1
    1c3c:	23 1f       	adc	r18, r19
    1c3e:	84 9f       	mul	r24, r20
    1c40:	60 0d       	add	r22, r0
    1c42:	21 1d       	adc	r18, r1
    1c44:	82 2f       	mov	r24, r18
    1c46:	76 2f       	mov	r23, r22
    1c48:	6a 2f       	mov	r22, r26
    1c4a:	11 24       	eor	r1, r1
    1c4c:	9f 57       	subi	r25, 0x7F	; 127
    1c4e:	50 40       	sbci	r21, 0x00	; 0
    1c50:	9a f0       	brmi	.+38     	; 0x1c78 <__mulsf3_pse+0x88>
    1c52:	f1 f0       	breq	.+60     	; 0x1c90 <__mulsf3_pse+0xa0>
    1c54:	88 23       	and	r24, r24
    1c56:	4a f0       	brmi	.+18     	; 0x1c6a <__mulsf3_pse+0x7a>
    1c58:	ee 0f       	add	r30, r30
    1c5a:	ff 1f       	adc	r31, r31
    1c5c:	bb 1f       	adc	r27, r27
    1c5e:	66 1f       	adc	r22, r22
    1c60:	77 1f       	adc	r23, r23
    1c62:	88 1f       	adc	r24, r24
    1c64:	91 50       	subi	r25, 0x01	; 1
    1c66:	50 40       	sbci	r21, 0x00	; 0
    1c68:	a9 f7       	brne	.-22     	; 0x1c54 <__mulsf3_pse+0x64>
    1c6a:	9e 3f       	cpi	r25, 0xFE	; 254
    1c6c:	51 05       	cpc	r21, r1
    1c6e:	80 f0       	brcs	.+32     	; 0x1c90 <__mulsf3_pse+0xa0>
    1c70:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <__fp_inf>
    1c74:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>
    1c78:	5f 3f       	cpi	r21, 0xFF	; 255
    1c7a:	e4 f3       	brlt	.-8      	; 0x1c74 <__mulsf3_pse+0x84>
    1c7c:	98 3e       	cpi	r25, 0xE8	; 232
    1c7e:	d4 f3       	brlt	.-12     	; 0x1c74 <__mulsf3_pse+0x84>
    1c80:	86 95       	lsr	r24
    1c82:	77 95       	ror	r23
    1c84:	67 95       	ror	r22
    1c86:	b7 95       	ror	r27
    1c88:	f7 95       	ror	r31
    1c8a:	e7 95       	ror	r30
    1c8c:	9f 5f       	subi	r25, 0xFF	; 255
    1c8e:	c1 f7       	brne	.-16     	; 0x1c80 <__mulsf3_pse+0x90>
    1c90:	fe 2b       	or	r31, r30
    1c92:	88 0f       	add	r24, r24
    1c94:	91 1d       	adc	r25, r1
    1c96:	96 95       	lsr	r25
    1c98:	87 95       	ror	r24
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	08 95       	ret

00001c9e <round>:
    1c9e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__fp_splitA>
    1ca2:	e8 f0       	brcs	.+58     	; 0x1cde <round+0x40>
    1ca4:	9e 37       	cpi	r25, 0x7E	; 126
    1ca6:	e8 f0       	brcs	.+58     	; 0x1ce2 <round+0x44>
    1ca8:	96 39       	cpi	r25, 0x96	; 150
    1caa:	b8 f4       	brcc	.+46     	; 0x1cda <round+0x3c>
    1cac:	9e 38       	cpi	r25, 0x8E	; 142
    1cae:	48 f4       	brcc	.+18     	; 0x1cc2 <round+0x24>
    1cb0:	67 2f       	mov	r22, r23
    1cb2:	78 2f       	mov	r23, r24
    1cb4:	88 27       	eor	r24, r24
    1cb6:	98 5f       	subi	r25, 0xF8	; 248
    1cb8:	f9 cf       	rjmp	.-14     	; 0x1cac <round+0xe>
    1cba:	86 95       	lsr	r24
    1cbc:	77 95       	ror	r23
    1cbe:	67 95       	ror	r22
    1cc0:	93 95       	inc	r25
    1cc2:	95 39       	cpi	r25, 0x95	; 149
    1cc4:	d0 f3       	brcs	.-12     	; 0x1cba <round+0x1c>
    1cc6:	b6 2f       	mov	r27, r22
    1cc8:	b1 70       	andi	r27, 0x01	; 1
    1cca:	6b 0f       	add	r22, r27
    1ccc:	71 1d       	adc	r23, r1
    1cce:	81 1d       	adc	r24, r1
    1cd0:	20 f4       	brcc	.+8      	; 0x1cda <round+0x3c>
    1cd2:	87 95       	ror	r24
    1cd4:	77 95       	ror	r23
    1cd6:	67 95       	ror	r22
    1cd8:	93 95       	inc	r25
    1cda:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__fp_mintl>
    1cde:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_mpack>
    1ce2:	0c 94 d4 0d 	jmp	0x1ba8	; 0x1ba8 <__fp_szero>

00001ce6 <sin>:
    1ce6:	9f 93       	push	r25
    1ce8:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__fp_rempio2>
    1cec:	0f 90       	pop	r0
    1cee:	07 fc       	sbrc	r0, 7
    1cf0:	ee 5f       	subi	r30, 0xFE	; 254
    1cf2:	0c 94 9d 0d 	jmp	0x1b3a	; 0x1b3a <__fp_sinus>
    1cf6:	19 f4       	brne	.+6      	; 0x1cfe <sin+0x18>
    1cf8:	16 f4       	brtc	.+4      	; 0x1cfe <sin+0x18>
    1cfa:	0c 94 29 0d 	jmp	0x1a52	; 0x1a52 <__fp_nan>
    1cfe:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <__fp_mpack>

00001d02 <sqrt>:
    1d02:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <__fp_splitA>
    1d06:	b8 f3       	brcs	.-18     	; 0x1cf6 <sin+0x10>
    1d08:	99 23       	and	r25, r25
    1d0a:	c9 f3       	breq	.-14     	; 0x1cfe <sin+0x18>
    1d0c:	b6 f3       	brts	.-20     	; 0x1cfa <sin+0x14>
    1d0e:	9f 57       	subi	r25, 0x7F	; 127
    1d10:	55 0b       	sbc	r21, r21
    1d12:	87 ff       	sbrs	r24, 7
    1d14:	0e 94 ee 0e 	call	0x1ddc	; 0x1ddc <__fp_norm2>
    1d18:	00 24       	eor	r0, r0
    1d1a:	a0 e6       	ldi	r26, 0x60	; 96
    1d1c:	40 ea       	ldi	r20, 0xA0	; 160
    1d1e:	90 01       	movw	r18, r0
    1d20:	80 58       	subi	r24, 0x80	; 128
    1d22:	56 95       	lsr	r21
    1d24:	97 95       	ror	r25
    1d26:	28 f4       	brcc	.+10     	; 0x1d32 <sqrt+0x30>
    1d28:	80 5c       	subi	r24, 0xC0	; 192
    1d2a:	66 0f       	add	r22, r22
    1d2c:	77 1f       	adc	r23, r23
    1d2e:	88 1f       	adc	r24, r24
    1d30:	20 f0       	brcs	.+8      	; 0x1d3a <sqrt+0x38>
    1d32:	26 17       	cp	r18, r22
    1d34:	37 07       	cpc	r19, r23
    1d36:	48 07       	cpc	r20, r24
    1d38:	30 f4       	brcc	.+12     	; 0x1d46 <sqrt+0x44>
    1d3a:	62 1b       	sub	r22, r18
    1d3c:	73 0b       	sbc	r23, r19
    1d3e:	84 0b       	sbc	r24, r20
    1d40:	20 29       	or	r18, r0
    1d42:	31 29       	or	r19, r1
    1d44:	4a 2b       	or	r20, r26
    1d46:	a6 95       	lsr	r26
    1d48:	17 94       	ror	r1
    1d4a:	07 94       	ror	r0
    1d4c:	20 25       	eor	r18, r0
    1d4e:	31 25       	eor	r19, r1
    1d50:	4a 27       	eor	r20, r26
    1d52:	58 f7       	brcc	.-42     	; 0x1d2a <sqrt+0x28>
    1d54:	66 0f       	add	r22, r22
    1d56:	77 1f       	adc	r23, r23
    1d58:	88 1f       	adc	r24, r24
    1d5a:	20 f0       	brcs	.+8      	; 0x1d64 <sqrt+0x62>
    1d5c:	26 17       	cp	r18, r22
    1d5e:	37 07       	cpc	r19, r23
    1d60:	48 07       	cpc	r20, r24
    1d62:	30 f4       	brcc	.+12     	; 0x1d70 <sqrt+0x6e>
    1d64:	62 0b       	sbc	r22, r18
    1d66:	73 0b       	sbc	r23, r19
    1d68:	84 0b       	sbc	r24, r20
    1d6a:	20 0d       	add	r18, r0
    1d6c:	31 1d       	adc	r19, r1
    1d6e:	41 1d       	adc	r20, r1
    1d70:	a0 95       	com	r26
    1d72:	81 f7       	brne	.-32     	; 0x1d54 <sqrt+0x52>
    1d74:	b9 01       	movw	r22, r18
    1d76:	84 2f       	mov	r24, r20
    1d78:	91 58       	subi	r25, 0x81	; 129
    1d7a:	88 0f       	add	r24, r24
    1d7c:	96 95       	lsr	r25
    1d7e:	87 95       	ror	r24
    1d80:	08 95       	ret

00001d82 <square>:
    1d82:	9b 01       	movw	r18, r22
    1d84:	ac 01       	movw	r20, r24
    1d86:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__mulsf3>

00001d8a <__fp_mintl>:
    1d8a:	88 23       	and	r24, r24
    1d8c:	71 f4       	brne	.+28     	; 0x1daa <__fp_mintl+0x20>
    1d8e:	77 23       	and	r23, r23
    1d90:	21 f0       	breq	.+8      	; 0x1d9a <__fp_mintl+0x10>
    1d92:	98 50       	subi	r25, 0x08	; 8
    1d94:	87 2b       	or	r24, r23
    1d96:	76 2f       	mov	r23, r22
    1d98:	07 c0       	rjmp	.+14     	; 0x1da8 <__fp_mintl+0x1e>
    1d9a:	66 23       	and	r22, r22
    1d9c:	11 f4       	brne	.+4      	; 0x1da2 <__fp_mintl+0x18>
    1d9e:	99 27       	eor	r25, r25
    1da0:	0d c0       	rjmp	.+26     	; 0x1dbc <__fp_mintl+0x32>
    1da2:	90 51       	subi	r25, 0x10	; 16
    1da4:	86 2b       	or	r24, r22
    1da6:	70 e0       	ldi	r23, 0x00	; 0
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	2a f0       	brmi	.+10     	; 0x1db6 <__fp_mintl+0x2c>
    1dac:	9a 95       	dec	r25
    1dae:	66 0f       	add	r22, r22
    1db0:	77 1f       	adc	r23, r23
    1db2:	88 1f       	adc	r24, r24
    1db4:	da f7       	brpl	.-10     	; 0x1dac <__fp_mintl+0x22>
    1db6:	88 0f       	add	r24, r24
    1db8:	96 95       	lsr	r25
    1dba:	87 95       	ror	r24
    1dbc:	97 f9       	bld	r25, 7
    1dbe:	08 95       	ret

00001dc0 <__fp_mpack>:
    1dc0:	9f 3f       	cpi	r25, 0xFF	; 255
    1dc2:	31 f0       	breq	.+12     	; 0x1dd0 <__fp_mpack_finite+0xc>

00001dc4 <__fp_mpack_finite>:
    1dc4:	91 50       	subi	r25, 0x01	; 1
    1dc6:	20 f4       	brcc	.+8      	; 0x1dd0 <__fp_mpack_finite+0xc>
    1dc8:	87 95       	ror	r24
    1dca:	77 95       	ror	r23
    1dcc:	67 95       	ror	r22
    1dce:	b7 95       	ror	r27
    1dd0:	88 0f       	add	r24, r24
    1dd2:	91 1d       	adc	r25, r1
    1dd4:	96 95       	lsr	r25
    1dd6:	87 95       	ror	r24
    1dd8:	97 f9       	bld	r25, 7
    1dda:	08 95       	ret

00001ddc <__fp_norm2>:
    1ddc:	91 50       	subi	r25, 0x01	; 1
    1dde:	50 40       	sbci	r21, 0x00	; 0
    1de0:	66 0f       	add	r22, r22
    1de2:	77 1f       	adc	r23, r23
    1de4:	88 1f       	adc	r24, r24
    1de6:	d2 f7       	brpl	.-12     	; 0x1ddc <__fp_norm2>
    1de8:	08 95       	ret

00001dea <__fp_powsodd>:
    1dea:	9f 93       	push	r25
    1dec:	8f 93       	push	r24
    1dee:	7f 93       	push	r23
    1df0:	6f 93       	push	r22
    1df2:	ff 93       	push	r31
    1df4:	ef 93       	push	r30
    1df6:	9b 01       	movw	r18, r22
    1df8:	ac 01       	movw	r20, r24
    1dfa:	0e 94 e2 0d 	call	0x1bc4	; 0x1bc4 <__mulsf3>
    1dfe:	ef 91       	pop	r30
    1e00:	ff 91       	pop	r31
    1e02:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__fp_powser>
    1e06:	2f 91       	pop	r18
    1e08:	3f 91       	pop	r19
    1e0a:	4f 91       	pop	r20
    1e0c:	5f 91       	pop	r21
    1e0e:	0c 94 e2 0d 	jmp	0x1bc4	; 0x1bc4 <__mulsf3>

00001e12 <__udivmodhi4>:
    1e12:	aa 1b       	sub	r26, r26
    1e14:	bb 1b       	sub	r27, r27
    1e16:	51 e1       	ldi	r21, 0x11	; 17
    1e18:	07 c0       	rjmp	.+14     	; 0x1e28 <__udivmodhi4_ep>

00001e1a <__udivmodhi4_loop>:
    1e1a:	aa 1f       	adc	r26, r26
    1e1c:	bb 1f       	adc	r27, r27
    1e1e:	a6 17       	cp	r26, r22
    1e20:	b7 07       	cpc	r27, r23
    1e22:	10 f0       	brcs	.+4      	; 0x1e28 <__udivmodhi4_ep>
    1e24:	a6 1b       	sub	r26, r22
    1e26:	b7 0b       	sbc	r27, r23

00001e28 <__udivmodhi4_ep>:
    1e28:	88 1f       	adc	r24, r24
    1e2a:	99 1f       	adc	r25, r25
    1e2c:	5a 95       	dec	r21
    1e2e:	a9 f7       	brne	.-22     	; 0x1e1a <__udivmodhi4_loop>
    1e30:	80 95       	com	r24
    1e32:	90 95       	com	r25
    1e34:	bc 01       	movw	r22, r24
    1e36:	cd 01       	movw	r24, r26
    1e38:	08 95       	ret

00001e3a <__udivmodsi4>:
    1e3a:	a1 e2       	ldi	r26, 0x21	; 33
    1e3c:	1a 2e       	mov	r1, r26
    1e3e:	aa 1b       	sub	r26, r26
    1e40:	bb 1b       	sub	r27, r27
    1e42:	fd 01       	movw	r30, r26
    1e44:	0d c0       	rjmp	.+26     	; 0x1e60 <__udivmodsi4_ep>

00001e46 <__udivmodsi4_loop>:
    1e46:	aa 1f       	adc	r26, r26
    1e48:	bb 1f       	adc	r27, r27
    1e4a:	ee 1f       	adc	r30, r30
    1e4c:	ff 1f       	adc	r31, r31
    1e4e:	a2 17       	cp	r26, r18
    1e50:	b3 07       	cpc	r27, r19
    1e52:	e4 07       	cpc	r30, r20
    1e54:	f5 07       	cpc	r31, r21
    1e56:	20 f0       	brcs	.+8      	; 0x1e60 <__udivmodsi4_ep>
    1e58:	a2 1b       	sub	r26, r18
    1e5a:	b3 0b       	sbc	r27, r19
    1e5c:	e4 0b       	sbc	r30, r20
    1e5e:	f5 0b       	sbc	r31, r21

00001e60 <__udivmodsi4_ep>:
    1e60:	66 1f       	adc	r22, r22
    1e62:	77 1f       	adc	r23, r23
    1e64:	88 1f       	adc	r24, r24
    1e66:	99 1f       	adc	r25, r25
    1e68:	1a 94       	dec	r1
    1e6a:	69 f7       	brne	.-38     	; 0x1e46 <__udivmodsi4_loop>
    1e6c:	60 95       	com	r22
    1e6e:	70 95       	com	r23
    1e70:	80 95       	com	r24
    1e72:	90 95       	com	r25
    1e74:	9b 01       	movw	r18, r22
    1e76:	ac 01       	movw	r20, r24
    1e78:	bd 01       	movw	r22, r26
    1e7a:	cf 01       	movw	r24, r30
    1e7c:	08 95       	ret

00001e7e <dtostrf>:
    1e7e:	ef 92       	push	r14
    1e80:	0f 93       	push	r16
    1e82:	1f 93       	push	r17
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	e8 01       	movw	r28, r16
    1e8a:	47 fd       	sbrc	r20, 7
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <dtostrf+0x14>
    1e8e:	34 e0       	ldi	r19, 0x04	; 4
    1e90:	01 c0       	rjmp	.+2      	; 0x1e94 <dtostrf+0x16>
    1e92:	34 e1       	ldi	r19, 0x14	; 20
    1e94:	04 2e       	mov	r0, r20
    1e96:	00 0c       	add	r0, r0
    1e98:	55 0b       	sbc	r21, r21
    1e9a:	57 ff       	sbrs	r21, 7
    1e9c:	03 c0       	rjmp	.+6      	; 0x1ea4 <dtostrf+0x26>
    1e9e:	51 95       	neg	r21
    1ea0:	41 95       	neg	r20
    1ea2:	51 09       	sbc	r21, r1
    1ea4:	e3 2e       	mov	r14, r19
    1ea6:	02 2f       	mov	r16, r18
    1ea8:	24 2f       	mov	r18, r20
    1eaa:	ae 01       	movw	r20, r28
    1eac:	0e 94 ef 11 	call	0x23de	; 0x23de <dtoa_prf>
    1eb0:	ce 01       	movw	r24, r28
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ef 90       	pop	r14
    1ebc:	08 95       	ret

00001ebe <fwrite>:
    1ebe:	8f 92       	push	r8
    1ec0:	9f 92       	push	r9
    1ec2:	af 92       	push	r10
    1ec4:	bf 92       	push	r11
    1ec6:	cf 92       	push	r12
    1ec8:	df 92       	push	r13
    1eca:	ef 92       	push	r14
    1ecc:	ff 92       	push	r15
    1ece:	0f 93       	push	r16
    1ed0:	1f 93       	push	r17
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	5b 01       	movw	r10, r22
    1ed8:	4a 01       	movw	r8, r20
    1eda:	79 01       	movw	r14, r18
    1edc:	d9 01       	movw	r26, r18
    1ede:	13 96       	adiw	r26, 0x03	; 3
    1ee0:	2c 91       	ld	r18, X
    1ee2:	21 ff       	sbrs	r18, 1
    1ee4:	1d c0       	rjmp	.+58     	; 0x1f20 <fwrite+0x62>
    1ee6:	c0 e0       	ldi	r28, 0x00	; 0
    1ee8:	d0 e0       	ldi	r29, 0x00	; 0
    1eea:	c8 15       	cp	r28, r8
    1eec:	d9 05       	cpc	r29, r9
    1eee:	d9 f0       	breq	.+54     	; 0x1f26 <fwrite+0x68>
    1ef0:	8c 01       	movw	r16, r24
    1ef2:	6c 01       	movw	r12, r24
    1ef4:	ca 0c       	add	r12, r10
    1ef6:	db 1c       	adc	r13, r11
    1ef8:	c8 01       	movw	r24, r16
    1efa:	0c 15       	cp	r16, r12
    1efc:	1d 05       	cpc	r17, r13
    1efe:	71 f0       	breq	.+28     	; 0x1f1c <fwrite+0x5e>
    1f00:	0f 5f       	subi	r16, 0xFF	; 255
    1f02:	1f 4f       	sbci	r17, 0xFF	; 255
    1f04:	d7 01       	movw	r26, r14
    1f06:	18 96       	adiw	r26, 0x08	; 8
    1f08:	ed 91       	ld	r30, X+
    1f0a:	fc 91       	ld	r31, X
    1f0c:	19 97       	sbiw	r26, 0x09	; 9
    1f0e:	b7 01       	movw	r22, r14
    1f10:	dc 01       	movw	r26, r24
    1f12:	8c 91       	ld	r24, X
    1f14:	09 95       	icall
    1f16:	89 2b       	or	r24, r25
    1f18:	79 f3       	breq	.-34     	; 0x1ef8 <fwrite+0x3a>
    1f1a:	05 c0       	rjmp	.+10     	; 0x1f26 <fwrite+0x68>
    1f1c:	21 96       	adiw	r28, 0x01	; 1
    1f1e:	e5 cf       	rjmp	.-54     	; 0x1eea <fwrite+0x2c>
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	90 e0       	ldi	r25, 0x00	; 0
    1f24:	01 c0       	rjmp	.+2      	; 0x1f28 <fwrite+0x6a>
    1f26:	ce 01       	movw	r24, r28
    1f28:	df 91       	pop	r29
    1f2a:	cf 91       	pop	r28
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	df 90       	pop	r13
    1f36:	cf 90       	pop	r12
    1f38:	bf 90       	pop	r11
    1f3a:	af 90       	pop	r10
    1f3c:	9f 90       	pop	r9
    1f3e:	8f 90       	pop	r8
    1f40:	08 95       	ret

00001f42 <printf>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	ae 01       	movw	r20, r28
    1f4c:	4b 5f       	subi	r20, 0xFB	; 251
    1f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f50:	fa 01       	movw	r30, r20
    1f52:	61 91       	ld	r22, Z+
    1f54:	71 91       	ld	r23, Z+
    1f56:	af 01       	movw	r20, r30
    1f58:	80 91 fb 43 	lds	r24, 0x43FB	; 0x8043fb <__iob+0x2>
    1f5c:	90 91 fc 43 	lds	r25, 0x43FC	; 0x8043fc <__iob+0x3>
    1f60:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <vfprintf>
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <putchar>:
    1f6a:	60 91 fb 43 	lds	r22, 0x43FB	; 0x8043fb <__iob+0x2>
    1f6e:	70 91 fc 43 	lds	r23, 0x43FC	; 0x8043fc <__iob+0x3>
    1f72:	0c 94 4e 14 	jmp	0x289c	; 0x289c <fputc>

00001f76 <puts>:
    1f76:	0f 93       	push	r16
    1f78:	1f 93       	push	r17
    1f7a:	cf 93       	push	r28
    1f7c:	df 93       	push	r29
    1f7e:	e0 91 fb 43 	lds	r30, 0x43FB	; 0x8043fb <__iob+0x2>
    1f82:	f0 91 fc 43 	lds	r31, 0x43FC	; 0x8043fc <__iob+0x3>
    1f86:	23 81       	ldd	r18, Z+3	; 0x03
    1f88:	21 ff       	sbrs	r18, 1
    1f8a:	1b c0       	rjmp	.+54     	; 0x1fc2 <puts+0x4c>
    1f8c:	8c 01       	movw	r16, r24
    1f8e:	d0 e0       	ldi	r29, 0x00	; 0
    1f90:	c0 e0       	ldi	r28, 0x00	; 0
    1f92:	f8 01       	movw	r30, r16
    1f94:	81 91       	ld	r24, Z+
    1f96:	8f 01       	movw	r16, r30
    1f98:	60 91 fb 43 	lds	r22, 0x43FB	; 0x8043fb <__iob+0x2>
    1f9c:	70 91 fc 43 	lds	r23, 0x43FC	; 0x8043fc <__iob+0x3>
    1fa0:	db 01       	movw	r26, r22
    1fa2:	18 96       	adiw	r26, 0x08	; 8
    1fa4:	ed 91       	ld	r30, X+
    1fa6:	fc 91       	ld	r31, X
    1fa8:	19 97       	sbiw	r26, 0x09	; 9
    1faa:	88 23       	and	r24, r24
    1fac:	31 f0       	breq	.+12     	; 0x1fba <puts+0x44>
    1fae:	09 95       	icall
    1fb0:	89 2b       	or	r24, r25
    1fb2:	79 f3       	breq	.-34     	; 0x1f92 <puts+0x1c>
    1fb4:	df ef       	ldi	r29, 0xFF	; 255
    1fb6:	cf ef       	ldi	r28, 0xFF	; 255
    1fb8:	ec cf       	rjmp	.-40     	; 0x1f92 <puts+0x1c>
    1fba:	8a e0       	ldi	r24, 0x0A	; 10
    1fbc:	09 95       	icall
    1fbe:	89 2b       	or	r24, r25
    1fc0:	19 f0       	breq	.+6      	; 0x1fc8 <puts+0x52>
    1fc2:	8f ef       	ldi	r24, 0xFF	; 255
    1fc4:	9f ef       	ldi	r25, 0xFF	; 255
    1fc6:	02 c0       	rjmp	.+4      	; 0x1fcc <puts+0x56>
    1fc8:	8d 2f       	mov	r24, r29
    1fca:	9c 2f       	mov	r25, r28
    1fcc:	df 91       	pop	r29
    1fce:	cf 91       	pop	r28
    1fd0:	1f 91       	pop	r17
    1fd2:	0f 91       	pop	r16
    1fd4:	08 95       	ret

00001fd6 <vfprintf>:
    1fd6:	2f 92       	push	r2
    1fd8:	3f 92       	push	r3
    1fda:	4f 92       	push	r4
    1fdc:	5f 92       	push	r5
    1fde:	6f 92       	push	r6
    1fe0:	7f 92       	push	r7
    1fe2:	8f 92       	push	r8
    1fe4:	9f 92       	push	r9
    1fe6:	af 92       	push	r10
    1fe8:	bf 92       	push	r11
    1fea:	cf 92       	push	r12
    1fec:	df 92       	push	r13
    1fee:	ef 92       	push	r14
    1ff0:	ff 92       	push	r15
    1ff2:	0f 93       	push	r16
    1ff4:	1f 93       	push	r17
    1ff6:	cf 93       	push	r28
    1ff8:	df 93       	push	r29
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    1ffe:	2b 97       	sbiw	r28, 0x0b	; 11
    2000:	cd bf       	out	0x3d, r28	; 61
    2002:	de bf       	out	0x3e, r29	; 62
    2004:	6c 01       	movw	r12, r24
    2006:	7b 01       	movw	r14, r22
    2008:	8a 01       	movw	r16, r20
    200a:	fc 01       	movw	r30, r24
    200c:	16 82       	std	Z+6, r1	; 0x06
    200e:	17 82       	std	Z+7, r1	; 0x07
    2010:	83 81       	ldd	r24, Z+3	; 0x03
    2012:	81 ff       	sbrs	r24, 1
    2014:	cc c1       	rjmp	.+920    	; 0x23ae <vfprintf+0x3d8>
    2016:	ce 01       	movw	r24, r28
    2018:	01 96       	adiw	r24, 0x01	; 1
    201a:	3c 01       	movw	r6, r24
    201c:	f6 01       	movw	r30, r12
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	f7 01       	movw	r30, r14
    2022:	93 fd       	sbrc	r25, 3
    2024:	85 91       	lpm	r24, Z+
    2026:	93 ff       	sbrs	r25, 3
    2028:	81 91       	ld	r24, Z+
    202a:	7f 01       	movw	r14, r30
    202c:	88 23       	and	r24, r24
    202e:	09 f4       	brne	.+2      	; 0x2032 <vfprintf+0x5c>
    2030:	ba c1       	rjmp	.+884    	; 0x23a6 <vfprintf+0x3d0>
    2032:	85 32       	cpi	r24, 0x25	; 37
    2034:	39 f4       	brne	.+14     	; 0x2044 <vfprintf+0x6e>
    2036:	93 fd       	sbrc	r25, 3
    2038:	85 91       	lpm	r24, Z+
    203a:	93 ff       	sbrs	r25, 3
    203c:	81 91       	ld	r24, Z+
    203e:	7f 01       	movw	r14, r30
    2040:	85 32       	cpi	r24, 0x25	; 37
    2042:	29 f4       	brne	.+10     	; 0x204e <vfprintf+0x78>
    2044:	b6 01       	movw	r22, r12
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    204c:	e7 cf       	rjmp	.-50     	; 0x201c <vfprintf+0x46>
    204e:	91 2c       	mov	r9, r1
    2050:	21 2c       	mov	r2, r1
    2052:	31 2c       	mov	r3, r1
    2054:	ff e1       	ldi	r31, 0x1F	; 31
    2056:	f3 15       	cp	r31, r3
    2058:	d8 f0       	brcs	.+54     	; 0x2090 <vfprintf+0xba>
    205a:	8b 32       	cpi	r24, 0x2B	; 43
    205c:	79 f0       	breq	.+30     	; 0x207c <vfprintf+0xa6>
    205e:	38 f4       	brcc	.+14     	; 0x206e <vfprintf+0x98>
    2060:	80 32       	cpi	r24, 0x20	; 32
    2062:	79 f0       	breq	.+30     	; 0x2082 <vfprintf+0xac>
    2064:	83 32       	cpi	r24, 0x23	; 35
    2066:	a1 f4       	brne	.+40     	; 0x2090 <vfprintf+0xba>
    2068:	23 2d       	mov	r18, r3
    206a:	20 61       	ori	r18, 0x10	; 16
    206c:	1d c0       	rjmp	.+58     	; 0x20a8 <vfprintf+0xd2>
    206e:	8d 32       	cpi	r24, 0x2D	; 45
    2070:	61 f0       	breq	.+24     	; 0x208a <vfprintf+0xb4>
    2072:	80 33       	cpi	r24, 0x30	; 48
    2074:	69 f4       	brne	.+26     	; 0x2090 <vfprintf+0xba>
    2076:	23 2d       	mov	r18, r3
    2078:	21 60       	ori	r18, 0x01	; 1
    207a:	16 c0       	rjmp	.+44     	; 0x20a8 <vfprintf+0xd2>
    207c:	83 2d       	mov	r24, r3
    207e:	82 60       	ori	r24, 0x02	; 2
    2080:	38 2e       	mov	r3, r24
    2082:	e3 2d       	mov	r30, r3
    2084:	e4 60       	ori	r30, 0x04	; 4
    2086:	3e 2e       	mov	r3, r30
    2088:	2a c0       	rjmp	.+84     	; 0x20de <vfprintf+0x108>
    208a:	f3 2d       	mov	r31, r3
    208c:	f8 60       	ori	r31, 0x08	; 8
    208e:	1d c0       	rjmp	.+58     	; 0x20ca <vfprintf+0xf4>
    2090:	37 fc       	sbrc	r3, 7
    2092:	2d c0       	rjmp	.+90     	; 0x20ee <vfprintf+0x118>
    2094:	20 ed       	ldi	r18, 0xD0	; 208
    2096:	28 0f       	add	r18, r24
    2098:	2a 30       	cpi	r18, 0x0A	; 10
    209a:	40 f0       	brcs	.+16     	; 0x20ac <vfprintf+0xd6>
    209c:	8e 32       	cpi	r24, 0x2E	; 46
    209e:	b9 f4       	brne	.+46     	; 0x20ce <vfprintf+0xf8>
    20a0:	36 fc       	sbrc	r3, 6
    20a2:	81 c1       	rjmp	.+770    	; 0x23a6 <vfprintf+0x3d0>
    20a4:	23 2d       	mov	r18, r3
    20a6:	20 64       	ori	r18, 0x40	; 64
    20a8:	32 2e       	mov	r3, r18
    20aa:	19 c0       	rjmp	.+50     	; 0x20de <vfprintf+0x108>
    20ac:	36 fe       	sbrs	r3, 6
    20ae:	06 c0       	rjmp	.+12     	; 0x20bc <vfprintf+0xe6>
    20b0:	8a e0       	ldi	r24, 0x0A	; 10
    20b2:	98 9e       	mul	r9, r24
    20b4:	20 0d       	add	r18, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	92 2e       	mov	r9, r18
    20ba:	11 c0       	rjmp	.+34     	; 0x20de <vfprintf+0x108>
    20bc:	ea e0       	ldi	r30, 0x0A	; 10
    20be:	2e 9e       	mul	r2, r30
    20c0:	20 0d       	add	r18, r0
    20c2:	11 24       	eor	r1, r1
    20c4:	22 2e       	mov	r2, r18
    20c6:	f3 2d       	mov	r31, r3
    20c8:	f0 62       	ori	r31, 0x20	; 32
    20ca:	3f 2e       	mov	r3, r31
    20cc:	08 c0       	rjmp	.+16     	; 0x20de <vfprintf+0x108>
    20ce:	8c 36       	cpi	r24, 0x6C	; 108
    20d0:	21 f4       	brne	.+8      	; 0x20da <vfprintf+0x104>
    20d2:	83 2d       	mov	r24, r3
    20d4:	80 68       	ori	r24, 0x80	; 128
    20d6:	38 2e       	mov	r3, r24
    20d8:	02 c0       	rjmp	.+4      	; 0x20de <vfprintf+0x108>
    20da:	88 36       	cpi	r24, 0x68	; 104
    20dc:	41 f4       	brne	.+16     	; 0x20ee <vfprintf+0x118>
    20de:	f7 01       	movw	r30, r14
    20e0:	93 fd       	sbrc	r25, 3
    20e2:	85 91       	lpm	r24, Z+
    20e4:	93 ff       	sbrs	r25, 3
    20e6:	81 91       	ld	r24, Z+
    20e8:	7f 01       	movw	r14, r30
    20ea:	81 11       	cpse	r24, r1
    20ec:	b3 cf       	rjmp	.-154    	; 0x2054 <vfprintf+0x7e>
    20ee:	98 2f       	mov	r25, r24
    20f0:	9f 7d       	andi	r25, 0xDF	; 223
    20f2:	95 54       	subi	r25, 0x45	; 69
    20f4:	93 30       	cpi	r25, 0x03	; 3
    20f6:	28 f4       	brcc	.+10     	; 0x2102 <vfprintf+0x12c>
    20f8:	0c 5f       	subi	r16, 0xFC	; 252
    20fa:	1f 4f       	sbci	r17, 0xFF	; 255
    20fc:	9f e3       	ldi	r25, 0x3F	; 63
    20fe:	99 83       	std	Y+1, r25	; 0x01
    2100:	0d c0       	rjmp	.+26     	; 0x211c <vfprintf+0x146>
    2102:	83 36       	cpi	r24, 0x63	; 99
    2104:	31 f0       	breq	.+12     	; 0x2112 <vfprintf+0x13c>
    2106:	83 37       	cpi	r24, 0x73	; 115
    2108:	71 f0       	breq	.+28     	; 0x2126 <vfprintf+0x150>
    210a:	83 35       	cpi	r24, 0x53	; 83
    210c:	09 f0       	breq	.+2      	; 0x2110 <vfprintf+0x13a>
    210e:	59 c0       	rjmp	.+178    	; 0x21c2 <vfprintf+0x1ec>
    2110:	21 c0       	rjmp	.+66     	; 0x2154 <vfprintf+0x17e>
    2112:	f8 01       	movw	r30, r16
    2114:	80 81       	ld	r24, Z
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	0e 5f       	subi	r16, 0xFE	; 254
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
    211c:	88 24       	eor	r8, r8
    211e:	83 94       	inc	r8
    2120:	91 2c       	mov	r9, r1
    2122:	53 01       	movw	r10, r6
    2124:	13 c0       	rjmp	.+38     	; 0x214c <vfprintf+0x176>
    2126:	28 01       	movw	r4, r16
    2128:	f2 e0       	ldi	r31, 0x02	; 2
    212a:	4f 0e       	add	r4, r31
    212c:	51 1c       	adc	r5, r1
    212e:	f8 01       	movw	r30, r16
    2130:	a0 80       	ld	r10, Z
    2132:	b1 80       	ldd	r11, Z+1	; 0x01
    2134:	36 fe       	sbrs	r3, 6
    2136:	03 c0       	rjmp	.+6      	; 0x213e <vfprintf+0x168>
    2138:	69 2d       	mov	r22, r9
    213a:	70 e0       	ldi	r23, 0x00	; 0
    213c:	02 c0       	rjmp	.+4      	; 0x2142 <vfprintf+0x16c>
    213e:	6f ef       	ldi	r22, 0xFF	; 255
    2140:	7f ef       	ldi	r23, 0xFF	; 255
    2142:	c5 01       	movw	r24, r10
    2144:	0e 94 43 14 	call	0x2886	; 0x2886 <strnlen>
    2148:	4c 01       	movw	r8, r24
    214a:	82 01       	movw	r16, r4
    214c:	f3 2d       	mov	r31, r3
    214e:	ff 77       	andi	r31, 0x7F	; 127
    2150:	3f 2e       	mov	r3, r31
    2152:	16 c0       	rjmp	.+44     	; 0x2180 <vfprintf+0x1aa>
    2154:	28 01       	movw	r4, r16
    2156:	22 e0       	ldi	r18, 0x02	; 2
    2158:	42 0e       	add	r4, r18
    215a:	51 1c       	adc	r5, r1
    215c:	f8 01       	movw	r30, r16
    215e:	a0 80       	ld	r10, Z
    2160:	b1 80       	ldd	r11, Z+1	; 0x01
    2162:	36 fe       	sbrs	r3, 6
    2164:	03 c0       	rjmp	.+6      	; 0x216c <vfprintf+0x196>
    2166:	69 2d       	mov	r22, r9
    2168:	70 e0       	ldi	r23, 0x00	; 0
    216a:	02 c0       	rjmp	.+4      	; 0x2170 <vfprintf+0x19a>
    216c:	6f ef       	ldi	r22, 0xFF	; 255
    216e:	7f ef       	ldi	r23, 0xFF	; 255
    2170:	c5 01       	movw	r24, r10
    2172:	0e 94 38 14 	call	0x2870	; 0x2870 <strnlen_P>
    2176:	4c 01       	movw	r8, r24
    2178:	f3 2d       	mov	r31, r3
    217a:	f0 68       	ori	r31, 0x80	; 128
    217c:	3f 2e       	mov	r3, r31
    217e:	82 01       	movw	r16, r4
    2180:	33 fc       	sbrc	r3, 3
    2182:	1b c0       	rjmp	.+54     	; 0x21ba <vfprintf+0x1e4>
    2184:	82 2d       	mov	r24, r2
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	88 16       	cp	r8, r24
    218a:	99 06       	cpc	r9, r25
    218c:	b0 f4       	brcc	.+44     	; 0x21ba <vfprintf+0x1e4>
    218e:	b6 01       	movw	r22, r12
    2190:	80 e2       	ldi	r24, 0x20	; 32
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    2198:	2a 94       	dec	r2
    219a:	f4 cf       	rjmp	.-24     	; 0x2184 <vfprintf+0x1ae>
    219c:	f5 01       	movw	r30, r10
    219e:	37 fc       	sbrc	r3, 7
    21a0:	85 91       	lpm	r24, Z+
    21a2:	37 fe       	sbrs	r3, 7
    21a4:	81 91       	ld	r24, Z+
    21a6:	5f 01       	movw	r10, r30
    21a8:	b6 01       	movw	r22, r12
    21aa:	90 e0       	ldi	r25, 0x00	; 0
    21ac:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    21b0:	21 10       	cpse	r2, r1
    21b2:	2a 94       	dec	r2
    21b4:	21 e0       	ldi	r18, 0x01	; 1
    21b6:	82 1a       	sub	r8, r18
    21b8:	91 08       	sbc	r9, r1
    21ba:	81 14       	cp	r8, r1
    21bc:	91 04       	cpc	r9, r1
    21be:	71 f7       	brne	.-36     	; 0x219c <vfprintf+0x1c6>
    21c0:	e8 c0       	rjmp	.+464    	; 0x2392 <vfprintf+0x3bc>
    21c2:	84 36       	cpi	r24, 0x64	; 100
    21c4:	11 f0       	breq	.+4      	; 0x21ca <vfprintf+0x1f4>
    21c6:	89 36       	cpi	r24, 0x69	; 105
    21c8:	41 f5       	brne	.+80     	; 0x221a <vfprintf+0x244>
    21ca:	f8 01       	movw	r30, r16
    21cc:	37 fe       	sbrs	r3, 7
    21ce:	07 c0       	rjmp	.+14     	; 0x21de <vfprintf+0x208>
    21d0:	60 81       	ld	r22, Z
    21d2:	71 81       	ldd	r23, Z+1	; 0x01
    21d4:	82 81       	ldd	r24, Z+2	; 0x02
    21d6:	93 81       	ldd	r25, Z+3	; 0x03
    21d8:	0c 5f       	subi	r16, 0xFC	; 252
    21da:	1f 4f       	sbci	r17, 0xFF	; 255
    21dc:	08 c0       	rjmp	.+16     	; 0x21ee <vfprintf+0x218>
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	07 2e       	mov	r0, r23
    21e4:	00 0c       	add	r0, r0
    21e6:	88 0b       	sbc	r24, r24
    21e8:	99 0b       	sbc	r25, r25
    21ea:	0e 5f       	subi	r16, 0xFE	; 254
    21ec:	1f 4f       	sbci	r17, 0xFF	; 255
    21ee:	f3 2d       	mov	r31, r3
    21f0:	ff 76       	andi	r31, 0x6F	; 111
    21f2:	3f 2e       	mov	r3, r31
    21f4:	97 ff       	sbrs	r25, 7
    21f6:	09 c0       	rjmp	.+18     	; 0x220a <vfprintf+0x234>
    21f8:	90 95       	com	r25
    21fa:	80 95       	com	r24
    21fc:	70 95       	com	r23
    21fe:	61 95       	neg	r22
    2200:	7f 4f       	sbci	r23, 0xFF	; 255
    2202:	8f 4f       	sbci	r24, 0xFF	; 255
    2204:	9f 4f       	sbci	r25, 0xFF	; 255
    2206:	f0 68       	ori	r31, 0x80	; 128
    2208:	3f 2e       	mov	r3, r31
    220a:	2a e0       	ldi	r18, 0x0A	; 10
    220c:	30 e0       	ldi	r19, 0x00	; 0
    220e:	a3 01       	movw	r20, r6
    2210:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ultoa_invert>
    2214:	88 2e       	mov	r8, r24
    2216:	86 18       	sub	r8, r6
    2218:	45 c0       	rjmp	.+138    	; 0x22a4 <vfprintf+0x2ce>
    221a:	85 37       	cpi	r24, 0x75	; 117
    221c:	31 f4       	brne	.+12     	; 0x222a <vfprintf+0x254>
    221e:	23 2d       	mov	r18, r3
    2220:	2f 7e       	andi	r18, 0xEF	; 239
    2222:	b2 2e       	mov	r11, r18
    2224:	2a e0       	ldi	r18, 0x0A	; 10
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	25 c0       	rjmp	.+74     	; 0x2274 <vfprintf+0x29e>
    222a:	93 2d       	mov	r25, r3
    222c:	99 7f       	andi	r25, 0xF9	; 249
    222e:	b9 2e       	mov	r11, r25
    2230:	8f 36       	cpi	r24, 0x6F	; 111
    2232:	c1 f0       	breq	.+48     	; 0x2264 <vfprintf+0x28e>
    2234:	18 f4       	brcc	.+6      	; 0x223c <vfprintf+0x266>
    2236:	88 35       	cpi	r24, 0x58	; 88
    2238:	79 f0       	breq	.+30     	; 0x2258 <vfprintf+0x282>
    223a:	b5 c0       	rjmp	.+362    	; 0x23a6 <vfprintf+0x3d0>
    223c:	80 37       	cpi	r24, 0x70	; 112
    223e:	19 f0       	breq	.+6      	; 0x2246 <vfprintf+0x270>
    2240:	88 37       	cpi	r24, 0x78	; 120
    2242:	21 f0       	breq	.+8      	; 0x224c <vfprintf+0x276>
    2244:	b0 c0       	rjmp	.+352    	; 0x23a6 <vfprintf+0x3d0>
    2246:	e9 2f       	mov	r30, r25
    2248:	e0 61       	ori	r30, 0x10	; 16
    224a:	be 2e       	mov	r11, r30
    224c:	b4 fe       	sbrs	r11, 4
    224e:	0d c0       	rjmp	.+26     	; 0x226a <vfprintf+0x294>
    2250:	fb 2d       	mov	r31, r11
    2252:	f4 60       	ori	r31, 0x04	; 4
    2254:	bf 2e       	mov	r11, r31
    2256:	09 c0       	rjmp	.+18     	; 0x226a <vfprintf+0x294>
    2258:	34 fe       	sbrs	r3, 4
    225a:	0a c0       	rjmp	.+20     	; 0x2270 <vfprintf+0x29a>
    225c:	29 2f       	mov	r18, r25
    225e:	26 60       	ori	r18, 0x06	; 6
    2260:	b2 2e       	mov	r11, r18
    2262:	06 c0       	rjmp	.+12     	; 0x2270 <vfprintf+0x29a>
    2264:	28 e0       	ldi	r18, 0x08	; 8
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	05 c0       	rjmp	.+10     	; 0x2274 <vfprintf+0x29e>
    226a:	20 e1       	ldi	r18, 0x10	; 16
    226c:	30 e0       	ldi	r19, 0x00	; 0
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <vfprintf+0x29e>
    2270:	20 e1       	ldi	r18, 0x10	; 16
    2272:	32 e0       	ldi	r19, 0x02	; 2
    2274:	f8 01       	movw	r30, r16
    2276:	b7 fe       	sbrs	r11, 7
    2278:	07 c0       	rjmp	.+14     	; 0x2288 <vfprintf+0x2b2>
    227a:	60 81       	ld	r22, Z
    227c:	71 81       	ldd	r23, Z+1	; 0x01
    227e:	82 81       	ldd	r24, Z+2	; 0x02
    2280:	93 81       	ldd	r25, Z+3	; 0x03
    2282:	0c 5f       	subi	r16, 0xFC	; 252
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	06 c0       	rjmp	.+12     	; 0x2294 <vfprintf+0x2be>
    2288:	60 81       	ld	r22, Z
    228a:	71 81       	ldd	r23, Z+1	; 0x01
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 5f       	subi	r16, 0xFE	; 254
    2292:	1f 4f       	sbci	r17, 0xFF	; 255
    2294:	a3 01       	movw	r20, r6
    2296:	0e 94 8a 14 	call	0x2914	; 0x2914 <__ultoa_invert>
    229a:	88 2e       	mov	r8, r24
    229c:	86 18       	sub	r8, r6
    229e:	fb 2d       	mov	r31, r11
    22a0:	ff 77       	andi	r31, 0x7F	; 127
    22a2:	3f 2e       	mov	r3, r31
    22a4:	36 fe       	sbrs	r3, 6
    22a6:	0d c0       	rjmp	.+26     	; 0x22c2 <vfprintf+0x2ec>
    22a8:	23 2d       	mov	r18, r3
    22aa:	2e 7f       	andi	r18, 0xFE	; 254
    22ac:	a2 2e       	mov	r10, r18
    22ae:	89 14       	cp	r8, r9
    22b0:	58 f4       	brcc	.+22     	; 0x22c8 <vfprintf+0x2f2>
    22b2:	34 fe       	sbrs	r3, 4
    22b4:	0b c0       	rjmp	.+22     	; 0x22cc <vfprintf+0x2f6>
    22b6:	32 fc       	sbrc	r3, 2
    22b8:	09 c0       	rjmp	.+18     	; 0x22cc <vfprintf+0x2f6>
    22ba:	83 2d       	mov	r24, r3
    22bc:	8e 7e       	andi	r24, 0xEE	; 238
    22be:	a8 2e       	mov	r10, r24
    22c0:	05 c0       	rjmp	.+10     	; 0x22cc <vfprintf+0x2f6>
    22c2:	b8 2c       	mov	r11, r8
    22c4:	a3 2c       	mov	r10, r3
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <vfprintf+0x2f8>
    22c8:	b8 2c       	mov	r11, r8
    22ca:	01 c0       	rjmp	.+2      	; 0x22ce <vfprintf+0x2f8>
    22cc:	b9 2c       	mov	r11, r9
    22ce:	a4 fe       	sbrs	r10, 4
    22d0:	0f c0       	rjmp	.+30     	; 0x22f0 <vfprintf+0x31a>
    22d2:	fe 01       	movw	r30, r28
    22d4:	e8 0d       	add	r30, r8
    22d6:	f1 1d       	adc	r31, r1
    22d8:	80 81       	ld	r24, Z
    22da:	80 33       	cpi	r24, 0x30	; 48
    22dc:	21 f4       	brne	.+8      	; 0x22e6 <vfprintf+0x310>
    22de:	9a 2d       	mov	r25, r10
    22e0:	99 7e       	andi	r25, 0xE9	; 233
    22e2:	a9 2e       	mov	r10, r25
    22e4:	09 c0       	rjmp	.+18     	; 0x22f8 <vfprintf+0x322>
    22e6:	a2 fe       	sbrs	r10, 2
    22e8:	06 c0       	rjmp	.+12     	; 0x22f6 <vfprintf+0x320>
    22ea:	b3 94       	inc	r11
    22ec:	b3 94       	inc	r11
    22ee:	04 c0       	rjmp	.+8      	; 0x22f8 <vfprintf+0x322>
    22f0:	8a 2d       	mov	r24, r10
    22f2:	86 78       	andi	r24, 0x86	; 134
    22f4:	09 f0       	breq	.+2      	; 0x22f8 <vfprintf+0x322>
    22f6:	b3 94       	inc	r11
    22f8:	a3 fc       	sbrc	r10, 3
    22fa:	11 c0       	rjmp	.+34     	; 0x231e <vfprintf+0x348>
    22fc:	a0 fe       	sbrs	r10, 0
    22fe:	06 c0       	rjmp	.+12     	; 0x230c <vfprintf+0x336>
    2300:	b2 14       	cp	r11, r2
    2302:	88 f4       	brcc	.+34     	; 0x2326 <vfprintf+0x350>
    2304:	28 0c       	add	r2, r8
    2306:	92 2c       	mov	r9, r2
    2308:	9b 18       	sub	r9, r11
    230a:	0e c0       	rjmp	.+28     	; 0x2328 <vfprintf+0x352>
    230c:	b2 14       	cp	r11, r2
    230e:	60 f4       	brcc	.+24     	; 0x2328 <vfprintf+0x352>
    2310:	b6 01       	movw	r22, r12
    2312:	80 e2       	ldi	r24, 0x20	; 32
    2314:	90 e0       	ldi	r25, 0x00	; 0
    2316:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    231a:	b3 94       	inc	r11
    231c:	f7 cf       	rjmp	.-18     	; 0x230c <vfprintf+0x336>
    231e:	b2 14       	cp	r11, r2
    2320:	18 f4       	brcc	.+6      	; 0x2328 <vfprintf+0x352>
    2322:	2b 18       	sub	r2, r11
    2324:	02 c0       	rjmp	.+4      	; 0x232a <vfprintf+0x354>
    2326:	98 2c       	mov	r9, r8
    2328:	21 2c       	mov	r2, r1
    232a:	a4 fe       	sbrs	r10, 4
    232c:	10 c0       	rjmp	.+32     	; 0x234e <vfprintf+0x378>
    232e:	b6 01       	movw	r22, r12
    2330:	80 e3       	ldi	r24, 0x30	; 48
    2332:	90 e0       	ldi	r25, 0x00	; 0
    2334:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    2338:	a2 fe       	sbrs	r10, 2
    233a:	17 c0       	rjmp	.+46     	; 0x236a <vfprintf+0x394>
    233c:	a1 fc       	sbrc	r10, 1
    233e:	03 c0       	rjmp	.+6      	; 0x2346 <vfprintf+0x370>
    2340:	88 e7       	ldi	r24, 0x78	; 120
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 c0       	rjmp	.+4      	; 0x234a <vfprintf+0x374>
    2346:	88 e5       	ldi	r24, 0x58	; 88
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	b6 01       	movw	r22, r12
    234c:	0c c0       	rjmp	.+24     	; 0x2366 <vfprintf+0x390>
    234e:	8a 2d       	mov	r24, r10
    2350:	86 78       	andi	r24, 0x86	; 134
    2352:	59 f0       	breq	.+22     	; 0x236a <vfprintf+0x394>
    2354:	a1 fe       	sbrs	r10, 1
    2356:	02 c0       	rjmp	.+4      	; 0x235c <vfprintf+0x386>
    2358:	8b e2       	ldi	r24, 0x2B	; 43
    235a:	01 c0       	rjmp	.+2      	; 0x235e <vfprintf+0x388>
    235c:	80 e2       	ldi	r24, 0x20	; 32
    235e:	a7 fc       	sbrc	r10, 7
    2360:	8d e2       	ldi	r24, 0x2D	; 45
    2362:	b6 01       	movw	r22, r12
    2364:	90 e0       	ldi	r25, 0x00	; 0
    2366:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    236a:	89 14       	cp	r8, r9
    236c:	38 f4       	brcc	.+14     	; 0x237c <vfprintf+0x3a6>
    236e:	b6 01       	movw	r22, r12
    2370:	80 e3       	ldi	r24, 0x30	; 48
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    2378:	9a 94       	dec	r9
    237a:	f7 cf       	rjmp	.-18     	; 0x236a <vfprintf+0x394>
    237c:	8a 94       	dec	r8
    237e:	f3 01       	movw	r30, r6
    2380:	e8 0d       	add	r30, r8
    2382:	f1 1d       	adc	r31, r1
    2384:	80 81       	ld	r24, Z
    2386:	b6 01       	movw	r22, r12
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    238e:	81 10       	cpse	r8, r1
    2390:	f5 cf       	rjmp	.-22     	; 0x237c <vfprintf+0x3a6>
    2392:	22 20       	and	r2, r2
    2394:	09 f4       	brne	.+2      	; 0x2398 <vfprintf+0x3c2>
    2396:	42 ce       	rjmp	.-892    	; 0x201c <vfprintf+0x46>
    2398:	b6 01       	movw	r22, r12
    239a:	80 e2       	ldi	r24, 0x20	; 32
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	0e 94 4e 14 	call	0x289c	; 0x289c <fputc>
    23a2:	2a 94       	dec	r2
    23a4:	f6 cf       	rjmp	.-20     	; 0x2392 <vfprintf+0x3bc>
    23a6:	f6 01       	movw	r30, r12
    23a8:	86 81       	ldd	r24, Z+6	; 0x06
    23aa:	97 81       	ldd	r25, Z+7	; 0x07
    23ac:	02 c0       	rjmp	.+4      	; 0x23b2 <vfprintf+0x3dc>
    23ae:	8f ef       	ldi	r24, 0xFF	; 255
    23b0:	9f ef       	ldi	r25, 0xFF	; 255
    23b2:	2b 96       	adiw	r28, 0x0b	; 11
    23b4:	cd bf       	out	0x3d, r28	; 61
    23b6:	de bf       	out	0x3e, r29	; 62
    23b8:	df 91       	pop	r29
    23ba:	cf 91       	pop	r28
    23bc:	1f 91       	pop	r17
    23be:	0f 91       	pop	r16
    23c0:	ff 90       	pop	r15
    23c2:	ef 90       	pop	r14
    23c4:	df 90       	pop	r13
    23c6:	cf 90       	pop	r12
    23c8:	bf 90       	pop	r11
    23ca:	af 90       	pop	r10
    23cc:	9f 90       	pop	r9
    23ce:	8f 90       	pop	r8
    23d0:	7f 90       	pop	r7
    23d2:	6f 90       	pop	r6
    23d4:	5f 90       	pop	r5
    23d6:	4f 90       	pop	r4
    23d8:	3f 90       	pop	r3
    23da:	2f 90       	pop	r2
    23dc:	08 95       	ret

000023de <dtoa_prf>:
    23de:	8f 92       	push	r8
    23e0:	9f 92       	push	r9
    23e2:	af 92       	push	r10
    23e4:	bf 92       	push	r11
    23e6:	cf 92       	push	r12
    23e8:	df 92       	push	r13
    23ea:	ef 92       	push	r14
    23ec:	ff 92       	push	r15
    23ee:	0f 93       	push	r16
    23f0:	1f 93       	push	r17
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	cd b7       	in	r28, 0x3d	; 61
    23f8:	de b7       	in	r29, 0x3e	; 62
    23fa:	29 97       	sbiw	r28, 0x09	; 9
    23fc:	cd bf       	out	0x3d, r28	; 61
    23fe:	de bf       	out	0x3e, r29	; 62
    2400:	6a 01       	movw	r12, r20
    2402:	12 2f       	mov	r17, r18
    2404:	b0 2e       	mov	r11, r16
    2406:	2b e3       	ldi	r18, 0x3B	; 59
    2408:	20 17       	cp	r18, r16
    240a:	20 f0       	brcs	.+8      	; 0x2414 <dtoa_prf+0x36>
    240c:	ff 24       	eor	r15, r15
    240e:	f3 94       	inc	r15
    2410:	f0 0e       	add	r15, r16
    2412:	02 c0       	rjmp	.+4      	; 0x2418 <dtoa_prf+0x3a>
    2414:	2c e3       	ldi	r18, 0x3C	; 60
    2416:	f2 2e       	mov	r15, r18
    2418:	0f 2d       	mov	r16, r15
    241a:	27 e0       	ldi	r18, 0x07	; 7
    241c:	ae 01       	movw	r20, r28
    241e:	4f 5f       	subi	r20, 0xFF	; 255
    2420:	5f 4f       	sbci	r21, 0xFF	; 255
    2422:	0e 94 60 13 	call	0x26c0	; 0x26c0 <__ftoa_engine>
    2426:	bc 01       	movw	r22, r24
    2428:	49 81       	ldd	r20, Y+1	; 0x01
    242a:	84 2f       	mov	r24, r20
    242c:	89 70       	andi	r24, 0x09	; 9
    242e:	81 30       	cpi	r24, 0x01	; 1
    2430:	31 f0       	breq	.+12     	; 0x243e <dtoa_prf+0x60>
    2432:	e1 fc       	sbrc	r14, 1
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <dtoa_prf+0x64>
    2436:	e0 fe       	sbrs	r14, 0
    2438:	06 c0       	rjmp	.+12     	; 0x2446 <dtoa_prf+0x68>
    243a:	90 e2       	ldi	r25, 0x20	; 32
    243c:	05 c0       	rjmp	.+10     	; 0x2448 <dtoa_prf+0x6a>
    243e:	9d e2       	ldi	r25, 0x2D	; 45
    2440:	03 c0       	rjmp	.+6      	; 0x2448 <dtoa_prf+0x6a>
    2442:	9b e2       	ldi	r25, 0x2B	; 43
    2444:	01 c0       	rjmp	.+2      	; 0x2448 <dtoa_prf+0x6a>
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	5e 2d       	mov	r21, r14
    244a:	50 71       	andi	r21, 0x10	; 16
    244c:	43 ff       	sbrs	r20, 3
    244e:	3c c0       	rjmp	.+120    	; 0x24c8 <dtoa_prf+0xea>
    2450:	91 11       	cpse	r25, r1
    2452:	02 c0       	rjmp	.+4      	; 0x2458 <dtoa_prf+0x7a>
    2454:	83 e0       	ldi	r24, 0x03	; 3
    2456:	01 c0       	rjmp	.+2      	; 0x245a <dtoa_prf+0x7c>
    2458:	84 e0       	ldi	r24, 0x04	; 4
    245a:	81 17       	cp	r24, r17
    245c:	18 f4       	brcc	.+6      	; 0x2464 <dtoa_prf+0x86>
    245e:	21 2f       	mov	r18, r17
    2460:	28 1b       	sub	r18, r24
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <dtoa_prf+0x88>
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	51 11       	cpse	r21, r1
    2468:	0b c0       	rjmp	.+22     	; 0x2480 <dtoa_prf+0xa2>
    246a:	f6 01       	movw	r30, r12
    246c:	82 2f       	mov	r24, r18
    246e:	30 e2       	ldi	r19, 0x20	; 32
    2470:	88 23       	and	r24, r24
    2472:	19 f0       	breq	.+6      	; 0x247a <dtoa_prf+0x9c>
    2474:	31 93       	st	Z+, r19
    2476:	81 50       	subi	r24, 0x01	; 1
    2478:	fb cf       	rjmp	.-10     	; 0x2470 <dtoa_prf+0x92>
    247a:	c2 0e       	add	r12, r18
    247c:	d1 1c       	adc	r13, r1
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	99 23       	and	r25, r25
    2482:	29 f0       	breq	.+10     	; 0x248e <dtoa_prf+0xb0>
    2484:	d6 01       	movw	r26, r12
    2486:	9c 93       	st	X, r25
    2488:	f6 01       	movw	r30, r12
    248a:	31 96       	adiw	r30, 0x01	; 1
    248c:	6f 01       	movw	r12, r30
    248e:	c6 01       	movw	r24, r12
    2490:	03 96       	adiw	r24, 0x03	; 3
    2492:	e2 fe       	sbrs	r14, 2
    2494:	0a c0       	rjmp	.+20     	; 0x24aa <dtoa_prf+0xcc>
    2496:	3e e4       	ldi	r19, 0x4E	; 78
    2498:	d6 01       	movw	r26, r12
    249a:	3c 93       	st	X, r19
    249c:	41 e4       	ldi	r20, 0x41	; 65
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	4c 93       	st	X, r20
    24a2:	11 97       	sbiw	r26, 0x01	; 1
    24a4:	12 96       	adiw	r26, 0x02	; 2
    24a6:	3c 93       	st	X, r19
    24a8:	06 c0       	rjmp	.+12     	; 0x24b6 <dtoa_prf+0xd8>
    24aa:	3e e6       	ldi	r19, 0x6E	; 110
    24ac:	f6 01       	movw	r30, r12
    24ae:	30 83       	st	Z, r19
    24b0:	41 e6       	ldi	r20, 0x61	; 97
    24b2:	41 83       	std	Z+1, r20	; 0x01
    24b4:	32 83       	std	Z+2, r19	; 0x02
    24b6:	fc 01       	movw	r30, r24
    24b8:	32 2f       	mov	r19, r18
    24ba:	40 e2       	ldi	r20, 0x20	; 32
    24bc:	33 23       	and	r19, r19
    24be:	09 f4       	brne	.+2      	; 0x24c2 <dtoa_prf+0xe4>
    24c0:	42 c0       	rjmp	.+132    	; 0x2546 <dtoa_prf+0x168>
    24c2:	41 93       	st	Z+, r20
    24c4:	31 50       	subi	r19, 0x01	; 1
    24c6:	fa cf       	rjmp	.-12     	; 0x24bc <dtoa_prf+0xde>
    24c8:	42 ff       	sbrs	r20, 2
    24ca:	44 c0       	rjmp	.+136    	; 0x2554 <dtoa_prf+0x176>
    24cc:	91 11       	cpse	r25, r1
    24ce:	02 c0       	rjmp	.+4      	; 0x24d4 <dtoa_prf+0xf6>
    24d0:	83 e0       	ldi	r24, 0x03	; 3
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <dtoa_prf+0xf8>
    24d4:	84 e0       	ldi	r24, 0x04	; 4
    24d6:	81 17       	cp	r24, r17
    24d8:	18 f4       	brcc	.+6      	; 0x24e0 <dtoa_prf+0x102>
    24da:	21 2f       	mov	r18, r17
    24dc:	28 1b       	sub	r18, r24
    24de:	01 c0       	rjmp	.+2      	; 0x24e2 <dtoa_prf+0x104>
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	51 11       	cpse	r21, r1
    24e4:	0b c0       	rjmp	.+22     	; 0x24fc <dtoa_prf+0x11e>
    24e6:	f6 01       	movw	r30, r12
    24e8:	82 2f       	mov	r24, r18
    24ea:	30 e2       	ldi	r19, 0x20	; 32
    24ec:	88 23       	and	r24, r24
    24ee:	19 f0       	breq	.+6      	; 0x24f6 <dtoa_prf+0x118>
    24f0:	31 93       	st	Z+, r19
    24f2:	81 50       	subi	r24, 0x01	; 1
    24f4:	fb cf       	rjmp	.-10     	; 0x24ec <dtoa_prf+0x10e>
    24f6:	c2 0e       	add	r12, r18
    24f8:	d1 1c       	adc	r13, r1
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	99 23       	and	r25, r25
    24fe:	29 f0       	breq	.+10     	; 0x250a <dtoa_prf+0x12c>
    2500:	d6 01       	movw	r26, r12
    2502:	9c 93       	st	X, r25
    2504:	f6 01       	movw	r30, r12
    2506:	31 96       	adiw	r30, 0x01	; 1
    2508:	6f 01       	movw	r12, r30
    250a:	c6 01       	movw	r24, r12
    250c:	03 96       	adiw	r24, 0x03	; 3
    250e:	e2 fe       	sbrs	r14, 2
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <dtoa_prf+0x14a>
    2512:	39 e4       	ldi	r19, 0x49	; 73
    2514:	d6 01       	movw	r26, r12
    2516:	3c 93       	st	X, r19
    2518:	3e e4       	ldi	r19, 0x4E	; 78
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	3c 93       	st	X, r19
    251e:	11 97       	sbiw	r26, 0x01	; 1
    2520:	36 e4       	ldi	r19, 0x46	; 70
    2522:	12 96       	adiw	r26, 0x02	; 2
    2524:	3c 93       	st	X, r19
    2526:	07 c0       	rjmp	.+14     	; 0x2536 <dtoa_prf+0x158>
    2528:	39 e6       	ldi	r19, 0x69	; 105
    252a:	f6 01       	movw	r30, r12
    252c:	30 83       	st	Z, r19
    252e:	3e e6       	ldi	r19, 0x6E	; 110
    2530:	31 83       	std	Z+1, r19	; 0x01
    2532:	36 e6       	ldi	r19, 0x66	; 102
    2534:	32 83       	std	Z+2, r19	; 0x02
    2536:	fc 01       	movw	r30, r24
    2538:	32 2f       	mov	r19, r18
    253a:	40 e2       	ldi	r20, 0x20	; 32
    253c:	33 23       	and	r19, r19
    253e:	19 f0       	breq	.+6      	; 0x2546 <dtoa_prf+0x168>
    2540:	41 93       	st	Z+, r20
    2542:	31 50       	subi	r19, 0x01	; 1
    2544:	fb cf       	rjmp	.-10     	; 0x253c <dtoa_prf+0x15e>
    2546:	fc 01       	movw	r30, r24
    2548:	e2 0f       	add	r30, r18
    254a:	f1 1d       	adc	r31, r1
    254c:	10 82       	st	Z, r1
    254e:	8e ef       	ldi	r24, 0xFE	; 254
    2550:	9f ef       	ldi	r25, 0xFF	; 255
    2552:	a6 c0       	rjmp	.+332    	; 0x26a0 <dtoa_prf+0x2c2>
    2554:	21 e0       	ldi	r18, 0x01	; 1
    2556:	30 e0       	ldi	r19, 0x00	; 0
    2558:	91 11       	cpse	r25, r1
    255a:	02 c0       	rjmp	.+4      	; 0x2560 <dtoa_prf+0x182>
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	16 16       	cp	r1, r22
    2562:	17 06       	cpc	r1, r23
    2564:	1c f4       	brge	.+6      	; 0x256c <dtoa_prf+0x18e>
    2566:	fb 01       	movw	r30, r22
    2568:	31 96       	adiw	r30, 0x01	; 1
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <dtoa_prf+0x192>
    256c:	e1 e0       	ldi	r30, 0x01	; 1
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	2e 0f       	add	r18, r30
    2572:	3f 1f       	adc	r19, r31
    2574:	bb 20       	and	r11, r11
    2576:	21 f0       	breq	.+8      	; 0x2580 <dtoa_prf+0x1a2>
    2578:	eb 2d       	mov	r30, r11
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	31 96       	adiw	r30, 0x01	; 1
    257e:	02 c0       	rjmp	.+4      	; 0x2584 <dtoa_prf+0x1a6>
    2580:	e0 e0       	ldi	r30, 0x00	; 0
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	2e 0f       	add	r18, r30
    2586:	3f 1f       	adc	r19, r31
    2588:	e1 2f       	mov	r30, r17
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	2e 17       	cp	r18, r30
    258e:	3f 07       	cpc	r19, r31
    2590:	1c f4       	brge	.+6      	; 0x2598 <dtoa_prf+0x1ba>
    2592:	12 1b       	sub	r17, r18
    2594:	21 2f       	mov	r18, r17
    2596:	01 c0       	rjmp	.+2      	; 0x259a <dtoa_prf+0x1bc>
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	8e 2d       	mov	r24, r14
    259c:	88 71       	andi	r24, 0x18	; 24
    259e:	59 f4       	brne	.+22     	; 0x25b6 <dtoa_prf+0x1d8>
    25a0:	f6 01       	movw	r30, r12
    25a2:	82 2f       	mov	r24, r18
    25a4:	30 e2       	ldi	r19, 0x20	; 32
    25a6:	88 23       	and	r24, r24
    25a8:	19 f0       	breq	.+6      	; 0x25b0 <dtoa_prf+0x1d2>
    25aa:	31 93       	st	Z+, r19
    25ac:	81 50       	subi	r24, 0x01	; 1
    25ae:	fb cf       	rjmp	.-10     	; 0x25a6 <dtoa_prf+0x1c8>
    25b0:	c2 0e       	add	r12, r18
    25b2:	d1 1c       	adc	r13, r1
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	99 23       	and	r25, r25
    25b8:	29 f0       	breq	.+10     	; 0x25c4 <dtoa_prf+0x1e6>
    25ba:	d6 01       	movw	r26, r12
    25bc:	9c 93       	st	X, r25
    25be:	f6 01       	movw	r30, r12
    25c0:	31 96       	adiw	r30, 0x01	; 1
    25c2:	6f 01       	movw	r12, r30
    25c4:	51 11       	cpse	r21, r1
    25c6:	0b c0       	rjmp	.+22     	; 0x25de <dtoa_prf+0x200>
    25c8:	f6 01       	movw	r30, r12
    25ca:	82 2f       	mov	r24, r18
    25cc:	90 e3       	ldi	r25, 0x30	; 48
    25ce:	88 23       	and	r24, r24
    25d0:	19 f0       	breq	.+6      	; 0x25d8 <dtoa_prf+0x1fa>
    25d2:	91 93       	st	Z+, r25
    25d4:	81 50       	subi	r24, 0x01	; 1
    25d6:	fb cf       	rjmp	.-10     	; 0x25ce <dtoa_prf+0x1f0>
    25d8:	c2 0e       	add	r12, r18
    25da:	d1 1c       	adc	r13, r1
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	0f 2d       	mov	r16, r15
    25e0:	06 0f       	add	r16, r22
    25e2:	9a 81       	ldd	r25, Y+2	; 0x02
    25e4:	34 2f       	mov	r19, r20
    25e6:	30 71       	andi	r19, 0x10	; 16
    25e8:	44 ff       	sbrs	r20, 4
    25ea:	03 c0       	rjmp	.+6      	; 0x25f2 <dtoa_prf+0x214>
    25ec:	91 33       	cpi	r25, 0x31	; 49
    25ee:	09 f4       	brne	.+2      	; 0x25f2 <dtoa_prf+0x214>
    25f0:	01 50       	subi	r16, 0x01	; 1
    25f2:	10 16       	cp	r1, r16
    25f4:	24 f4       	brge	.+8      	; 0x25fe <dtoa_prf+0x220>
    25f6:	09 30       	cpi	r16, 0x09	; 9
    25f8:	18 f0       	brcs	.+6      	; 0x2600 <dtoa_prf+0x222>
    25fa:	08 e0       	ldi	r16, 0x08	; 8
    25fc:	01 c0       	rjmp	.+2      	; 0x2600 <dtoa_prf+0x222>
    25fe:	01 e0       	ldi	r16, 0x01	; 1
    2600:	ab 01       	movw	r20, r22
    2602:	77 ff       	sbrs	r23, 7
    2604:	02 c0       	rjmp	.+4      	; 0x260a <dtoa_prf+0x22c>
    2606:	40 e0       	ldi	r20, 0x00	; 0
    2608:	50 e0       	ldi	r21, 0x00	; 0
    260a:	fb 01       	movw	r30, r22
    260c:	e4 1b       	sub	r30, r20
    260e:	f5 0b       	sbc	r31, r21
    2610:	a1 e0       	ldi	r26, 0x01	; 1
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	ac 0f       	add	r26, r28
    2616:	bd 1f       	adc	r27, r29
    2618:	ea 0f       	add	r30, r26
    261a:	fb 1f       	adc	r31, r27
    261c:	8e e2       	ldi	r24, 0x2E	; 46
    261e:	a8 2e       	mov	r10, r24
    2620:	4b 01       	movw	r8, r22
    2622:	80 1a       	sub	r8, r16
    2624:	91 08       	sbc	r9, r1
    2626:	0b 2d       	mov	r16, r11
    2628:	10 e0       	ldi	r17, 0x00	; 0
    262a:	11 95       	neg	r17
    262c:	01 95       	neg	r16
    262e:	11 09       	sbc	r17, r1
    2630:	4f 3f       	cpi	r20, 0xFF	; 255
    2632:	bf ef       	ldi	r27, 0xFF	; 255
    2634:	5b 07       	cpc	r21, r27
    2636:	21 f4       	brne	.+8      	; 0x2640 <dtoa_prf+0x262>
    2638:	d6 01       	movw	r26, r12
    263a:	ac 92       	st	X, r10
    263c:	11 96       	adiw	r26, 0x01	; 1
    263e:	6d 01       	movw	r12, r26
    2640:	64 17       	cp	r22, r20
    2642:	75 07       	cpc	r23, r21
    2644:	2c f0       	brlt	.+10     	; 0x2650 <dtoa_prf+0x272>
    2646:	84 16       	cp	r8, r20
    2648:	95 06       	cpc	r9, r21
    264a:	14 f4       	brge	.+4      	; 0x2650 <dtoa_prf+0x272>
    264c:	81 81       	ldd	r24, Z+1	; 0x01
    264e:	01 c0       	rjmp	.+2      	; 0x2652 <dtoa_prf+0x274>
    2650:	80 e3       	ldi	r24, 0x30	; 48
    2652:	41 50       	subi	r20, 0x01	; 1
    2654:	51 09       	sbc	r21, r1
    2656:	31 96       	adiw	r30, 0x01	; 1
    2658:	d6 01       	movw	r26, r12
    265a:	11 96       	adiw	r26, 0x01	; 1
    265c:	7d 01       	movw	r14, r26
    265e:	40 17       	cp	r20, r16
    2660:	51 07       	cpc	r21, r17
    2662:	24 f0       	brlt	.+8      	; 0x266c <dtoa_prf+0x28e>
    2664:	d6 01       	movw	r26, r12
    2666:	8c 93       	st	X, r24
    2668:	67 01       	movw	r12, r14
    266a:	e2 cf       	rjmp	.-60     	; 0x2630 <dtoa_prf+0x252>
    266c:	64 17       	cp	r22, r20
    266e:	75 07       	cpc	r23, r21
    2670:	39 f4       	brne	.+14     	; 0x2680 <dtoa_prf+0x2a2>
    2672:	96 33       	cpi	r25, 0x36	; 54
    2674:	20 f4       	brcc	.+8      	; 0x267e <dtoa_prf+0x2a0>
    2676:	95 33       	cpi	r25, 0x35	; 53
    2678:	19 f4       	brne	.+6      	; 0x2680 <dtoa_prf+0x2a2>
    267a:	31 11       	cpse	r19, r1
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <dtoa_prf+0x2a2>
    267e:	81 e3       	ldi	r24, 0x31	; 49
    2680:	f6 01       	movw	r30, r12
    2682:	80 83       	st	Z, r24
    2684:	f7 01       	movw	r30, r14
    2686:	82 2f       	mov	r24, r18
    2688:	90 e2       	ldi	r25, 0x20	; 32
    268a:	88 23       	and	r24, r24
    268c:	19 f0       	breq	.+6      	; 0x2694 <dtoa_prf+0x2b6>
    268e:	91 93       	st	Z+, r25
    2690:	81 50       	subi	r24, 0x01	; 1
    2692:	fb cf       	rjmp	.-10     	; 0x268a <dtoa_prf+0x2ac>
    2694:	f7 01       	movw	r30, r14
    2696:	e2 0f       	add	r30, r18
    2698:	f1 1d       	adc	r31, r1
    269a:	10 82       	st	Z, r1
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	29 96       	adiw	r28, 0x09	; 9
    26a2:	cd bf       	out	0x3d, r28	; 61
    26a4:	de bf       	out	0x3e, r29	; 62
    26a6:	df 91       	pop	r29
    26a8:	cf 91       	pop	r28
    26aa:	1f 91       	pop	r17
    26ac:	0f 91       	pop	r16
    26ae:	ff 90       	pop	r15
    26b0:	ef 90       	pop	r14
    26b2:	df 90       	pop	r13
    26b4:	cf 90       	pop	r12
    26b6:	bf 90       	pop	r11
    26b8:	af 90       	pop	r10
    26ba:	9f 90       	pop	r9
    26bc:	8f 90       	pop	r8
    26be:	08 95       	ret

000026c0 <__ftoa_engine>:
    26c0:	28 30       	cpi	r18, 0x08	; 8
    26c2:	08 f0       	brcs	.+2      	; 0x26c6 <__ftoa_engine+0x6>
    26c4:	27 e0       	ldi	r18, 0x07	; 7
    26c6:	33 27       	eor	r19, r19
    26c8:	da 01       	movw	r26, r20
    26ca:	99 0f       	add	r25, r25
    26cc:	31 1d       	adc	r19, r1
    26ce:	87 fd       	sbrc	r24, 7
    26d0:	91 60       	ori	r25, 0x01	; 1
    26d2:	00 96       	adiw	r24, 0x00	; 0
    26d4:	61 05       	cpc	r22, r1
    26d6:	71 05       	cpc	r23, r1
    26d8:	39 f4       	brne	.+14     	; 0x26e8 <__ftoa_engine+0x28>
    26da:	32 60       	ori	r19, 0x02	; 2
    26dc:	2e 5f       	subi	r18, 0xFE	; 254
    26de:	3d 93       	st	X+, r19
    26e0:	30 e3       	ldi	r19, 0x30	; 48
    26e2:	2a 95       	dec	r18
    26e4:	e1 f7       	brne	.-8      	; 0x26de <__ftoa_engine+0x1e>
    26e6:	08 95       	ret
    26e8:	9f 3f       	cpi	r25, 0xFF	; 255
    26ea:	30 f0       	brcs	.+12     	; 0x26f8 <__ftoa_engine+0x38>
    26ec:	80 38       	cpi	r24, 0x80	; 128
    26ee:	71 05       	cpc	r23, r1
    26f0:	61 05       	cpc	r22, r1
    26f2:	09 f0       	breq	.+2      	; 0x26f6 <__ftoa_engine+0x36>
    26f4:	3c 5f       	subi	r19, 0xFC	; 252
    26f6:	3c 5f       	subi	r19, 0xFC	; 252
    26f8:	3d 93       	st	X+, r19
    26fa:	91 30       	cpi	r25, 0x01	; 1
    26fc:	08 f0       	brcs	.+2      	; 0x2700 <__ftoa_engine+0x40>
    26fe:	80 68       	ori	r24, 0x80	; 128
    2700:	91 1d       	adc	r25, r1
    2702:	df 93       	push	r29
    2704:	cf 93       	push	r28
    2706:	1f 93       	push	r17
    2708:	0f 93       	push	r16
    270a:	ff 92       	push	r15
    270c:	ef 92       	push	r14
    270e:	19 2f       	mov	r17, r25
    2710:	98 7f       	andi	r25, 0xF8	; 248
    2712:	96 95       	lsr	r25
    2714:	e9 2f       	mov	r30, r25
    2716:	96 95       	lsr	r25
    2718:	96 95       	lsr	r25
    271a:	e9 0f       	add	r30, r25
    271c:	ff 27       	eor	r31, r31
    271e:	e6 56       	subi	r30, 0x66	; 102
    2720:	fe 4f       	sbci	r31, 0xFE	; 254
    2722:	99 27       	eor	r25, r25
    2724:	33 27       	eor	r19, r19
    2726:	ee 24       	eor	r14, r14
    2728:	ff 24       	eor	r15, r15
    272a:	a7 01       	movw	r20, r14
    272c:	e7 01       	movw	r28, r14
    272e:	05 90       	lpm	r0, Z+
    2730:	08 94       	sec
    2732:	07 94       	ror	r0
    2734:	28 f4       	brcc	.+10     	; 0x2740 <__ftoa_engine+0x80>
    2736:	36 0f       	add	r19, r22
    2738:	e7 1e       	adc	r14, r23
    273a:	f8 1e       	adc	r15, r24
    273c:	49 1f       	adc	r20, r25
    273e:	51 1d       	adc	r21, r1
    2740:	66 0f       	add	r22, r22
    2742:	77 1f       	adc	r23, r23
    2744:	88 1f       	adc	r24, r24
    2746:	99 1f       	adc	r25, r25
    2748:	06 94       	lsr	r0
    274a:	a1 f7       	brne	.-24     	; 0x2734 <__ftoa_engine+0x74>
    274c:	05 90       	lpm	r0, Z+
    274e:	07 94       	ror	r0
    2750:	28 f4       	brcc	.+10     	; 0x275c <__ftoa_engine+0x9c>
    2752:	e7 0e       	add	r14, r23
    2754:	f8 1e       	adc	r15, r24
    2756:	49 1f       	adc	r20, r25
    2758:	56 1f       	adc	r21, r22
    275a:	c1 1d       	adc	r28, r1
    275c:	77 0f       	add	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	66 1f       	adc	r22, r22
    2764:	06 94       	lsr	r0
    2766:	a1 f7       	brne	.-24     	; 0x2750 <__ftoa_engine+0x90>
    2768:	05 90       	lpm	r0, Z+
    276a:	07 94       	ror	r0
    276c:	28 f4       	brcc	.+10     	; 0x2778 <__ftoa_engine+0xb8>
    276e:	f8 0e       	add	r15, r24
    2770:	49 1f       	adc	r20, r25
    2772:	56 1f       	adc	r21, r22
    2774:	c7 1f       	adc	r28, r23
    2776:	d1 1d       	adc	r29, r1
    2778:	88 0f       	add	r24, r24
    277a:	99 1f       	adc	r25, r25
    277c:	66 1f       	adc	r22, r22
    277e:	77 1f       	adc	r23, r23
    2780:	06 94       	lsr	r0
    2782:	a1 f7       	brne	.-24     	; 0x276c <__ftoa_engine+0xac>
    2784:	05 90       	lpm	r0, Z+
    2786:	07 94       	ror	r0
    2788:	20 f4       	brcc	.+8      	; 0x2792 <__ftoa_engine+0xd2>
    278a:	49 0f       	add	r20, r25
    278c:	56 1f       	adc	r21, r22
    278e:	c7 1f       	adc	r28, r23
    2790:	d8 1f       	adc	r29, r24
    2792:	99 0f       	add	r25, r25
    2794:	66 1f       	adc	r22, r22
    2796:	77 1f       	adc	r23, r23
    2798:	88 1f       	adc	r24, r24
    279a:	06 94       	lsr	r0
    279c:	a9 f7       	brne	.-22     	; 0x2788 <__ftoa_engine+0xc8>
    279e:	84 91       	lpm	r24, Z
    27a0:	10 95       	com	r17
    27a2:	17 70       	andi	r17, 0x07	; 7
    27a4:	41 f0       	breq	.+16     	; 0x27b6 <__ftoa_engine+0xf6>
    27a6:	d6 95       	lsr	r29
    27a8:	c7 95       	ror	r28
    27aa:	57 95       	ror	r21
    27ac:	47 95       	ror	r20
    27ae:	f7 94       	ror	r15
    27b0:	e7 94       	ror	r14
    27b2:	1a 95       	dec	r17
    27b4:	c1 f7       	brne	.-16     	; 0x27a6 <__ftoa_engine+0xe6>
    27b6:	e0 e4       	ldi	r30, 0x40	; 64
    27b8:	f1 e0       	ldi	r31, 0x01	; 1
    27ba:	68 94       	set
    27bc:	15 90       	lpm	r1, Z+
    27be:	15 91       	lpm	r17, Z+
    27c0:	35 91       	lpm	r19, Z+
    27c2:	65 91       	lpm	r22, Z+
    27c4:	95 91       	lpm	r25, Z+
    27c6:	05 90       	lpm	r0, Z+
    27c8:	7f e2       	ldi	r23, 0x2F	; 47
    27ca:	73 95       	inc	r23
    27cc:	e1 18       	sub	r14, r1
    27ce:	f1 0a       	sbc	r15, r17
    27d0:	43 0b       	sbc	r20, r19
    27d2:	56 0b       	sbc	r21, r22
    27d4:	c9 0b       	sbc	r28, r25
    27d6:	d0 09       	sbc	r29, r0
    27d8:	c0 f7       	brcc	.-16     	; 0x27ca <__ftoa_engine+0x10a>
    27da:	e1 0c       	add	r14, r1
    27dc:	f1 1e       	adc	r15, r17
    27de:	43 1f       	adc	r20, r19
    27e0:	56 1f       	adc	r21, r22
    27e2:	c9 1f       	adc	r28, r25
    27e4:	d0 1d       	adc	r29, r0
    27e6:	7e f4       	brtc	.+30     	; 0x2806 <__ftoa_engine+0x146>
    27e8:	70 33       	cpi	r23, 0x30	; 48
    27ea:	11 f4       	brne	.+4      	; 0x27f0 <__ftoa_engine+0x130>
    27ec:	8a 95       	dec	r24
    27ee:	e6 cf       	rjmp	.-52     	; 0x27bc <__ftoa_engine+0xfc>
    27f0:	e8 94       	clt
    27f2:	01 50       	subi	r16, 0x01	; 1
    27f4:	30 f0       	brcs	.+12     	; 0x2802 <__ftoa_engine+0x142>
    27f6:	08 0f       	add	r16, r24
    27f8:	0a f4       	brpl	.+2      	; 0x27fc <__ftoa_engine+0x13c>
    27fa:	00 27       	eor	r16, r16
    27fc:	02 17       	cp	r16, r18
    27fe:	08 f4       	brcc	.+2      	; 0x2802 <__ftoa_engine+0x142>
    2800:	20 2f       	mov	r18, r16
    2802:	23 95       	inc	r18
    2804:	02 2f       	mov	r16, r18
    2806:	7a 33       	cpi	r23, 0x3A	; 58
    2808:	28 f0       	brcs	.+10     	; 0x2814 <__ftoa_engine+0x154>
    280a:	79 e3       	ldi	r23, 0x39	; 57
    280c:	7d 93       	st	X+, r23
    280e:	2a 95       	dec	r18
    2810:	e9 f7       	brne	.-6      	; 0x280c <__ftoa_engine+0x14c>
    2812:	10 c0       	rjmp	.+32     	; 0x2834 <__ftoa_engine+0x174>
    2814:	7d 93       	st	X+, r23
    2816:	2a 95       	dec	r18
    2818:	89 f6       	brne	.-94     	; 0x27bc <__ftoa_engine+0xfc>
    281a:	06 94       	lsr	r0
    281c:	97 95       	ror	r25
    281e:	67 95       	ror	r22
    2820:	37 95       	ror	r19
    2822:	17 95       	ror	r17
    2824:	17 94       	ror	r1
    2826:	e1 18       	sub	r14, r1
    2828:	f1 0a       	sbc	r15, r17
    282a:	43 0b       	sbc	r20, r19
    282c:	56 0b       	sbc	r21, r22
    282e:	c9 0b       	sbc	r28, r25
    2830:	d0 09       	sbc	r29, r0
    2832:	98 f0       	brcs	.+38     	; 0x285a <__ftoa_engine+0x19a>
    2834:	23 95       	inc	r18
    2836:	7e 91       	ld	r23, -X
    2838:	73 95       	inc	r23
    283a:	7a 33       	cpi	r23, 0x3A	; 58
    283c:	08 f0       	brcs	.+2      	; 0x2840 <__ftoa_engine+0x180>
    283e:	70 e3       	ldi	r23, 0x30	; 48
    2840:	7c 93       	st	X, r23
    2842:	20 13       	cpse	r18, r16
    2844:	b8 f7       	brcc	.-18     	; 0x2834 <__ftoa_engine+0x174>
    2846:	7e 91       	ld	r23, -X
    2848:	70 61       	ori	r23, 0x10	; 16
    284a:	7d 93       	st	X+, r23
    284c:	30 f0       	brcs	.+12     	; 0x285a <__ftoa_engine+0x19a>
    284e:	83 95       	inc	r24
    2850:	71 e3       	ldi	r23, 0x31	; 49
    2852:	7d 93       	st	X+, r23
    2854:	70 e3       	ldi	r23, 0x30	; 48
    2856:	2a 95       	dec	r18
    2858:	e1 f7       	brne	.-8      	; 0x2852 <__ftoa_engine+0x192>
    285a:	11 24       	eor	r1, r1
    285c:	ef 90       	pop	r14
    285e:	ff 90       	pop	r15
    2860:	0f 91       	pop	r16
    2862:	1f 91       	pop	r17
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	99 27       	eor	r25, r25
    286a:	87 fd       	sbrc	r24, 7
    286c:	90 95       	com	r25
    286e:	08 95       	ret

00002870 <strnlen_P>:
    2870:	fc 01       	movw	r30, r24
    2872:	05 90       	lpm	r0, Z+
    2874:	61 50       	subi	r22, 0x01	; 1
    2876:	70 40       	sbci	r23, 0x00	; 0
    2878:	01 10       	cpse	r0, r1
    287a:	d8 f7       	brcc	.-10     	; 0x2872 <strnlen_P+0x2>
    287c:	80 95       	com	r24
    287e:	90 95       	com	r25
    2880:	8e 0f       	add	r24, r30
    2882:	9f 1f       	adc	r25, r31
    2884:	08 95       	ret

00002886 <strnlen>:
    2886:	fc 01       	movw	r30, r24
    2888:	61 50       	subi	r22, 0x01	; 1
    288a:	70 40       	sbci	r23, 0x00	; 0
    288c:	01 90       	ld	r0, Z+
    288e:	01 10       	cpse	r0, r1
    2890:	d8 f7       	brcc	.-10     	; 0x2888 <strnlen+0x2>
    2892:	80 95       	com	r24
    2894:	90 95       	com	r25
    2896:	8e 0f       	add	r24, r30
    2898:	9f 1f       	adc	r25, r31
    289a:	08 95       	ret

0000289c <fputc>:
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	fb 01       	movw	r30, r22
    28a6:	23 81       	ldd	r18, Z+3	; 0x03
    28a8:	21 fd       	sbrc	r18, 1
    28aa:	03 c0       	rjmp	.+6      	; 0x28b2 <fputc+0x16>
    28ac:	8f ef       	ldi	r24, 0xFF	; 255
    28ae:	9f ef       	ldi	r25, 0xFF	; 255
    28b0:	2c c0       	rjmp	.+88     	; 0x290a <fputc+0x6e>
    28b2:	22 ff       	sbrs	r18, 2
    28b4:	16 c0       	rjmp	.+44     	; 0x28e2 <fputc+0x46>
    28b6:	46 81       	ldd	r20, Z+6	; 0x06
    28b8:	57 81       	ldd	r21, Z+7	; 0x07
    28ba:	24 81       	ldd	r18, Z+4	; 0x04
    28bc:	35 81       	ldd	r19, Z+5	; 0x05
    28be:	42 17       	cp	r20, r18
    28c0:	53 07       	cpc	r21, r19
    28c2:	44 f4       	brge	.+16     	; 0x28d4 <fputc+0x38>
    28c4:	a0 81       	ld	r26, Z
    28c6:	b1 81       	ldd	r27, Z+1	; 0x01
    28c8:	9d 01       	movw	r18, r26
    28ca:	2f 5f       	subi	r18, 0xFF	; 255
    28cc:	3f 4f       	sbci	r19, 0xFF	; 255
    28ce:	20 83       	st	Z, r18
    28d0:	31 83       	std	Z+1, r19	; 0x01
    28d2:	8c 93       	st	X, r24
    28d4:	26 81       	ldd	r18, Z+6	; 0x06
    28d6:	37 81       	ldd	r19, Z+7	; 0x07
    28d8:	2f 5f       	subi	r18, 0xFF	; 255
    28da:	3f 4f       	sbci	r19, 0xFF	; 255
    28dc:	26 83       	std	Z+6, r18	; 0x06
    28de:	37 83       	std	Z+7, r19	; 0x07
    28e0:	14 c0       	rjmp	.+40     	; 0x290a <fputc+0x6e>
    28e2:	8b 01       	movw	r16, r22
    28e4:	ec 01       	movw	r28, r24
    28e6:	fb 01       	movw	r30, r22
    28e8:	00 84       	ldd	r0, Z+8	; 0x08
    28ea:	f1 85       	ldd	r31, Z+9	; 0x09
    28ec:	e0 2d       	mov	r30, r0
    28ee:	09 95       	icall
    28f0:	89 2b       	or	r24, r25
    28f2:	e1 f6       	brne	.-72     	; 0x28ac <fputc+0x10>
    28f4:	d8 01       	movw	r26, r16
    28f6:	16 96       	adiw	r26, 0x06	; 6
    28f8:	8d 91       	ld	r24, X+
    28fa:	9c 91       	ld	r25, X
    28fc:	17 97       	sbiw	r26, 0x07	; 7
    28fe:	01 96       	adiw	r24, 0x01	; 1
    2900:	16 96       	adiw	r26, 0x06	; 6
    2902:	8d 93       	st	X+, r24
    2904:	9c 93       	st	X, r25
    2906:	17 97       	sbiw	r26, 0x07	; 7
    2908:	ce 01       	movw	r24, r28
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	1f 91       	pop	r17
    2910:	0f 91       	pop	r16
    2912:	08 95       	ret

00002914 <__ultoa_invert>:
    2914:	fa 01       	movw	r30, r20
    2916:	aa 27       	eor	r26, r26
    2918:	28 30       	cpi	r18, 0x08	; 8
    291a:	51 f1       	breq	.+84     	; 0x2970 <__ultoa_invert+0x5c>
    291c:	20 31       	cpi	r18, 0x10	; 16
    291e:	81 f1       	breq	.+96     	; 0x2980 <__ultoa_invert+0x6c>
    2920:	e8 94       	clt
    2922:	6f 93       	push	r22
    2924:	6e 7f       	andi	r22, 0xFE	; 254
    2926:	6e 5f       	subi	r22, 0xFE	; 254
    2928:	7f 4f       	sbci	r23, 0xFF	; 255
    292a:	8f 4f       	sbci	r24, 0xFF	; 255
    292c:	9f 4f       	sbci	r25, 0xFF	; 255
    292e:	af 4f       	sbci	r26, 0xFF	; 255
    2930:	b1 e0       	ldi	r27, 0x01	; 1
    2932:	3e d0       	rcall	.+124    	; 0x29b0 <__ultoa_invert+0x9c>
    2934:	b4 e0       	ldi	r27, 0x04	; 4
    2936:	3c d0       	rcall	.+120    	; 0x29b0 <__ultoa_invert+0x9c>
    2938:	67 0f       	add	r22, r23
    293a:	78 1f       	adc	r23, r24
    293c:	89 1f       	adc	r24, r25
    293e:	9a 1f       	adc	r25, r26
    2940:	a1 1d       	adc	r26, r1
    2942:	68 0f       	add	r22, r24
    2944:	79 1f       	adc	r23, r25
    2946:	8a 1f       	adc	r24, r26
    2948:	91 1d       	adc	r25, r1
    294a:	a1 1d       	adc	r26, r1
    294c:	6a 0f       	add	r22, r26
    294e:	71 1d       	adc	r23, r1
    2950:	81 1d       	adc	r24, r1
    2952:	91 1d       	adc	r25, r1
    2954:	a1 1d       	adc	r26, r1
    2956:	20 d0       	rcall	.+64     	; 0x2998 <__ultoa_invert+0x84>
    2958:	09 f4       	brne	.+2      	; 0x295c <__ultoa_invert+0x48>
    295a:	68 94       	set
    295c:	3f 91       	pop	r19
    295e:	2a e0       	ldi	r18, 0x0A	; 10
    2960:	26 9f       	mul	r18, r22
    2962:	11 24       	eor	r1, r1
    2964:	30 19       	sub	r19, r0
    2966:	30 5d       	subi	r19, 0xD0	; 208
    2968:	31 93       	st	Z+, r19
    296a:	de f6       	brtc	.-74     	; 0x2922 <__ultoa_invert+0xe>
    296c:	cf 01       	movw	r24, r30
    296e:	08 95       	ret
    2970:	46 2f       	mov	r20, r22
    2972:	47 70       	andi	r20, 0x07	; 7
    2974:	40 5d       	subi	r20, 0xD0	; 208
    2976:	41 93       	st	Z+, r20
    2978:	b3 e0       	ldi	r27, 0x03	; 3
    297a:	0f d0       	rcall	.+30     	; 0x299a <__ultoa_invert+0x86>
    297c:	c9 f7       	brne	.-14     	; 0x2970 <__ultoa_invert+0x5c>
    297e:	f6 cf       	rjmp	.-20     	; 0x296c <__ultoa_invert+0x58>
    2980:	46 2f       	mov	r20, r22
    2982:	4f 70       	andi	r20, 0x0F	; 15
    2984:	40 5d       	subi	r20, 0xD0	; 208
    2986:	4a 33       	cpi	r20, 0x3A	; 58
    2988:	18 f0       	brcs	.+6      	; 0x2990 <__ultoa_invert+0x7c>
    298a:	49 5d       	subi	r20, 0xD9	; 217
    298c:	31 fd       	sbrc	r19, 1
    298e:	40 52       	subi	r20, 0x20	; 32
    2990:	41 93       	st	Z+, r20
    2992:	02 d0       	rcall	.+4      	; 0x2998 <__ultoa_invert+0x84>
    2994:	a9 f7       	brne	.-22     	; 0x2980 <__ultoa_invert+0x6c>
    2996:	ea cf       	rjmp	.-44     	; 0x296c <__ultoa_invert+0x58>
    2998:	b4 e0       	ldi	r27, 0x04	; 4
    299a:	a6 95       	lsr	r26
    299c:	97 95       	ror	r25
    299e:	87 95       	ror	r24
    29a0:	77 95       	ror	r23
    29a2:	67 95       	ror	r22
    29a4:	ba 95       	dec	r27
    29a6:	c9 f7       	brne	.-14     	; 0x299a <__ultoa_invert+0x86>
    29a8:	00 97       	sbiw	r24, 0x00	; 0
    29aa:	61 05       	cpc	r22, r1
    29ac:	71 05       	cpc	r23, r1
    29ae:	08 95       	ret
    29b0:	9b 01       	movw	r18, r22
    29b2:	ac 01       	movw	r20, r24
    29b4:	0a 2e       	mov	r0, r26
    29b6:	06 94       	lsr	r0
    29b8:	57 95       	ror	r21
    29ba:	47 95       	ror	r20
    29bc:	37 95       	ror	r19
    29be:	27 95       	ror	r18
    29c0:	ba 95       	dec	r27
    29c2:	c9 f7       	brne	.-14     	; 0x29b6 <__ultoa_invert+0xa2>
    29c4:	62 0f       	add	r22, r18
    29c6:	73 1f       	adc	r23, r19
    29c8:	84 1f       	adc	r24, r20
    29ca:	95 1f       	adc	r25, r21
    29cc:	a0 1d       	adc	r26, r0
    29ce:	08 95       	ret

000029d0 <_exit>:
    29d0:	f8 94       	cli

000029d2 <__stop_program>:
    29d2:	ff cf       	rjmp	.-2      	; 0x29d2 <__stop_program>
