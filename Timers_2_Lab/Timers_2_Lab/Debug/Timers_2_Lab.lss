
Timers_2_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000020  00804000  00000ca2  00000d36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000068  00804020  00804020  00000d56  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d56  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000df4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000046de  00000000  00000000  00000eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000317e  00000000  00000000  00005592  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d5  00000000  00000000  00008710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00008fe8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fb8  00000000  00000000  000091e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000665  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  0000b7fd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 69 01 	jmp	0x2d2	; 0x2d2 <__vector_45>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 28 01 	jmp	0x250	; 0x250 <__vector_47>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e2 ea       	ldi	r30, 0xA2	; 162
 108:	fc e0       	ldi	r31, 0x0C	; 12
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 32       	cpi	r26, 0x20	; 32
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a0 e2       	ldi	r26, 0x20	; 32
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	a8 38       	cpi	r26, 0x88	; 136
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 cc 00 	call	0x198	; 0x198 <main>
 12e:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_clock>:
	PORTB.DIRCLR = PIN5_bm | PIN2_bm;
}

void set_freq_TCA0(int freq) {
	// store the next frequency/CMP0 value in the buffer for smoother operation
	TCA0.SINGLE.CMP0BUF = FREQ_CMP0(freq);
 136:	88 ed       	ldi	r24, 0xD8	; 216
 138:	84 bf       	out	0x34, r24	; 52
 13a:	e0 e6       	ldi	r30, 0x60	; 96
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	90 a3       	std	Z+32, r25	; 0x20
 142:	84 bf       	out	0x34, r24	; 52
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 83       	st	Z, r24
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 14c:	84 ff       	sbrs	r24, 4
 14e:	fc cf       	rjmp	.-8      	; 0x148 <init_clock+0x12>
 150:	08 95       	ret

00000152 <init_TCA1>:
 152:	e0 e4       	ldi	r30, 0x40	; 64
 154:	fa e0       	ldi	r31, 0x0A	; 10
 156:	11 82       	std	Z+1, r1	; 0x01
 158:	8f e1       	ldi	r24, 0x1F	; 31
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	86 a3       	std	Z+38, r24	; 0x26
 15e:	97 a3       	std	Z+39, r25	; 0x27
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	82 87       	std	Z+10, r24	; 0x0a
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <init_TCA0>:
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	fa e0       	ldi	r31, 0x0A	; 10
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	91 83       	std	Z+1, r25	; 0x01
 174:	23 e8       	ldi	r18, 0x83	; 131
 176:	3e e1       	ldi	r19, 0x1E	; 30
 178:	20 a7       	std	Z+40, r18	; 0x28
 17a:	31 a7       	std	Z+41, r19	; 0x29
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	81 83       	std	Z+1, r24	; 0x01
 182:	80 81       	ld	r24, Z
 184:	8f 60       	ori	r24, 0x0F	; 15
 186:	80 83       	st	Z, r24
 188:	e0 ee       	ldi	r30, 0xE0	; 224
 18a:	f5 e0       	ldi	r31, 0x05	; 5
 18c:	86 81       	ldd	r24, Z+6	; 0x06
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	86 83       	std	Z+6, r24	; 0x06
 192:	90 93 61 04 	sts	0x0461, r25	; 0x800461 <__TEXT_REGION_LENGTH__+0x7e0461>
 196:	08 95       	ret

00000198 <main>:
volatile char btn2_flag = 0;
volatile char btn5_flag = 0;

int main(void)
{
	init_clock();
 198:	0e 94 9b 00 	call	0x136	; 0x136 <init_clock>
	init_TCA0();
 19c:	0e 94 b6 00 	call	0x16c	; 0x16c <init_TCA0>
	init_TCA1();
 1a0:	0e 94 a9 00 	call	0x152	; 0x152 <init_TCA1>
	
	
	PORTD.DIR |= 0x80;
 1a4:	e0 e6       	ldi	r30, 0x60	; 96
 1a6:	f4 e0       	ldi	r31, 0x04	; 4
 1a8:	80 81       	ld	r24, Z
 1aa:	80 68       	ori	r24, 0x80	; 128
 1ac:	80 83       	st	Z, r24
	PORTB.DIR = 0x00;
 1ae:	e0 e2       	ldi	r30, 0x20	; 32
 1b0:	f4 e0       	ldi	r31, 0x04	; 4
 1b2:	10 82       	st	Z, r1
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
 1b4:	82 89       	ldd	r24, Z+18	; 0x12
 1b6:	88 60       	ori	r24, 0x08	; 8
 1b8:	82 8b       	std	Z+18, r24	; 0x12
	
	
	//init_btn();
	uart_init(3, 9600, NULL);
 1ba:	20 e0       	ldi	r18, 0x00	; 0
 1bc:	30 e0       	ldi	r19, 0x00	; 0
 1be:	40 e8       	ldi	r20, 0x80	; 128
 1c0:	55 e2       	ldi	r21, 0x25	; 37
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	83 e0       	ldi	r24, 0x03	; 3
 1c8:	0e 94 02 03 	call	0x604	; 0x604 <uart_init>
	
	sei();
 1cc:	78 94       	sei
    while (1) 
    {
		if (tc >= 1000000) {
 1ce:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <tc>
 1d2:	90 91 2d 40 	lds	r25, 0x402D	; 0x80402d <tc+0x1>
 1d6:	a0 91 2e 40 	lds	r26, 0x402E	; 0x80402e <tc+0x2>
 1da:	b0 91 2f 40 	lds	r27, 0x402F	; 0x80402f <tc+0x3>
 1de:	80 34       	cpi	r24, 0x40	; 64
 1e0:	92 44       	sbci	r25, 0x42	; 66
 1e2:	af 40       	sbci	r26, 0x0F	; 15
 1e4:	b1 05       	cpc	r27, r1
 1e6:	98 f3       	brcs	.-26     	; 0x1ce <main+0x36>
			printf("%ld\t%ld\n", avg, tc);
 1e8:	40 91 2c 40 	lds	r20, 0x402C	; 0x80402c <tc>
 1ec:	50 91 2d 40 	lds	r21, 0x402D	; 0x80402d <tc+0x1>
 1f0:	60 91 2e 40 	lds	r22, 0x402E	; 0x80402e <tc+0x2>
 1f4:	70 91 2f 40 	lds	r23, 0x402F	; 0x80402f <tc+0x3>
 1f8:	80 91 28 40 	lds	r24, 0x4028	; 0x804028 <avg>
 1fc:	90 91 29 40 	lds	r25, 0x4029	; 0x804029 <avg+0x1>
 200:	a0 91 2a 40 	lds	r26, 0x402A	; 0x80402a <avg+0x2>
 204:	b0 91 2b 40 	lds	r27, 0x402B	; 0x80402b <avg+0x3>
 208:	7f 93       	push	r23
 20a:	6f 93       	push	r22
 20c:	5f 93       	push	r21
 20e:	4f 93       	push	r20
 210:	bf 93       	push	r27
 212:	af 93       	push	r26
 214:	9f 93       	push	r25
 216:	8f 93       	push	r24
 218:	8e e0       	ldi	r24, 0x0E	; 14
 21a:	90 e4       	ldi	r25, 0x40	; 64
 21c:	9f 93       	push	r25
 21e:	8f 93       	push	r24
 220:	0e 94 87 03 	call	0x70e	; 0x70e <printf>
			avg = 0;
 224:	10 92 28 40 	sts	0x4028, r1	; 0x804028 <avg>
 228:	10 92 29 40 	sts	0x4029, r1	; 0x804029 <avg+0x1>
 22c:	10 92 2a 40 	sts	0x402A, r1	; 0x80402a <avg+0x2>
 230:	10 92 2b 40 	sts	0x402B, r1	; 0x80402b <avg+0x3>
			tc = 0;
 234:	10 92 2c 40 	sts	0x402C, r1	; 0x80402c <tc>
 238:	10 92 2d 40 	sts	0x402D, r1	; 0x80402d <tc+0x1>
 23c:	10 92 2e 40 	sts	0x402E, r1	; 0x80402e <tc+0x2>
 240:	10 92 2f 40 	sts	0x402F, r1	; 0x80402f <tc+0x3>
 244:	8d b7       	in	r24, 0x3d	; 61
 246:	9e b7       	in	r25, 0x3e	; 62
 248:	0a 96       	adiw	r24, 0x0a	; 10
 24a:	8d bf       	out	0x3d, r24	; 61
 24c:	9e bf       	out	0x3e, r25	; 62
 24e:	bf cf       	rjmp	.-130    	; 0x1ce <main+0x36>

00000250 <__vector_47>:
		//}
		//printf("%d\t", avg);
    }
}

ISR(TCA1_OVF_vect) {
 250:	1f 92       	push	r1
 252:	0f 92       	push	r0
 254:	0f b6       	in	r0, 0x3f	; 63
 256:	0f 92       	push	r0
 258:	11 24       	eor	r1, r1
 25a:	0b b6       	in	r0, 0x3b	; 59
 25c:	0f 92       	push	r0
 25e:	2f 93       	push	r18
 260:	8f 93       	push	r24
 262:	9f 93       	push	r25
 264:	af 93       	push	r26
 266:	bf 93       	push	r27
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
	if (tc < UINT32_MAX) tc++;
 26c:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <tc>
 270:	90 91 2d 40 	lds	r25, 0x402D	; 0x80402d <tc+0x1>
 274:	a0 91 2e 40 	lds	r26, 0x402E	; 0x80402e <tc+0x2>
 278:	b0 91 2f 40 	lds	r27, 0x402F	; 0x80402f <tc+0x3>
 27c:	8f 3f       	cpi	r24, 0xFF	; 255
 27e:	9f 4f       	sbci	r25, 0xFF	; 255
 280:	af 4f       	sbci	r26, 0xFF	; 255
 282:	bf 4f       	sbci	r27, 0xFF	; 255
 284:	99 f0       	breq	.+38     	; 0x2ac <__vector_47+0x5c>
 286:	80 91 2c 40 	lds	r24, 0x402C	; 0x80402c <tc>
 28a:	90 91 2d 40 	lds	r25, 0x402D	; 0x80402d <tc+0x1>
 28e:	a0 91 2e 40 	lds	r26, 0x402E	; 0x80402e <tc+0x2>
 292:	b0 91 2f 40 	lds	r27, 0x402F	; 0x80402f <tc+0x3>
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	a1 1d       	adc	r26, r1
 29a:	b1 1d       	adc	r27, r1
 29c:	80 93 2c 40 	sts	0x402C, r24	; 0x80402c <tc>
 2a0:	90 93 2d 40 	sts	0x402D, r25	; 0x80402d <tc+0x1>
 2a4:	a0 93 2e 40 	sts	0x402E, r26	; 0x80402e <tc+0x2>
 2a8:	b0 93 2f 40 	sts	0x402F, r27	; 0x80402f <tc+0x3>
	//if (tc_btn2 < UINT32_MAX) tc_btn2++;
	//if (tc_btn5 < UINT32_MAX) tc_btn5++;
	//if (tc_btn2 >= DEBOUNCE_TIME && BTN2) btn2_flag = 1; 
	//if (tc_btn5 >= DEBOUNCE_TIME && BTN5) btn5_flag = 1;
	
	TCA1.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
 2ac:	e0 e4       	ldi	r30, 0x40	; 64
 2ae:	fa e0       	ldi	r31, 0x0A	; 10
 2b0:	83 85       	ldd	r24, Z+11	; 0x0b
 2b2:	81 60       	ori	r24, 0x01	; 1
 2b4:	83 87       	std	Z+11, r24	; 0x0b
}
 2b6:	ff 91       	pop	r31
 2b8:	ef 91       	pop	r30
 2ba:	bf 91       	pop	r27
 2bc:	af 91       	pop	r26
 2be:	9f 91       	pop	r25
 2c0:	8f 91       	pop	r24
 2c2:	2f 91       	pop	r18
 2c4:	0f 90       	pop	r0
 2c6:	0b be       	out	0x3b, r0	; 59
 2c8:	0f 90       	pop	r0
 2ca:	0f be       	out	0x3f, r0	; 63
 2cc:	0f 90       	pop	r0
 2ce:	1f 90       	pop	r1
 2d0:	18 95       	reti

000002d2 <__vector_45>:

ISR(PORTB_PORT_vect) {
 2d2:	1f 92       	push	r1
 2d4:	0f 92       	push	r0
 2d6:	0f b6       	in	r0, 0x3f	; 63
 2d8:	0f 92       	push	r0
 2da:	11 24       	eor	r1, r1
 2dc:	0b b6       	in	r0, 0x3b	; 59
 2de:	0f 92       	push	r0
 2e0:	2f 93       	push	r18
 2e2:	8f 93       	push	r24
 2e4:	9f 93       	push	r25
 2e6:	af 93       	push	r26
 2e8:	bf 93       	push	r27
 2ea:	ef 93       	push	r30
 2ec:	ff 93       	push	r31
	if (PORTB.INTFLAGS & PIN5_bm) {
 2ee:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
 2f2:	85 ff       	sbrs	r24, 5
 2f4:	1a c0       	rjmp	.+52     	; 0x32a <__vector_45+0x58>
		PORTB.INTFLAGS |= PIN5_bm;
 2f6:	e0 e2       	ldi	r30, 0x20	; 32
 2f8:	f4 e0       	ldi	r31, 0x04	; 4
 2fa:	81 85       	ldd	r24, Z+9	; 0x09
 2fc:	80 62       	ori	r24, 0x20	; 32
 2fe:	81 87       	std	Z+9, r24	; 0x09
		if (tc_btn5 >= DEBOUNCE_TIME) tc_btn5 = 0;
 300:	80 91 20 40 	lds	r24, 0x4020	; 0x804020 <__data_end>
 304:	90 91 21 40 	lds	r25, 0x4021	; 0x804021 <__data_end+0x1>
 308:	a0 91 22 40 	lds	r26, 0x4022	; 0x804022 <__data_end+0x2>
 30c:	b0 91 23 40 	lds	r27, 0x4023	; 0x804023 <__data_end+0x3>
 310:	80 31       	cpi	r24, 0x10	; 16
 312:	97 42       	sbci	r25, 0x27	; 39
 314:	a1 05       	cpc	r26, r1
 316:	b1 05       	cpc	r27, r1
 318:	40 f0       	brcs	.+16     	; 0x32a <__vector_45+0x58>
 31a:	10 92 20 40 	sts	0x4020, r1	; 0x804020 <__data_end>
 31e:	10 92 21 40 	sts	0x4021, r1	; 0x804021 <__data_end+0x1>
 322:	10 92 22 40 	sts	0x4022, r1	; 0x804022 <__data_end+0x2>
 326:	10 92 23 40 	sts	0x4023, r1	; 0x804023 <__data_end+0x3>
	}
	if (PORTB.INTFLAGS & PIN2_bm) {
 32a:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
 32e:	82 ff       	sbrs	r24, 2
 330:	1a c0       	rjmp	.+52     	; 0x366 <__vector_45+0x94>
		PORTB.INTFLAGS |= PIN2_bm;
 332:	e0 e2       	ldi	r30, 0x20	; 32
 334:	f4 e0       	ldi	r31, 0x04	; 4
 336:	81 85       	ldd	r24, Z+9	; 0x09
 338:	84 60       	ori	r24, 0x04	; 4
 33a:	81 87       	std	Z+9, r24	; 0x09
		if (tc_btn2 >= DEBOUNCE_TIME) tc_btn2 = 0;
 33c:	80 91 24 40 	lds	r24, 0x4024	; 0x804024 <tc_btn2>
 340:	90 91 25 40 	lds	r25, 0x4025	; 0x804025 <tc_btn2+0x1>
 344:	a0 91 26 40 	lds	r26, 0x4026	; 0x804026 <tc_btn2+0x2>
 348:	b0 91 27 40 	lds	r27, 0x4027	; 0x804027 <tc_btn2+0x3>
 34c:	80 31       	cpi	r24, 0x10	; 16
 34e:	97 42       	sbci	r25, 0x27	; 39
 350:	a1 05       	cpc	r26, r1
 352:	b1 05       	cpc	r27, r1
 354:	40 f0       	brcs	.+16     	; 0x366 <__vector_45+0x94>
 356:	10 92 24 40 	sts	0x4024, r1	; 0x804024 <tc_btn2>
 35a:	10 92 25 40 	sts	0x4025, r1	; 0x804025 <tc_btn2+0x1>
 35e:	10 92 26 40 	sts	0x4026, r1	; 0x804026 <tc_btn2+0x2>
 362:	10 92 27 40 	sts	0x4027, r1	; 0x804027 <tc_btn2+0x3>
	}
}
 366:	ff 91       	pop	r31
 368:	ef 91       	pop	r30
 36a:	bf 91       	pop	r27
 36c:	af 91       	pop	r26
 36e:	9f 91       	pop	r25
 370:	8f 91       	pop	r24
 372:	2f 91       	pop	r18
 374:	0f 90       	pop	r0
 376:	0b be       	out	0x3b, r0	; 59
 378:	0f 90       	pop	r0
 37a:	0f be       	out	0x3f, r0	; 63
 37c:	0f 90       	pop	r0
 37e:	1f 90       	pop	r1
 380:	18 95       	reti

00000382 <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
 382:	cf 93       	push	r28
 384:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
 386:	81 11       	cpse	r24, r1
 388:	06 c0       	rjmp	.+12     	; 0x396 <usart_init+0x14>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	d8 e0       	ldi	r29, 0x08	; 8
 394:	19 c0       	rjmp	.+50     	; 0x3c8 <usart_init+0x46>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	29 f4       	brne	.+10     	; 0x3a4 <usart_init+0x22>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
 39a:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
 39e:	c0 e2       	ldi	r28, 0x20	; 32
 3a0:	d8 e0       	ldi	r29, 0x08	; 8
 3a2:	12 c0       	rjmp	.+36     	; 0x3c8 <usart_init+0x46>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	31 f4       	brne	.+12     	; 0x3b4 <usart_init+0x32>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
 3ae:	c0 e4       	ldi	r28, 0x40	; 64
 3b0:	d8 e0       	ldi	r29, 0x08	; 8
 3b2:	0a c0       	rjmp	.+20     	; 0x3c8 <usart_init+0x46>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
 3b4:	83 30       	cpi	r24, 0x03	; 3
 3b6:	31 f4       	brne	.+12     	; 0x3c4 <usart_init+0x42>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
 3be:	c0 e6       	ldi	r28, 0x60	; 96
 3c0:	d8 e0       	ldi	r29, 0x08	; 8
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <usart_init+0x46>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
 3c4:	c0 e0       	ldi	r28, 0x00	; 0
 3c6:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
 3c8:	db 01       	movw	r26, r22
 3ca:	ca 01       	movw	r24, r20
 3cc:	88 0f       	add	r24, r24
 3ce:	99 1f       	adc	r25, r25
 3d0:	aa 1f       	adc	r26, r26
 3d2:	bb 1f       	adc	r27, r27
 3d4:	88 0f       	add	r24, r24
 3d6:	99 1f       	adc	r25, r25
 3d8:	aa 1f       	adc	r26, r26
 3da:	bb 1f       	adc	r27, r27
 3dc:	9c 01       	movw	r18, r24
 3de:	ad 01       	movw	r20, r26
 3e0:	22 0f       	add	r18, r18
 3e2:	33 1f       	adc	r19, r19
 3e4:	44 1f       	adc	r20, r20
 3e6:	55 1f       	adc	r21, r21
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	44 1f       	adc	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	60 e0       	ldi	r22, 0x00	; 0
 3f2:	70 e0       	ldi	r23, 0x00	; 0
 3f4:	89 e0       	ldi	r24, 0x09	; 9
 3f6:	9d e3       	ldi	r25, 0x3D	; 61
 3f8:	0e 94 23 03 	call	0x646	; 0x646 <__udivmodsi4>
 3fc:	28 87       	std	Y+8, r18	; 0x08
 3fe:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
 400:	8e 81       	ldd	r24, Y+6	; 0x06
 402:	80 6c       	ori	r24, 0xC0	; 192
 404:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
 406:	ce 01       	movw	r24, r28
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
 40e:	fc 01       	movw	r30, r24
 410:	62 83       	std	Z+2, r22	; 0x02
 412:	08 95       	ret

00000414 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
 414:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
 416:	94 81       	ldd	r25, Z+4	; 0x04
 418:	95 ff       	sbrs	r25, 5
 41a:	fd cf       	rjmp	.-6      	; 0x416 <usart_wait_until_transmit_ready+0x2>
}
 41c:	08 95       	ret

0000041e <usart_receive_data>:

int usart_receive_data(void* ptr)
{
 41e:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
 420:	94 81       	ldd	r25, Z+4	; 0x04
 422:	99 23       	and	r25, r25
 424:	ec f7       	brge	.-6      	; 0x420 <usart_receive_data+0x2>
	return (usart->RXDATAL);
 426:	80 81       	ld	r24, Z
 428:	90 e0       	ldi	r25, 0x00	; 0
 42a:	08 95       	ret

0000042c <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	c8 2f       	mov	r28, r24
 434:	8b 01       	movw	r16, r22
	if (c == '\a') {
 436:	87 30       	cpi	r24, 0x07	; 7
 438:	69 f4       	brne	.+26     	; 0x454 <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
 43a:	20 91 86 40 	lds	r18, 0x4086	; 0x804086 <__iob+0x4>
 43e:	30 91 87 40 	lds	r19, 0x4087	; 0x804087 <__iob+0x5>
 442:	47 e0       	ldi	r20, 0x07	; 7
 444:	50 e0       	ldi	r21, 0x00	; 0
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	70 e0       	ldi	r23, 0x00	; 0
 44a:	87 e1       	ldi	r24, 0x17	; 23
 44c:	90 e4       	ldi	r25, 0x40	; 64
 44e:	0e 94 45 03 	call	0x68a	; 0x68a <fwrite>
		return 0;
 452:	0f c0       	rjmp	.+30     	; 0x472 <uart_putchar+0x46>
	}

	if (c == '\n') {
 454:	8a 30       	cpi	r24, 0x0A	; 10
 456:	19 f4       	brne	.+6      	; 0x45e <uart_putchar+0x32>
		uart_putchar('\r', stream);
 458:	8d e0       	ldi	r24, 0x0D	; 13
 45a:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
 45e:	f8 01       	movw	r30, r16
 460:	04 85       	ldd	r16, Z+12	; 0x0c
 462:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
 464:	c8 01       	movw	r24, r16
 466:	0e 94 0a 02 	call	0x414	; 0x414 <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
 46a:	6c 2f       	mov	r22, r28
 46c:	c8 01       	movw	r24, r16
 46e:	0e 94 07 02 	call	0x40e	; 0x40e <usart_transmit_data>

	return 0;
}
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	08 95       	ret

0000047e <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
 48a:	20 91 80 40 	lds	r18, 0x4080	; 0x804080 <rxp.1995>
 48e:	30 91 81 40 	lds	r19, 0x4081	; 0x804081 <rxp.1995+0x1>
 492:	23 2b       	or	r18, r19
 494:	09 f0       	breq	.+2      	; 0x498 <uart_getchar+0x1a>
 496:	9a c0       	rjmp	.+308    	; 0x5cc <uart_getchar+0x14e>
 498:	8c 01       	movw	r16, r24
 49a:	c0 e3       	ldi	r28, 0x30	; 48
 49c:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
 49e:	f8 01       	movw	r30, r16
 4a0:	84 85       	ldd	r24, Z+12	; 0x0c
 4a2:	95 85       	ldd	r25, Z+13	; 0x0d
 4a4:	0e 94 0f 02 	call	0x41e	; 0x41e <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
 4a8:	8d 30       	cpi	r24, 0x0D	; 13
 4aa:	09 f4       	brne	.+2      	; 0x4ae <uart_getchar+0x30>
				c = '\n';
 4ac:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
 4ae:	8a 30       	cpi	r24, 0x0A	; 10
 4b0:	59 f4       	brne	.+22     	; 0x4c8 <uart_getchar+0x4a>
			    *cp = c;
 4b2:	88 83       	st	Y, r24
				uart_putchar(c, stream);
 4b4:	b8 01       	movw	r22, r16
 4b6:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
			    rxp = b;
 4ba:	80 e3       	ldi	r24, 0x30	; 48
 4bc:	90 e4       	ldi	r25, 0x40	; 64
 4be:	80 93 80 40 	sts	0x4080, r24	; 0x804080 <rxp.1995>
 4c2:	90 93 81 40 	sts	0x4081, r25	; 0x804081 <rxp.1995+0x1>
				break;
 4c6:	82 c0       	rjmp	.+260    	; 0x5cc <uart_getchar+0x14e>
			}
			else if (c == '\t')
 4c8:	89 30       	cpi	r24, 0x09	; 9
 4ca:	09 f4       	brne	.+2      	; 0x4ce <uart_getchar+0x50>
				c = ' ';
 4cc:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 4ce:	90 ee       	ldi	r25, 0xE0	; 224
 4d0:	98 0f       	add	r25, r24
 4d2:	9f 35       	cpi	r25, 0x5F	; 95
 4d4:	10 f0       	brcs	.+4      	; 0x4da <uart_getchar+0x5c>
 4d6:	80 3a       	cpi	r24, 0xA0	; 160
 4d8:	98 f0       	brcs	.+38     	; 0x500 <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
 4da:	f0 e4       	ldi	r31, 0x40	; 64
 4dc:	cf 37       	cpi	r28, 0x7F	; 127
 4de:	df 07       	cpc	r29, r31
 4e0:	29 f4       	brne	.+10     	; 0x4ec <uart_getchar+0x6e>
					uart_putchar('\a', stream);
 4e2:	b8 01       	movw	r22, r16
 4e4:	87 e0       	ldi	r24, 0x07	; 7
 4e6:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
 4ea:	d9 cf       	rjmp	.-78     	; 0x49e <uart_getchar+0x20>
				else {
					*cp++ = c;
 4ec:	7e 01       	movw	r14, r28
 4ee:	9f ef       	ldi	r25, 0xFF	; 255
 4f0:	e9 1a       	sub	r14, r25
 4f2:	f9 0a       	sbc	r15, r25
 4f4:	88 83       	st	Y, r24
					uart_putchar(c, stream);
 4f6:	b8 01       	movw	r22, r16
 4f8:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
 4fc:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
 4fe:	cf cf       	rjmp	.-98     	; 0x49e <uart_getchar+0x20>
			}

			switch (c) {
 500:	82 31       	cpi	r24, 0x12	; 18
 502:	19 f1       	breq	.+70     	; 0x54a <uart_getchar+0xcc>
 504:	30 f4       	brcc	.+12     	; 0x512 <uart_getchar+0x94>
 506:	83 30       	cpi	r24, 0x03	; 3
 508:	09 f4       	brne	.+2      	; 0x50c <uart_getchar+0x8e>
 50a:	73 c0       	rjmp	.+230    	; 0x5f2 <uart_getchar+0x174>
 50c:	88 30       	cpi	r24, 0x08	; 8
 50e:	49 f0       	breq	.+18     	; 0x522 <uart_getchar+0xa4>
 510:	c6 cf       	rjmp	.-116    	; 0x49e <uart_getchar+0x20>
 512:	87 31       	cpi	r24, 0x17	; 23
 514:	09 f4       	brne	.+2      	; 0x518 <uart_getchar+0x9a>
 516:	4e c0       	rjmp	.+156    	; 0x5b4 <uart_getchar+0x136>
 518:	8f 37       	cpi	r24, 0x7F	; 127
 51a:	19 f0       	breq	.+6      	; 0x522 <uart_getchar+0xa4>
 51c:	85 31       	cpi	r24, 0x15	; 21
 51e:	b9 f1       	breq	.+110    	; 0x58e <uart_getchar+0x110>
 520:	be cf       	rjmp	.-132    	; 0x49e <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
 522:	e0 e4       	ldi	r30, 0x40	; 64
 524:	c0 33       	cpi	r28, 0x30	; 48
 526:	de 07       	cpc	r29, r30
 528:	09 f0       	breq	.+2      	; 0x52c <uart_getchar+0xae>
 52a:	08 f4       	brcc	.+2      	; 0x52e <uart_getchar+0xb0>
 52c:	b8 cf       	rjmp	.-144    	; 0x49e <uart_getchar+0x20>
						uart_putchar('\b', stream);
 52e:	b8 01       	movw	r22, r16
 530:	88 e0       	ldi	r24, 0x08	; 8
 532:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar(' ', stream);
 536:	b8 01       	movw	r22, r16
 538:	80 e2       	ldi	r24, 0x20	; 32
 53a:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar('\b', stream);
 53e:	b8 01       	movw	r22, r16
 540:	88 e0       	ldi	r24, 0x08	; 8
 542:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						cp--;
 546:	21 97       	sbiw	r28, 0x01	; 1
 548:	aa cf       	rjmp	.-172    	; 0x49e <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
 54a:	b8 01       	movw	r22, r16
 54c:	8d e0       	ldi	r24, 0x0D	; 13
 54e:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
 552:	0f 2e       	mov	r0, r31
 554:	f0 e3       	ldi	r31, 0x30	; 48
 556:	ef 2e       	mov	r14, r31
 558:	f0 e4       	ldi	r31, 0x40	; 64
 55a:	ff 2e       	mov	r15, r31
 55c:	f0 2d       	mov	r31, r0
 55e:	06 c0       	rjmp	.+12     	; 0x56c <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
 560:	b8 01       	movw	r22, r16
 562:	f7 01       	movw	r30, r14
 564:	81 91       	ld	r24, Z+
 566:	7f 01       	movw	r14, r30
 568:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
 56c:	ec 16       	cp	r14, r28
 56e:	fd 06       	cpc	r15, r29
 570:	b8 f3       	brcs	.-18     	; 0x560 <uart_getchar+0xe2>
 572:	95 cf       	rjmp	.-214    	; 0x49e <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
 574:	b8 01       	movw	r22, r16
 576:	88 e0       	ldi	r24, 0x08	; 8
 578:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar(' ', stream);
 57c:	b8 01       	movw	r22, r16
 57e:	80 e2       	ldi	r24, 0x20	; 32
 580:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar('\b', stream);
 584:	b8 01       	movw	r22, r16
 586:	88 e0       	ldi	r24, 0x08	; 8
 588:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						cp--;
 58c:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 58e:	f0 e4       	ldi	r31, 0x40	; 64
 590:	c0 33       	cpi	r28, 0x30	; 48
 592:	df 07       	cpc	r29, r31
 594:	09 f0       	breq	.+2      	; 0x598 <uart_getchar+0x11a>
 596:	70 f7       	brcc	.-36     	; 0x574 <uart_getchar+0xf6>
 598:	82 cf       	rjmp	.-252    	; 0x49e <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
 59a:	b8 01       	movw	r22, r16
 59c:	88 e0       	ldi	r24, 0x08	; 8
 59e:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar(' ', stream);
 5a2:	b8 01       	movw	r22, r16
 5a4:	80 e2       	ldi	r24, 0x20	; 32
 5a6:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						uart_putchar('\b', stream);
 5aa:	b8 01       	movw	r22, r16
 5ac:	88 e0       	ldi	r24, 0x08	; 8
 5ae:	0e 94 16 02 	call	0x42c	; 0x42c <uart_putchar>
						cp--;
 5b2:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 5b4:	80 e4       	ldi	r24, 0x40	; 64
 5b6:	c0 33       	cpi	r28, 0x30	; 48
 5b8:	d8 07       	cpc	r29, r24
 5ba:	09 f0       	breq	.+2      	; 0x5be <uart_getchar+0x140>
 5bc:	08 f4       	brcc	.+2      	; 0x5c0 <uart_getchar+0x142>
 5be:	6f cf       	rjmp	.-290    	; 0x49e <uart_getchar+0x20>
 5c0:	fe 01       	movw	r30, r28
 5c2:	31 97       	sbiw	r30, 0x01	; 1
 5c4:	80 81       	ld	r24, Z
 5c6:	80 32       	cpi	r24, 0x20	; 32
 5c8:	41 f7       	brne	.-48     	; 0x59a <uart_getchar+0x11c>
 5ca:	69 cf       	rjmp	.-302    	; 0x49e <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
 5cc:	e0 91 80 40 	lds	r30, 0x4080	; 0x804080 <rxp.1995>
 5d0:	f0 91 81 40 	lds	r31, 0x4081	; 0x804081 <rxp.1995+0x1>
 5d4:	cf 01       	movw	r24, r30
 5d6:	01 96       	adiw	r24, 0x01	; 1
 5d8:	80 93 80 40 	sts	0x4080, r24	; 0x804080 <rxp.1995>
 5dc:	90 93 81 40 	sts	0x4081, r25	; 0x804081 <rxp.1995+0x1>
 5e0:	80 81       	ld	r24, Z
	if (c == '\n')
 5e2:	8a 30       	cpi	r24, 0x0A	; 10
 5e4:	21 f4       	brne	.+8      	; 0x5ee <uart_getchar+0x170>
		rxp = 0;
 5e6:	10 92 80 40 	sts	0x4080, r1	; 0x804080 <rxp.1995>
 5ea:	10 92 81 40 	sts	0x4081, r1	; 0x804081 <rxp.1995+0x1>

	return c;
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
 5f2:	8f ef       	ldi	r24, 0xFF	; 255
 5f4:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	1f 91       	pop	r17
 5fc:	0f 91       	pop	r16
 5fe:	ff 90       	pop	r15
 600:	ef 90       	pop	r14
 602:	08 95       	ret

00000604 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	e9 01       	movw	r28, r18
	if (stream) {
 60a:	20 97       	sbiw	r28, 0x00	; 0
 60c:	49 f0       	breq	.+18     	; 0x620 <uart_init+0x1c>
		*stream = uartFile;
 60e:	9e e0       	ldi	r25, 0x0E	; 14
 610:	e0 e0       	ldi	r30, 0x00	; 0
 612:	f0 e4       	ldi	r31, 0x40	; 64
 614:	d9 01       	movw	r26, r18
 616:	01 90       	ld	r0, Z+
 618:	0d 92       	st	X+, r0
 61a:	9a 95       	dec	r25
 61c:	e1 f7       	brne	.-8      	; 0x616 <uart_init+0x12>
 61e:	0b c0       	rjmp	.+22     	; 0x636 <uart_init+0x32>
	} else {
		stdout = &uartFile;
 620:	e2 e8       	ldi	r30, 0x82	; 130
 622:	f0 e4       	ldi	r31, 0x40	; 64
 624:	20 e0       	ldi	r18, 0x00	; 0
 626:	30 e4       	ldi	r19, 0x40	; 64
 628:	22 83       	std	Z+2, r18	; 0x02
 62a:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
 62c:	20 83       	st	Z, r18
 62e:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
 630:	24 83       	std	Z+4, r18	; 0x04
 632:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
 634:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
 636:	0e 94 c1 01 	call	0x382	; 0x382 <usart_init>
	fdev_set_udata(stream, usart);
 63a:	8c 87       	std	Y+12, r24	; 0x0c
 63c:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
 63e:	ce 01       	movw	r24, r28
 640:	df 91       	pop	r29
 642:	cf 91       	pop	r28
 644:	08 95       	ret

00000646 <__udivmodsi4>:
 646:	a1 e2       	ldi	r26, 0x21	; 33
 648:	1a 2e       	mov	r1, r26
 64a:	aa 1b       	sub	r26, r26
 64c:	bb 1b       	sub	r27, r27
 64e:	fd 01       	movw	r30, r26
 650:	0d c0       	rjmp	.+26     	; 0x66c <__udivmodsi4_ep>

00000652 <__udivmodsi4_loop>:
 652:	aa 1f       	adc	r26, r26
 654:	bb 1f       	adc	r27, r27
 656:	ee 1f       	adc	r30, r30
 658:	ff 1f       	adc	r31, r31
 65a:	a2 17       	cp	r26, r18
 65c:	b3 07       	cpc	r27, r19
 65e:	e4 07       	cpc	r30, r20
 660:	f5 07       	cpc	r31, r21
 662:	20 f0       	brcs	.+8      	; 0x66c <__udivmodsi4_ep>
 664:	a2 1b       	sub	r26, r18
 666:	b3 0b       	sbc	r27, r19
 668:	e4 0b       	sbc	r30, r20
 66a:	f5 0b       	sbc	r31, r21

0000066c <__udivmodsi4_ep>:
 66c:	66 1f       	adc	r22, r22
 66e:	77 1f       	adc	r23, r23
 670:	88 1f       	adc	r24, r24
 672:	99 1f       	adc	r25, r25
 674:	1a 94       	dec	r1
 676:	69 f7       	brne	.-38     	; 0x652 <__udivmodsi4_loop>
 678:	60 95       	com	r22
 67a:	70 95       	com	r23
 67c:	80 95       	com	r24
 67e:	90 95       	com	r25
 680:	9b 01       	movw	r18, r22
 682:	ac 01       	movw	r20, r24
 684:	bd 01       	movw	r22, r26
 686:	cf 01       	movw	r24, r30
 688:	08 95       	ret

0000068a <fwrite>:
 68a:	8f 92       	push	r8
 68c:	9f 92       	push	r9
 68e:	af 92       	push	r10
 690:	bf 92       	push	r11
 692:	cf 92       	push	r12
 694:	df 92       	push	r13
 696:	ef 92       	push	r14
 698:	ff 92       	push	r15
 69a:	0f 93       	push	r16
 69c:	1f 93       	push	r17
 69e:	cf 93       	push	r28
 6a0:	df 93       	push	r29
 6a2:	5b 01       	movw	r10, r22
 6a4:	4a 01       	movw	r8, r20
 6a6:	79 01       	movw	r14, r18
 6a8:	d9 01       	movw	r26, r18
 6aa:	13 96       	adiw	r26, 0x03	; 3
 6ac:	2c 91       	ld	r18, X
 6ae:	21 ff       	sbrs	r18, 1
 6b0:	1d c0       	rjmp	.+58     	; 0x6ec <fwrite+0x62>
 6b2:	c0 e0       	ldi	r28, 0x00	; 0
 6b4:	d0 e0       	ldi	r29, 0x00	; 0
 6b6:	c8 15       	cp	r28, r8
 6b8:	d9 05       	cpc	r29, r9
 6ba:	d9 f0       	breq	.+54     	; 0x6f2 <fwrite+0x68>
 6bc:	8c 01       	movw	r16, r24
 6be:	6c 01       	movw	r12, r24
 6c0:	ca 0c       	add	r12, r10
 6c2:	db 1c       	adc	r13, r11
 6c4:	c8 01       	movw	r24, r16
 6c6:	0c 15       	cp	r16, r12
 6c8:	1d 05       	cpc	r17, r13
 6ca:	71 f0       	breq	.+28     	; 0x6e8 <fwrite+0x5e>
 6cc:	0f 5f       	subi	r16, 0xFF	; 255
 6ce:	1f 4f       	sbci	r17, 0xFF	; 255
 6d0:	d7 01       	movw	r26, r14
 6d2:	18 96       	adiw	r26, 0x08	; 8
 6d4:	ed 91       	ld	r30, X+
 6d6:	fc 91       	ld	r31, X
 6d8:	19 97       	sbiw	r26, 0x09	; 9
 6da:	b7 01       	movw	r22, r14
 6dc:	dc 01       	movw	r26, r24
 6de:	8c 91       	ld	r24, X
 6e0:	09 95       	icall
 6e2:	89 2b       	or	r24, r25
 6e4:	79 f3       	breq	.-34     	; 0x6c4 <fwrite+0x3a>
 6e6:	05 c0       	rjmp	.+10     	; 0x6f2 <fwrite+0x68>
 6e8:	21 96       	adiw	r28, 0x01	; 1
 6ea:	e5 cf       	rjmp	.-54     	; 0x6b6 <fwrite+0x2c>
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	01 c0       	rjmp	.+2      	; 0x6f4 <fwrite+0x6a>
 6f2:	ce 01       	movw	r24, r28
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
 700:	df 90       	pop	r13
 702:	cf 90       	pop	r12
 704:	bf 90       	pop	r11
 706:	af 90       	pop	r10
 708:	9f 90       	pop	r9
 70a:	8f 90       	pop	r8
 70c:	08 95       	ret

0000070e <printf>:
 70e:	cf 93       	push	r28
 710:	df 93       	push	r29
 712:	cd b7       	in	r28, 0x3d	; 61
 714:	de b7       	in	r29, 0x3e	; 62
 716:	ae 01       	movw	r20, r28
 718:	4b 5f       	subi	r20, 0xFB	; 251
 71a:	5f 4f       	sbci	r21, 0xFF	; 255
 71c:	fa 01       	movw	r30, r20
 71e:	61 91       	ld	r22, Z+
 720:	71 91       	ld	r23, Z+
 722:	af 01       	movw	r20, r30
 724:	80 91 84 40 	lds	r24, 0x4084	; 0x804084 <__iob+0x2>
 728:	90 91 85 40 	lds	r25, 0x4085	; 0x804085 <__iob+0x3>
 72c:	0e 94 9b 03 	call	0x736	; 0x736 <vfprintf>
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <vfprintf>:
 736:	2f 92       	push	r2
 738:	3f 92       	push	r3
 73a:	4f 92       	push	r4
 73c:	5f 92       	push	r5
 73e:	6f 92       	push	r6
 740:	7f 92       	push	r7
 742:	8f 92       	push	r8
 744:	9f 92       	push	r9
 746:	af 92       	push	r10
 748:	bf 92       	push	r11
 74a:	cf 92       	push	r12
 74c:	df 92       	push	r13
 74e:	ef 92       	push	r14
 750:	ff 92       	push	r15
 752:	0f 93       	push	r16
 754:	1f 93       	push	r17
 756:	cf 93       	push	r28
 758:	df 93       	push	r29
 75a:	cd b7       	in	r28, 0x3d	; 61
 75c:	de b7       	in	r29, 0x3e	; 62
 75e:	2b 97       	sbiw	r28, 0x0b	; 11
 760:	cd bf       	out	0x3d, r28	; 61
 762:	de bf       	out	0x3e, r29	; 62
 764:	6c 01       	movw	r12, r24
 766:	7b 01       	movw	r14, r22
 768:	8a 01       	movw	r16, r20
 76a:	fc 01       	movw	r30, r24
 76c:	16 82       	std	Z+6, r1	; 0x06
 76e:	17 82       	std	Z+7, r1	; 0x07
 770:	83 81       	ldd	r24, Z+3	; 0x03
 772:	81 ff       	sbrs	r24, 1
 774:	cc c1       	rjmp	.+920    	; 0xb0e <vfprintf+0x3d8>
 776:	ce 01       	movw	r24, r28
 778:	01 96       	adiw	r24, 0x01	; 1
 77a:	3c 01       	movw	r6, r24
 77c:	f6 01       	movw	r30, r12
 77e:	93 81       	ldd	r25, Z+3	; 0x03
 780:	f7 01       	movw	r30, r14
 782:	93 fd       	sbrc	r25, 3
 784:	85 91       	lpm	r24, Z+
 786:	93 ff       	sbrs	r25, 3
 788:	81 91       	ld	r24, Z+
 78a:	7f 01       	movw	r14, r30
 78c:	88 23       	and	r24, r24
 78e:	09 f4       	brne	.+2      	; 0x792 <vfprintf+0x5c>
 790:	ba c1       	rjmp	.+884    	; 0xb06 <vfprintf+0x3d0>
 792:	85 32       	cpi	r24, 0x25	; 37
 794:	39 f4       	brne	.+14     	; 0x7a4 <vfprintf+0x6e>
 796:	93 fd       	sbrc	r25, 3
 798:	85 91       	lpm	r24, Z+
 79a:	93 ff       	sbrs	r25, 3
 79c:	81 91       	ld	r24, Z+
 79e:	7f 01       	movw	r14, r30
 7a0:	85 32       	cpi	r24, 0x25	; 37
 7a2:	29 f4       	brne	.+10     	; 0x7ae <vfprintf+0x78>
 7a4:	b6 01       	movw	r22, r12
 7a6:	90 e0       	ldi	r25, 0x00	; 0
 7a8:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 7ac:	e7 cf       	rjmp	.-50     	; 0x77c <vfprintf+0x46>
 7ae:	91 2c       	mov	r9, r1
 7b0:	21 2c       	mov	r2, r1
 7b2:	31 2c       	mov	r3, r1
 7b4:	ff e1       	ldi	r31, 0x1F	; 31
 7b6:	f3 15       	cp	r31, r3
 7b8:	d8 f0       	brcs	.+54     	; 0x7f0 <vfprintf+0xba>
 7ba:	8b 32       	cpi	r24, 0x2B	; 43
 7bc:	79 f0       	breq	.+30     	; 0x7dc <vfprintf+0xa6>
 7be:	38 f4       	brcc	.+14     	; 0x7ce <vfprintf+0x98>
 7c0:	80 32       	cpi	r24, 0x20	; 32
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0xac>
 7c4:	83 32       	cpi	r24, 0x23	; 35
 7c6:	a1 f4       	brne	.+40     	; 0x7f0 <vfprintf+0xba>
 7c8:	23 2d       	mov	r18, r3
 7ca:	20 61       	ori	r18, 0x10	; 16
 7cc:	1d c0       	rjmp	.+58     	; 0x808 <vfprintf+0xd2>
 7ce:	8d 32       	cpi	r24, 0x2D	; 45
 7d0:	61 f0       	breq	.+24     	; 0x7ea <vfprintf+0xb4>
 7d2:	80 33       	cpi	r24, 0x30	; 48
 7d4:	69 f4       	brne	.+26     	; 0x7f0 <vfprintf+0xba>
 7d6:	23 2d       	mov	r18, r3
 7d8:	21 60       	ori	r18, 0x01	; 1
 7da:	16 c0       	rjmp	.+44     	; 0x808 <vfprintf+0xd2>
 7dc:	83 2d       	mov	r24, r3
 7de:	82 60       	ori	r24, 0x02	; 2
 7e0:	38 2e       	mov	r3, r24
 7e2:	e3 2d       	mov	r30, r3
 7e4:	e4 60       	ori	r30, 0x04	; 4
 7e6:	3e 2e       	mov	r3, r30
 7e8:	2a c0       	rjmp	.+84     	; 0x83e <vfprintf+0x108>
 7ea:	f3 2d       	mov	r31, r3
 7ec:	f8 60       	ori	r31, 0x08	; 8
 7ee:	1d c0       	rjmp	.+58     	; 0x82a <vfprintf+0xf4>
 7f0:	37 fc       	sbrc	r3, 7
 7f2:	2d c0       	rjmp	.+90     	; 0x84e <vfprintf+0x118>
 7f4:	20 ed       	ldi	r18, 0xD0	; 208
 7f6:	28 0f       	add	r18, r24
 7f8:	2a 30       	cpi	r18, 0x0A	; 10
 7fa:	40 f0       	brcs	.+16     	; 0x80c <vfprintf+0xd6>
 7fc:	8e 32       	cpi	r24, 0x2E	; 46
 7fe:	b9 f4       	brne	.+46     	; 0x82e <vfprintf+0xf8>
 800:	36 fc       	sbrc	r3, 6
 802:	81 c1       	rjmp	.+770    	; 0xb06 <vfprintf+0x3d0>
 804:	23 2d       	mov	r18, r3
 806:	20 64       	ori	r18, 0x40	; 64
 808:	32 2e       	mov	r3, r18
 80a:	19 c0       	rjmp	.+50     	; 0x83e <vfprintf+0x108>
 80c:	36 fe       	sbrs	r3, 6
 80e:	06 c0       	rjmp	.+12     	; 0x81c <vfprintf+0xe6>
 810:	8a e0       	ldi	r24, 0x0A	; 10
 812:	98 9e       	mul	r9, r24
 814:	20 0d       	add	r18, r0
 816:	11 24       	eor	r1, r1
 818:	92 2e       	mov	r9, r18
 81a:	11 c0       	rjmp	.+34     	; 0x83e <vfprintf+0x108>
 81c:	ea e0       	ldi	r30, 0x0A	; 10
 81e:	2e 9e       	mul	r2, r30
 820:	20 0d       	add	r18, r0
 822:	11 24       	eor	r1, r1
 824:	22 2e       	mov	r2, r18
 826:	f3 2d       	mov	r31, r3
 828:	f0 62       	ori	r31, 0x20	; 32
 82a:	3f 2e       	mov	r3, r31
 82c:	08 c0       	rjmp	.+16     	; 0x83e <vfprintf+0x108>
 82e:	8c 36       	cpi	r24, 0x6C	; 108
 830:	21 f4       	brne	.+8      	; 0x83a <vfprintf+0x104>
 832:	83 2d       	mov	r24, r3
 834:	80 68       	ori	r24, 0x80	; 128
 836:	38 2e       	mov	r3, r24
 838:	02 c0       	rjmp	.+4      	; 0x83e <vfprintf+0x108>
 83a:	88 36       	cpi	r24, 0x68	; 104
 83c:	41 f4       	brne	.+16     	; 0x84e <vfprintf+0x118>
 83e:	f7 01       	movw	r30, r14
 840:	93 fd       	sbrc	r25, 3
 842:	85 91       	lpm	r24, Z+
 844:	93 ff       	sbrs	r25, 3
 846:	81 91       	ld	r24, Z+
 848:	7f 01       	movw	r14, r30
 84a:	81 11       	cpse	r24, r1
 84c:	b3 cf       	rjmp	.-154    	; 0x7b4 <vfprintf+0x7e>
 84e:	98 2f       	mov	r25, r24
 850:	9f 7d       	andi	r25, 0xDF	; 223
 852:	95 54       	subi	r25, 0x45	; 69
 854:	93 30       	cpi	r25, 0x03	; 3
 856:	28 f4       	brcc	.+10     	; 0x862 <vfprintf+0x12c>
 858:	0c 5f       	subi	r16, 0xFC	; 252
 85a:	1f 4f       	sbci	r17, 0xFF	; 255
 85c:	9f e3       	ldi	r25, 0x3F	; 63
 85e:	99 83       	std	Y+1, r25	; 0x01
 860:	0d c0       	rjmp	.+26     	; 0x87c <vfprintf+0x146>
 862:	83 36       	cpi	r24, 0x63	; 99
 864:	31 f0       	breq	.+12     	; 0x872 <vfprintf+0x13c>
 866:	83 37       	cpi	r24, 0x73	; 115
 868:	71 f0       	breq	.+28     	; 0x886 <vfprintf+0x150>
 86a:	83 35       	cpi	r24, 0x53	; 83
 86c:	09 f0       	breq	.+2      	; 0x870 <vfprintf+0x13a>
 86e:	59 c0       	rjmp	.+178    	; 0x922 <vfprintf+0x1ec>
 870:	21 c0       	rjmp	.+66     	; 0x8b4 <vfprintf+0x17e>
 872:	f8 01       	movw	r30, r16
 874:	80 81       	ld	r24, Z
 876:	89 83       	std	Y+1, r24	; 0x01
 878:	0e 5f       	subi	r16, 0xFE	; 254
 87a:	1f 4f       	sbci	r17, 0xFF	; 255
 87c:	88 24       	eor	r8, r8
 87e:	83 94       	inc	r8
 880:	91 2c       	mov	r9, r1
 882:	53 01       	movw	r10, r6
 884:	13 c0       	rjmp	.+38     	; 0x8ac <vfprintf+0x176>
 886:	28 01       	movw	r4, r16
 888:	f2 e0       	ldi	r31, 0x02	; 2
 88a:	4f 0e       	add	r4, r31
 88c:	51 1c       	adc	r5, r1
 88e:	f8 01       	movw	r30, r16
 890:	a0 80       	ld	r10, Z
 892:	b1 80       	ldd	r11, Z+1	; 0x01
 894:	36 fe       	sbrs	r3, 6
 896:	03 c0       	rjmp	.+6      	; 0x89e <vfprintf+0x168>
 898:	69 2d       	mov	r22, r9
 89a:	70 e0       	ldi	r23, 0x00	; 0
 89c:	02 c0       	rjmp	.+4      	; 0x8a2 <vfprintf+0x16c>
 89e:	6f ef       	ldi	r22, 0xFF	; 255
 8a0:	7f ef       	ldi	r23, 0xFF	; 255
 8a2:	c5 01       	movw	r24, r10
 8a4:	0e 94 aa 05 	call	0xb54	; 0xb54 <strnlen>
 8a8:	4c 01       	movw	r8, r24
 8aa:	82 01       	movw	r16, r4
 8ac:	f3 2d       	mov	r31, r3
 8ae:	ff 77       	andi	r31, 0x7F	; 127
 8b0:	3f 2e       	mov	r3, r31
 8b2:	16 c0       	rjmp	.+44     	; 0x8e0 <vfprintf+0x1aa>
 8b4:	28 01       	movw	r4, r16
 8b6:	22 e0       	ldi	r18, 0x02	; 2
 8b8:	42 0e       	add	r4, r18
 8ba:	51 1c       	adc	r5, r1
 8bc:	f8 01       	movw	r30, r16
 8be:	a0 80       	ld	r10, Z
 8c0:	b1 80       	ldd	r11, Z+1	; 0x01
 8c2:	36 fe       	sbrs	r3, 6
 8c4:	03 c0       	rjmp	.+6      	; 0x8cc <vfprintf+0x196>
 8c6:	69 2d       	mov	r22, r9
 8c8:	70 e0       	ldi	r23, 0x00	; 0
 8ca:	02 c0       	rjmp	.+4      	; 0x8d0 <vfprintf+0x19a>
 8cc:	6f ef       	ldi	r22, 0xFF	; 255
 8ce:	7f ef       	ldi	r23, 0xFF	; 255
 8d0:	c5 01       	movw	r24, r10
 8d2:	0e 94 9f 05 	call	0xb3e	; 0xb3e <strnlen_P>
 8d6:	4c 01       	movw	r8, r24
 8d8:	f3 2d       	mov	r31, r3
 8da:	f0 68       	ori	r31, 0x80	; 128
 8dc:	3f 2e       	mov	r3, r31
 8de:	82 01       	movw	r16, r4
 8e0:	33 fc       	sbrc	r3, 3
 8e2:	1b c0       	rjmp	.+54     	; 0x91a <vfprintf+0x1e4>
 8e4:	82 2d       	mov	r24, r2
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	88 16       	cp	r8, r24
 8ea:	99 06       	cpc	r9, r25
 8ec:	b0 f4       	brcc	.+44     	; 0x91a <vfprintf+0x1e4>
 8ee:	b6 01       	movw	r22, r12
 8f0:	80 e2       	ldi	r24, 0x20	; 32
 8f2:	90 e0       	ldi	r25, 0x00	; 0
 8f4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 8f8:	2a 94       	dec	r2
 8fa:	f4 cf       	rjmp	.-24     	; 0x8e4 <vfprintf+0x1ae>
 8fc:	f5 01       	movw	r30, r10
 8fe:	37 fc       	sbrc	r3, 7
 900:	85 91       	lpm	r24, Z+
 902:	37 fe       	sbrs	r3, 7
 904:	81 91       	ld	r24, Z+
 906:	5f 01       	movw	r10, r30
 908:	b6 01       	movw	r22, r12
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 910:	21 10       	cpse	r2, r1
 912:	2a 94       	dec	r2
 914:	21 e0       	ldi	r18, 0x01	; 1
 916:	82 1a       	sub	r8, r18
 918:	91 08       	sbc	r9, r1
 91a:	81 14       	cp	r8, r1
 91c:	91 04       	cpc	r9, r1
 91e:	71 f7       	brne	.-36     	; 0x8fc <vfprintf+0x1c6>
 920:	e8 c0       	rjmp	.+464    	; 0xaf2 <vfprintf+0x3bc>
 922:	84 36       	cpi	r24, 0x64	; 100
 924:	11 f0       	breq	.+4      	; 0x92a <vfprintf+0x1f4>
 926:	89 36       	cpi	r24, 0x69	; 105
 928:	41 f5       	brne	.+80     	; 0x97a <vfprintf+0x244>
 92a:	f8 01       	movw	r30, r16
 92c:	37 fe       	sbrs	r3, 7
 92e:	07 c0       	rjmp	.+14     	; 0x93e <vfprintf+0x208>
 930:	60 81       	ld	r22, Z
 932:	71 81       	ldd	r23, Z+1	; 0x01
 934:	82 81       	ldd	r24, Z+2	; 0x02
 936:	93 81       	ldd	r25, Z+3	; 0x03
 938:	0c 5f       	subi	r16, 0xFC	; 252
 93a:	1f 4f       	sbci	r17, 0xFF	; 255
 93c:	08 c0       	rjmp	.+16     	; 0x94e <vfprintf+0x218>
 93e:	60 81       	ld	r22, Z
 940:	71 81       	ldd	r23, Z+1	; 0x01
 942:	07 2e       	mov	r0, r23
 944:	00 0c       	add	r0, r0
 946:	88 0b       	sbc	r24, r24
 948:	99 0b       	sbc	r25, r25
 94a:	0e 5f       	subi	r16, 0xFE	; 254
 94c:	1f 4f       	sbci	r17, 0xFF	; 255
 94e:	f3 2d       	mov	r31, r3
 950:	ff 76       	andi	r31, 0x6F	; 111
 952:	3f 2e       	mov	r3, r31
 954:	97 ff       	sbrs	r25, 7
 956:	09 c0       	rjmp	.+18     	; 0x96a <vfprintf+0x234>
 958:	90 95       	com	r25
 95a:	80 95       	com	r24
 95c:	70 95       	com	r23
 95e:	61 95       	neg	r22
 960:	7f 4f       	sbci	r23, 0xFF	; 255
 962:	8f 4f       	sbci	r24, 0xFF	; 255
 964:	9f 4f       	sbci	r25, 0xFF	; 255
 966:	f0 68       	ori	r31, 0x80	; 128
 968:	3f 2e       	mov	r3, r31
 96a:	2a e0       	ldi	r18, 0x0A	; 10
 96c:	30 e0       	ldi	r19, 0x00	; 0
 96e:	a3 01       	movw	r20, r6
 970:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 974:	88 2e       	mov	r8, r24
 976:	86 18       	sub	r8, r6
 978:	45 c0       	rjmp	.+138    	; 0xa04 <vfprintf+0x2ce>
 97a:	85 37       	cpi	r24, 0x75	; 117
 97c:	31 f4       	brne	.+12     	; 0x98a <vfprintf+0x254>
 97e:	23 2d       	mov	r18, r3
 980:	2f 7e       	andi	r18, 0xEF	; 239
 982:	b2 2e       	mov	r11, r18
 984:	2a e0       	ldi	r18, 0x0A	; 10
 986:	30 e0       	ldi	r19, 0x00	; 0
 988:	25 c0       	rjmp	.+74     	; 0x9d4 <vfprintf+0x29e>
 98a:	93 2d       	mov	r25, r3
 98c:	99 7f       	andi	r25, 0xF9	; 249
 98e:	b9 2e       	mov	r11, r25
 990:	8f 36       	cpi	r24, 0x6F	; 111
 992:	c1 f0       	breq	.+48     	; 0x9c4 <vfprintf+0x28e>
 994:	18 f4       	brcc	.+6      	; 0x99c <vfprintf+0x266>
 996:	88 35       	cpi	r24, 0x58	; 88
 998:	79 f0       	breq	.+30     	; 0x9b8 <vfprintf+0x282>
 99a:	b5 c0       	rjmp	.+362    	; 0xb06 <vfprintf+0x3d0>
 99c:	80 37       	cpi	r24, 0x70	; 112
 99e:	19 f0       	breq	.+6      	; 0x9a6 <vfprintf+0x270>
 9a0:	88 37       	cpi	r24, 0x78	; 120
 9a2:	21 f0       	breq	.+8      	; 0x9ac <vfprintf+0x276>
 9a4:	b0 c0       	rjmp	.+352    	; 0xb06 <vfprintf+0x3d0>
 9a6:	e9 2f       	mov	r30, r25
 9a8:	e0 61       	ori	r30, 0x10	; 16
 9aa:	be 2e       	mov	r11, r30
 9ac:	b4 fe       	sbrs	r11, 4
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <vfprintf+0x294>
 9b0:	fb 2d       	mov	r31, r11
 9b2:	f4 60       	ori	r31, 0x04	; 4
 9b4:	bf 2e       	mov	r11, r31
 9b6:	09 c0       	rjmp	.+18     	; 0x9ca <vfprintf+0x294>
 9b8:	34 fe       	sbrs	r3, 4
 9ba:	0a c0       	rjmp	.+20     	; 0x9d0 <vfprintf+0x29a>
 9bc:	29 2f       	mov	r18, r25
 9be:	26 60       	ori	r18, 0x06	; 6
 9c0:	b2 2e       	mov	r11, r18
 9c2:	06 c0       	rjmp	.+12     	; 0x9d0 <vfprintf+0x29a>
 9c4:	28 e0       	ldi	r18, 0x08	; 8
 9c6:	30 e0       	ldi	r19, 0x00	; 0
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <vfprintf+0x29e>
 9ca:	20 e1       	ldi	r18, 0x10	; 16
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	02 c0       	rjmp	.+4      	; 0x9d4 <vfprintf+0x29e>
 9d0:	20 e1       	ldi	r18, 0x10	; 16
 9d2:	32 e0       	ldi	r19, 0x02	; 2
 9d4:	f8 01       	movw	r30, r16
 9d6:	b7 fe       	sbrs	r11, 7
 9d8:	07 c0       	rjmp	.+14     	; 0x9e8 <vfprintf+0x2b2>
 9da:	60 81       	ld	r22, Z
 9dc:	71 81       	ldd	r23, Z+1	; 0x01
 9de:	82 81       	ldd	r24, Z+2	; 0x02
 9e0:	93 81       	ldd	r25, Z+3	; 0x03
 9e2:	0c 5f       	subi	r16, 0xFC	; 252
 9e4:	1f 4f       	sbci	r17, 0xFF	; 255
 9e6:	06 c0       	rjmp	.+12     	; 0x9f4 <vfprintf+0x2be>
 9e8:	60 81       	ld	r22, Z
 9ea:	71 81       	ldd	r23, Z+1	; 0x01
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	90 e0       	ldi	r25, 0x00	; 0
 9f0:	0e 5f       	subi	r16, 0xFE	; 254
 9f2:	1f 4f       	sbci	r17, 0xFF	; 255
 9f4:	a3 01       	movw	r20, r6
 9f6:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <__ultoa_invert>
 9fa:	88 2e       	mov	r8, r24
 9fc:	86 18       	sub	r8, r6
 9fe:	fb 2d       	mov	r31, r11
 a00:	ff 77       	andi	r31, 0x7F	; 127
 a02:	3f 2e       	mov	r3, r31
 a04:	36 fe       	sbrs	r3, 6
 a06:	0d c0       	rjmp	.+26     	; 0xa22 <vfprintf+0x2ec>
 a08:	23 2d       	mov	r18, r3
 a0a:	2e 7f       	andi	r18, 0xFE	; 254
 a0c:	a2 2e       	mov	r10, r18
 a0e:	89 14       	cp	r8, r9
 a10:	58 f4       	brcc	.+22     	; 0xa28 <vfprintf+0x2f2>
 a12:	34 fe       	sbrs	r3, 4
 a14:	0b c0       	rjmp	.+22     	; 0xa2c <vfprintf+0x2f6>
 a16:	32 fc       	sbrc	r3, 2
 a18:	09 c0       	rjmp	.+18     	; 0xa2c <vfprintf+0x2f6>
 a1a:	83 2d       	mov	r24, r3
 a1c:	8e 7e       	andi	r24, 0xEE	; 238
 a1e:	a8 2e       	mov	r10, r24
 a20:	05 c0       	rjmp	.+10     	; 0xa2c <vfprintf+0x2f6>
 a22:	b8 2c       	mov	r11, r8
 a24:	a3 2c       	mov	r10, r3
 a26:	03 c0       	rjmp	.+6      	; 0xa2e <vfprintf+0x2f8>
 a28:	b8 2c       	mov	r11, r8
 a2a:	01 c0       	rjmp	.+2      	; 0xa2e <vfprintf+0x2f8>
 a2c:	b9 2c       	mov	r11, r9
 a2e:	a4 fe       	sbrs	r10, 4
 a30:	0f c0       	rjmp	.+30     	; 0xa50 <vfprintf+0x31a>
 a32:	fe 01       	movw	r30, r28
 a34:	e8 0d       	add	r30, r8
 a36:	f1 1d       	adc	r31, r1
 a38:	80 81       	ld	r24, Z
 a3a:	80 33       	cpi	r24, 0x30	; 48
 a3c:	21 f4       	brne	.+8      	; 0xa46 <vfprintf+0x310>
 a3e:	9a 2d       	mov	r25, r10
 a40:	99 7e       	andi	r25, 0xE9	; 233
 a42:	a9 2e       	mov	r10, r25
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <vfprintf+0x322>
 a46:	a2 fe       	sbrs	r10, 2
 a48:	06 c0       	rjmp	.+12     	; 0xa56 <vfprintf+0x320>
 a4a:	b3 94       	inc	r11
 a4c:	b3 94       	inc	r11
 a4e:	04 c0       	rjmp	.+8      	; 0xa58 <vfprintf+0x322>
 a50:	8a 2d       	mov	r24, r10
 a52:	86 78       	andi	r24, 0x86	; 134
 a54:	09 f0       	breq	.+2      	; 0xa58 <vfprintf+0x322>
 a56:	b3 94       	inc	r11
 a58:	a3 fc       	sbrc	r10, 3
 a5a:	11 c0       	rjmp	.+34     	; 0xa7e <vfprintf+0x348>
 a5c:	a0 fe       	sbrs	r10, 0
 a5e:	06 c0       	rjmp	.+12     	; 0xa6c <vfprintf+0x336>
 a60:	b2 14       	cp	r11, r2
 a62:	88 f4       	brcc	.+34     	; 0xa86 <vfprintf+0x350>
 a64:	28 0c       	add	r2, r8
 a66:	92 2c       	mov	r9, r2
 a68:	9b 18       	sub	r9, r11
 a6a:	0e c0       	rjmp	.+28     	; 0xa88 <vfprintf+0x352>
 a6c:	b2 14       	cp	r11, r2
 a6e:	60 f4       	brcc	.+24     	; 0xa88 <vfprintf+0x352>
 a70:	b6 01       	movw	r22, r12
 a72:	80 e2       	ldi	r24, 0x20	; 32
 a74:	90 e0       	ldi	r25, 0x00	; 0
 a76:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 a7a:	b3 94       	inc	r11
 a7c:	f7 cf       	rjmp	.-18     	; 0xa6c <vfprintf+0x336>
 a7e:	b2 14       	cp	r11, r2
 a80:	18 f4       	brcc	.+6      	; 0xa88 <vfprintf+0x352>
 a82:	2b 18       	sub	r2, r11
 a84:	02 c0       	rjmp	.+4      	; 0xa8a <vfprintf+0x354>
 a86:	98 2c       	mov	r9, r8
 a88:	21 2c       	mov	r2, r1
 a8a:	a4 fe       	sbrs	r10, 4
 a8c:	10 c0       	rjmp	.+32     	; 0xaae <vfprintf+0x378>
 a8e:	b6 01       	movw	r22, r12
 a90:	80 e3       	ldi	r24, 0x30	; 48
 a92:	90 e0       	ldi	r25, 0x00	; 0
 a94:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 a98:	a2 fe       	sbrs	r10, 2
 a9a:	17 c0       	rjmp	.+46     	; 0xaca <vfprintf+0x394>
 a9c:	a1 fc       	sbrc	r10, 1
 a9e:	03 c0       	rjmp	.+6      	; 0xaa6 <vfprintf+0x370>
 aa0:	88 e7       	ldi	r24, 0x78	; 120
 aa2:	90 e0       	ldi	r25, 0x00	; 0
 aa4:	02 c0       	rjmp	.+4      	; 0xaaa <vfprintf+0x374>
 aa6:	88 e5       	ldi	r24, 0x58	; 88
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	b6 01       	movw	r22, r12
 aac:	0c c0       	rjmp	.+24     	; 0xac6 <vfprintf+0x390>
 aae:	8a 2d       	mov	r24, r10
 ab0:	86 78       	andi	r24, 0x86	; 134
 ab2:	59 f0       	breq	.+22     	; 0xaca <vfprintf+0x394>
 ab4:	a1 fe       	sbrs	r10, 1
 ab6:	02 c0       	rjmp	.+4      	; 0xabc <vfprintf+0x386>
 ab8:	8b e2       	ldi	r24, 0x2B	; 43
 aba:	01 c0       	rjmp	.+2      	; 0xabe <vfprintf+0x388>
 abc:	80 e2       	ldi	r24, 0x20	; 32
 abe:	a7 fc       	sbrc	r10, 7
 ac0:	8d e2       	ldi	r24, 0x2D	; 45
 ac2:	b6 01       	movw	r22, r12
 ac4:	90 e0       	ldi	r25, 0x00	; 0
 ac6:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 aca:	89 14       	cp	r8, r9
 acc:	38 f4       	brcc	.+14     	; 0xadc <vfprintf+0x3a6>
 ace:	b6 01       	movw	r22, r12
 ad0:	80 e3       	ldi	r24, 0x30	; 48
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 ad8:	9a 94       	dec	r9
 ada:	f7 cf       	rjmp	.-18     	; 0xaca <vfprintf+0x394>
 adc:	8a 94       	dec	r8
 ade:	f3 01       	movw	r30, r6
 ae0:	e8 0d       	add	r30, r8
 ae2:	f1 1d       	adc	r31, r1
 ae4:	80 81       	ld	r24, Z
 ae6:	b6 01       	movw	r22, r12
 ae8:	90 e0       	ldi	r25, 0x00	; 0
 aea:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 aee:	81 10       	cpse	r8, r1
 af0:	f5 cf       	rjmp	.-22     	; 0xadc <vfprintf+0x3a6>
 af2:	22 20       	and	r2, r2
 af4:	09 f4       	brne	.+2      	; 0xaf8 <vfprintf+0x3c2>
 af6:	42 ce       	rjmp	.-892    	; 0x77c <vfprintf+0x46>
 af8:	b6 01       	movw	r22, r12
 afa:	80 e2       	ldi	r24, 0x20	; 32
 afc:	90 e0       	ldi	r25, 0x00	; 0
 afe:	0e 94 b5 05 	call	0xb6a	; 0xb6a <fputc>
 b02:	2a 94       	dec	r2
 b04:	f6 cf       	rjmp	.-20     	; 0xaf2 <vfprintf+0x3bc>
 b06:	f6 01       	movw	r30, r12
 b08:	86 81       	ldd	r24, Z+6	; 0x06
 b0a:	97 81       	ldd	r25, Z+7	; 0x07
 b0c:	02 c0       	rjmp	.+4      	; 0xb12 <vfprintf+0x3dc>
 b0e:	8f ef       	ldi	r24, 0xFF	; 255
 b10:	9f ef       	ldi	r25, 0xFF	; 255
 b12:	2b 96       	adiw	r28, 0x0b	; 11
 b14:	cd bf       	out	0x3d, r28	; 61
 b16:	de bf       	out	0x3e, r29	; 62
 b18:	df 91       	pop	r29
 b1a:	cf 91       	pop	r28
 b1c:	1f 91       	pop	r17
 b1e:	0f 91       	pop	r16
 b20:	ff 90       	pop	r15
 b22:	ef 90       	pop	r14
 b24:	df 90       	pop	r13
 b26:	cf 90       	pop	r12
 b28:	bf 90       	pop	r11
 b2a:	af 90       	pop	r10
 b2c:	9f 90       	pop	r9
 b2e:	8f 90       	pop	r8
 b30:	7f 90       	pop	r7
 b32:	6f 90       	pop	r6
 b34:	5f 90       	pop	r5
 b36:	4f 90       	pop	r4
 b38:	3f 90       	pop	r3
 b3a:	2f 90       	pop	r2
 b3c:	08 95       	ret

00000b3e <strnlen_P>:
 b3e:	fc 01       	movw	r30, r24
 b40:	05 90       	lpm	r0, Z+
 b42:	61 50       	subi	r22, 0x01	; 1
 b44:	70 40       	sbci	r23, 0x00	; 0
 b46:	01 10       	cpse	r0, r1
 b48:	d8 f7       	brcc	.-10     	; 0xb40 <strnlen_P+0x2>
 b4a:	80 95       	com	r24
 b4c:	90 95       	com	r25
 b4e:	8e 0f       	add	r24, r30
 b50:	9f 1f       	adc	r25, r31
 b52:	08 95       	ret

00000b54 <strnlen>:
 b54:	fc 01       	movw	r30, r24
 b56:	61 50       	subi	r22, 0x01	; 1
 b58:	70 40       	sbci	r23, 0x00	; 0
 b5a:	01 90       	ld	r0, Z+
 b5c:	01 10       	cpse	r0, r1
 b5e:	d8 f7       	brcc	.-10     	; 0xb56 <strnlen+0x2>
 b60:	80 95       	com	r24
 b62:	90 95       	com	r25
 b64:	8e 0f       	add	r24, r30
 b66:	9f 1f       	adc	r25, r31
 b68:	08 95       	ret

00000b6a <fputc>:
 b6a:	0f 93       	push	r16
 b6c:	1f 93       	push	r17
 b6e:	cf 93       	push	r28
 b70:	df 93       	push	r29
 b72:	fb 01       	movw	r30, r22
 b74:	23 81       	ldd	r18, Z+3	; 0x03
 b76:	21 fd       	sbrc	r18, 1
 b78:	03 c0       	rjmp	.+6      	; 0xb80 <fputc+0x16>
 b7a:	8f ef       	ldi	r24, 0xFF	; 255
 b7c:	9f ef       	ldi	r25, 0xFF	; 255
 b7e:	2c c0       	rjmp	.+88     	; 0xbd8 <fputc+0x6e>
 b80:	22 ff       	sbrs	r18, 2
 b82:	16 c0       	rjmp	.+44     	; 0xbb0 <fputc+0x46>
 b84:	46 81       	ldd	r20, Z+6	; 0x06
 b86:	57 81       	ldd	r21, Z+7	; 0x07
 b88:	24 81       	ldd	r18, Z+4	; 0x04
 b8a:	35 81       	ldd	r19, Z+5	; 0x05
 b8c:	42 17       	cp	r20, r18
 b8e:	53 07       	cpc	r21, r19
 b90:	44 f4       	brge	.+16     	; 0xba2 <fputc+0x38>
 b92:	a0 81       	ld	r26, Z
 b94:	b1 81       	ldd	r27, Z+1	; 0x01
 b96:	9d 01       	movw	r18, r26
 b98:	2f 5f       	subi	r18, 0xFF	; 255
 b9a:	3f 4f       	sbci	r19, 0xFF	; 255
 b9c:	20 83       	st	Z, r18
 b9e:	31 83       	std	Z+1, r19	; 0x01
 ba0:	8c 93       	st	X, r24
 ba2:	26 81       	ldd	r18, Z+6	; 0x06
 ba4:	37 81       	ldd	r19, Z+7	; 0x07
 ba6:	2f 5f       	subi	r18, 0xFF	; 255
 ba8:	3f 4f       	sbci	r19, 0xFF	; 255
 baa:	26 83       	std	Z+6, r18	; 0x06
 bac:	37 83       	std	Z+7, r19	; 0x07
 bae:	14 c0       	rjmp	.+40     	; 0xbd8 <fputc+0x6e>
 bb0:	8b 01       	movw	r16, r22
 bb2:	ec 01       	movw	r28, r24
 bb4:	fb 01       	movw	r30, r22
 bb6:	00 84       	ldd	r0, Z+8	; 0x08
 bb8:	f1 85       	ldd	r31, Z+9	; 0x09
 bba:	e0 2d       	mov	r30, r0
 bbc:	09 95       	icall
 bbe:	89 2b       	or	r24, r25
 bc0:	e1 f6       	brne	.-72     	; 0xb7a <fputc+0x10>
 bc2:	d8 01       	movw	r26, r16
 bc4:	16 96       	adiw	r26, 0x06	; 6
 bc6:	8d 91       	ld	r24, X+
 bc8:	9c 91       	ld	r25, X
 bca:	17 97       	sbiw	r26, 0x07	; 7
 bcc:	01 96       	adiw	r24, 0x01	; 1
 bce:	16 96       	adiw	r26, 0x06	; 6
 bd0:	8d 93       	st	X+, r24
 bd2:	9c 93       	st	X, r25
 bd4:	17 97       	sbiw	r26, 0x07	; 7
 bd6:	ce 01       	movw	r24, r28
 bd8:	df 91       	pop	r29
 bda:	cf 91       	pop	r28
 bdc:	1f 91       	pop	r17
 bde:	0f 91       	pop	r16
 be0:	08 95       	ret

00000be2 <__ultoa_invert>:
 be2:	fa 01       	movw	r30, r20
 be4:	aa 27       	eor	r26, r26
 be6:	28 30       	cpi	r18, 0x08	; 8
 be8:	51 f1       	breq	.+84     	; 0xc3e <__ultoa_invert+0x5c>
 bea:	20 31       	cpi	r18, 0x10	; 16
 bec:	81 f1       	breq	.+96     	; 0xc4e <__ultoa_invert+0x6c>
 bee:	e8 94       	clt
 bf0:	6f 93       	push	r22
 bf2:	6e 7f       	andi	r22, 0xFE	; 254
 bf4:	6e 5f       	subi	r22, 0xFE	; 254
 bf6:	7f 4f       	sbci	r23, 0xFF	; 255
 bf8:	8f 4f       	sbci	r24, 0xFF	; 255
 bfa:	9f 4f       	sbci	r25, 0xFF	; 255
 bfc:	af 4f       	sbci	r26, 0xFF	; 255
 bfe:	b1 e0       	ldi	r27, 0x01	; 1
 c00:	3e d0       	rcall	.+124    	; 0xc7e <__ultoa_invert+0x9c>
 c02:	b4 e0       	ldi	r27, 0x04	; 4
 c04:	3c d0       	rcall	.+120    	; 0xc7e <__ultoa_invert+0x9c>
 c06:	67 0f       	add	r22, r23
 c08:	78 1f       	adc	r23, r24
 c0a:	89 1f       	adc	r24, r25
 c0c:	9a 1f       	adc	r25, r26
 c0e:	a1 1d       	adc	r26, r1
 c10:	68 0f       	add	r22, r24
 c12:	79 1f       	adc	r23, r25
 c14:	8a 1f       	adc	r24, r26
 c16:	91 1d       	adc	r25, r1
 c18:	a1 1d       	adc	r26, r1
 c1a:	6a 0f       	add	r22, r26
 c1c:	71 1d       	adc	r23, r1
 c1e:	81 1d       	adc	r24, r1
 c20:	91 1d       	adc	r25, r1
 c22:	a1 1d       	adc	r26, r1
 c24:	20 d0       	rcall	.+64     	; 0xc66 <__ultoa_invert+0x84>
 c26:	09 f4       	brne	.+2      	; 0xc2a <__ultoa_invert+0x48>
 c28:	68 94       	set
 c2a:	3f 91       	pop	r19
 c2c:	2a e0       	ldi	r18, 0x0A	; 10
 c2e:	26 9f       	mul	r18, r22
 c30:	11 24       	eor	r1, r1
 c32:	30 19       	sub	r19, r0
 c34:	30 5d       	subi	r19, 0xD0	; 208
 c36:	31 93       	st	Z+, r19
 c38:	de f6       	brtc	.-74     	; 0xbf0 <__ultoa_invert+0xe>
 c3a:	cf 01       	movw	r24, r30
 c3c:	08 95       	ret
 c3e:	46 2f       	mov	r20, r22
 c40:	47 70       	andi	r20, 0x07	; 7
 c42:	40 5d       	subi	r20, 0xD0	; 208
 c44:	41 93       	st	Z+, r20
 c46:	b3 e0       	ldi	r27, 0x03	; 3
 c48:	0f d0       	rcall	.+30     	; 0xc68 <__ultoa_invert+0x86>
 c4a:	c9 f7       	brne	.-14     	; 0xc3e <__ultoa_invert+0x5c>
 c4c:	f6 cf       	rjmp	.-20     	; 0xc3a <__ultoa_invert+0x58>
 c4e:	46 2f       	mov	r20, r22
 c50:	4f 70       	andi	r20, 0x0F	; 15
 c52:	40 5d       	subi	r20, 0xD0	; 208
 c54:	4a 33       	cpi	r20, 0x3A	; 58
 c56:	18 f0       	brcs	.+6      	; 0xc5e <__ultoa_invert+0x7c>
 c58:	49 5d       	subi	r20, 0xD9	; 217
 c5a:	31 fd       	sbrc	r19, 1
 c5c:	40 52       	subi	r20, 0x20	; 32
 c5e:	41 93       	st	Z+, r20
 c60:	02 d0       	rcall	.+4      	; 0xc66 <__ultoa_invert+0x84>
 c62:	a9 f7       	brne	.-22     	; 0xc4e <__ultoa_invert+0x6c>
 c64:	ea cf       	rjmp	.-44     	; 0xc3a <__ultoa_invert+0x58>
 c66:	b4 e0       	ldi	r27, 0x04	; 4
 c68:	a6 95       	lsr	r26
 c6a:	97 95       	ror	r25
 c6c:	87 95       	ror	r24
 c6e:	77 95       	ror	r23
 c70:	67 95       	ror	r22
 c72:	ba 95       	dec	r27
 c74:	c9 f7       	brne	.-14     	; 0xc68 <__ultoa_invert+0x86>
 c76:	00 97       	sbiw	r24, 0x00	; 0
 c78:	61 05       	cpc	r22, r1
 c7a:	71 05       	cpc	r23, r1
 c7c:	08 95       	ret
 c7e:	9b 01       	movw	r18, r22
 c80:	ac 01       	movw	r20, r24
 c82:	0a 2e       	mov	r0, r26
 c84:	06 94       	lsr	r0
 c86:	57 95       	ror	r21
 c88:	47 95       	ror	r20
 c8a:	37 95       	ror	r19
 c8c:	27 95       	ror	r18
 c8e:	ba 95       	dec	r27
 c90:	c9 f7       	brne	.-14     	; 0xc84 <__ultoa_invert+0xa2>
 c92:	62 0f       	add	r22, r18
 c94:	73 1f       	adc	r23, r19
 c96:	84 1f       	adc	r24, r20
 c98:	95 1f       	adc	r25, r21
 c9a:	a0 1d       	adc	r26, r0
 c9c:	08 95       	ret

00000c9e <_exit>:
 c9e:	f8 94       	cli

00000ca0 <__stop_program>:
 ca0:	ff cf       	rjmp	.-2      	; 0xca0 <__stop_program>
