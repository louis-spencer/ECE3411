
Timers_2_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00804000  00000eec  00000f80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000eec  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006d  00804040  00804040  00000fc0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000fc0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000101c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  0000105c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004762  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000317e  00000000  00000000  00005886  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009ea  00000000  00000000  00008a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  000093f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fd8  00000000  00000000  00009624  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ef  00000000  00000000  0000b5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  0000bceb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_24>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 11 02 	jmp	0x422	; 0x422 <__vector_45>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 01 	jmp	0x332	; 0x332 <__vector_47>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	ec ee       	ldi	r30, 0xEC	; 236
 108:	fe e0       	ldi	r31, 0x0E	; 14
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	a0 34       	cpi	r26, 0x40	; 64
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	a0 e4       	ldi	r26, 0x40	; 64
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ad 3a       	cpi	r26, 0xAD	; 173
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <main>
 12e:	0c 94 74 07 	jmp	0xee8	; 0xee8 <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_clock>:
#define DEBOUNCE_TIME 10
#define BTN5 (!(VPORTB.IN & PIN5_bm))
#define BTN2 (!(VPORTB.IN & PIN2_bm))

void init_clock(void) {
	CPU_CCP = CCP_IOREG_gc;
 136:	88 ed       	ldi	r24, 0xD8	; 216
 138:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.XOSCHFCTRLA = CLKCTRL_FRQRANGE_16M_gc | CLKCTRL_ENABLE_bm;
 13a:	e0 e6       	ldi	r30, 0x60	; 96
 13c:	f0 e0       	ldi	r31, 0x00	; 0
 13e:	95 e0       	ldi	r25, 0x05	; 5
 140:	90 a3       	std	Z+32, r25	; 0x20
	CPU_CCP = CCP_IOREG_gc;
 142:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.MCLKCTRLA = CLKCTRL_CLKSEL_EXTCLK_gc;
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	80 83       	st	Z, r24
	// wait for clock to startup
	while(!(CLKCTRL.MCLKSTATUS & CLKCTRL_EXTS_bm));
 148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 14c:	84 ff       	sbrs	r24, 4
 14e:	fc cf       	rjmp	.-8      	; 0x148 <init_clock+0x12>
}
 150:	08 95       	ret

00000152 <init_TCA1>:
	// initialize timer A1 (TCA1) with period of 1us
	// time it takes for timer to reach match value:
	// T = N * (1 + PER) / f_clk
	// But, timer ticks at: f_tca = f_clk / N
	// Or, timer ticks occur every: t_tca = N / f_clk
	TCA1.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
 152:	e0 e4       	ldi	r30, 0x40	; 64
 154:	fa e0       	ldi	r31, 0x0A	; 10
 156:	11 82       	std	Z+1, r1	; 0x01
	TCA1.SINGLE.PER = 999;
 158:	87 ee       	ldi	r24, 0xE7	; 231
 15a:	93 e0       	ldi	r25, 0x03	; 3
 15c:	86 a3       	std	Z+38, r24	; 0x26
 15e:	97 a3       	std	Z+39, r25	; 0x27
	TCA1.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	82 87       	std	Z+10, r24	; 0x0a
	// counting every 1us with DIV16 instead of DIV64
	TCA1.SINGLE.CTRLA |= (TCA_SINGLE_CLKSEL_DIV16_gc | TCA_SINGLE_ENABLE_bm);
 164:	80 81       	ld	r24, Z
 166:	89 60       	ori	r24, 0x09	; 9
 168:	80 83       	st	Z, r24
 16a:	08 95       	ret

0000016c <init_TCA0>:

// waveform timer
void init_TCA0(void) {
	// timer counter A0 (TCA0) cannot be mapped onto PORTD (LED output)
	// initialize TCA0 as waveform generation
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_FRQ_gc;
 16c:	e0 e0       	ldi	r30, 0x00	; 0
 16e:	fa e0       	ldi	r31, 0x0A	; 10
 170:	91 e0       	ldi	r25, 0x01	; 1
 172:	91 83       	std	Z+1, r25	; 0x01
	TCA0.SINGLE.CMP0 = FREQ_CMP0(5);
 174:	29 e6       	ldi	r18, 0x69	; 105
 176:	38 e1       	ldi	r19, 0x18	; 24
 178:	20 a7       	std	Z+40, r18	; 0x28
 17a:	31 a7       	std	Z+41, r19	; 0x29
	//TCA0.SINGLE.INTCTRL = TCA_SINGLE_CMP0_bm;
	TCA0.SINGLE.CTRLB |= TCA_SINGLE_CMP0EN_bm;
 17c:	81 81       	ldd	r24, Z+1	; 0x01
 17e:	80 61       	ori	r24, 0x10	; 16
 180:	81 83       	std	Z+1, r24	; 0x01
	// enable TCA0 CMP0 interrupt
	
	// set prescaler to 64 and enable timer
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_CLKSEL_DIV256_gc | TCA_SINGLE_ENABLE_bm);
 182:	80 81       	ld	r24, Z
 184:	8d 60       	ori	r24, 0x0D	; 13
 186:	80 83       	st	Z, r24
	PORTMUX.TCAROUTEA |= PORTMUX_TCA0_PORTD_gc;
 188:	e0 ee       	ldi	r30, 0xE0	; 224
 18a:	f5 e0       	ldi	r31, 0x05	; 5
 18c:	86 81       	ldd	r24, Z+6	; 0x06
 18e:	83 60       	ori	r24, 0x03	; 3
 190:	86 83       	std	Z+6, r24	; 0x06
	// rising and falling interrupts
	PORTD.PIN0CTRL |= (PORT_ISC_BOTHEDGES_gc);
 192:	e0 e6       	ldi	r30, 0x60	; 96
 194:	f4 e0       	ldi	r31, 0x04	; 4
 196:	80 89       	ldd	r24, Z+16	; 0x10
 198:	81 60       	ori	r24, 0x01	; 1
 19a:	80 8b       	std	Z+16, r24	; 0x10
	PORTD.DIRSET = PIN0_bm;
 19c:	91 83       	std	Z+1, r25	; 0x01
 19e:	08 95       	ret

000001a0 <init_btn>:
}

void init_btn(void) {
	PORTB.PIN5CTRL |= PORT_ISC_RISING_gc;
 1a0:	e0 e2       	ldi	r30, 0x20	; 32
 1a2:	f4 e0       	ldi	r31, 0x04	; 4
 1a4:	85 89       	ldd	r24, Z+21	; 0x15
 1a6:	82 60       	ori	r24, 0x02	; 2
 1a8:	85 8b       	std	Z+21, r24	; 0x15
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm | PORT_ISC_RISING_gc;
 1aa:	82 89       	ldd	r24, Z+18	; 0x12
 1ac:	8a 60       	ori	r24, 0x0A	; 10
 1ae:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.DIRCLR = PIN5_bm | PIN2_bm;
 1b0:	84 e2       	ldi	r24, 0x24	; 36
 1b2:	82 83       	std	Z+2, r24	; 0x02
 1b4:	08 95       	ret

000001b6 <set_freq_TCA0>:
}

void set_freq_TCA0(int freq) {
	// store the next frequency/CMP0 value in the buffer for smoother operation
	TCA0.SINGLE.CMP0BUF = FREQ_CMP0(freq);
 1b6:	20 e0       	ldi	r18, 0x00	; 0
 1b8:	30 e0       	ldi	r19, 0x00	; 0
 1ba:	38 2f       	mov	r19, r24
 1bc:	33 0f       	add	r19, r19
 1be:	03 2e       	mov	r0, r19
 1c0:	00 0c       	add	r0, r0
 1c2:	44 0b       	sbc	r20, r20
 1c4:	55 0b       	sbc	r21, r21
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	74 e2       	ldi	r23, 0x24	; 36
 1ca:	84 ef       	ldi	r24, 0xF4	; 244
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 29 04 	call	0x852	; 0x852 <__udivmodsi4>
 1d2:	21 50       	subi	r18, 0x01	; 1
 1d4:	31 09       	sbc	r19, r1
 1d6:	20 93 38 0a 	sts	0x0A38, r18	; 0x800a38 <__TEXT_REGION_LENGTH__+0x7e0a38>
 1da:	30 93 39 0a 	sts	0x0A39, r19	; 0x800a39 <__TEXT_REGION_LENGTH__+0x7e0a39>
 1de:	08 95       	ret

000001e0 <main>:
volatile char btn2_flag = 0;
volatile char btn5_flag = 0;

int main(void)
{
	init_clock();
 1e0:	0e 94 9b 00 	call	0x136	; 0x136 <init_clock>
	init_TCA0();
 1e4:	0e 94 b6 00 	call	0x16c	; 0x16c <init_TCA0>
	init_TCA1();
 1e8:	0e 94 a9 00 	call	0x152	; 0x152 <init_TCA1>
	
	
	VPORTD.DIR = 0xff;
 1ec:	8f ef       	ldi	r24, 0xFF	; 255
 1ee:	8c b9       	out	0x0c, r24	; 12
	PORTB.DIR = 0x00;
 1f0:	e0 e2       	ldi	r30, 0x20	; 32
 1f2:	f4 e0       	ldi	r31, 0x04	; 4
 1f4:	10 82       	st	Z, r1
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
 1f6:	82 89       	ldd	r24, Z+18	; 0x12
 1f8:	88 60       	ori	r24, 0x08	; 8
 1fa:	82 8b       	std	Z+18, r24	; 0x12
	
	
	init_btn();
 1fc:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <init_btn>
	uart_init(3, 9600, NULL);
 200:	20 e0       	ldi	r18, 0x00	; 0
 202:	30 e0       	ldi	r19, 0x00	; 0
 204:	40 e8       	ldi	r20, 0x80	; 128
 206:	55 e2       	ldi	r21, 0x25	; 37
 208:	60 e0       	ldi	r22, 0x00	; 0
 20a:	70 e0       	ldi	r23, 0x00	; 0
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	0e 94 08 04 	call	0x810	; 0x810 <uart_init>
	
	sei();
 212:	78 94       	sei
    while (1) 
    {
		if (tc >= 1000000) {
 214:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <tc>
 218:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <tc+0x1>
 21c:	a0 91 53 40 	lds	r26, 0x4053	; 0x804053 <tc+0x2>
 220:	b0 91 54 40 	lds	r27, 0x4054	; 0x804054 <tc+0x3>
 224:	80 34       	cpi	r24, 0x40	; 64
 226:	92 44       	sbci	r25, 0x42	; 66
 228:	af 40       	sbci	r26, 0x0F	; 15
 22a:	b1 05       	cpc	r27, r1
 22c:	0c f4       	brge	.+2      	; 0x230 <__EEPROM_REGION_LENGTH__+0x30>
 22e:	45 c0       	rjmp	.+138    	; 0x2ba <__EEPROM_REGION_LENGTH__+0xba>
			//cli();
			printf("Avg: %ld us\t| Freq: %d Hz\t| Count: %d\n", (long)(tc/(2*count)), freq, count);
 230:	40 91 47 40 	lds	r20, 0x4047	; 0x804047 <count>
 234:	50 91 48 40 	lds	r21, 0x4048	; 0x804048 <count+0x1>
 238:	e0 91 00 40 	lds	r30, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 23c:	f0 91 01 40 	lds	r31, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 240:	60 91 51 40 	lds	r22, 0x4051	; 0x804051 <tc>
 244:	70 91 52 40 	lds	r23, 0x4052	; 0x804052 <tc+0x1>
 248:	80 91 53 40 	lds	r24, 0x4053	; 0x804053 <tc+0x2>
 24c:	90 91 54 40 	lds	r25, 0x4054	; 0x804054 <tc+0x3>
 250:	20 91 47 40 	lds	r18, 0x4047	; 0x804047 <count>
 254:	30 91 48 40 	lds	r19, 0x4048	; 0x804048 <count+0x1>
 258:	22 0f       	add	r18, r18
 25a:	33 1f       	adc	r19, r19
 25c:	5f 93       	push	r21
 25e:	4f 93       	push	r20
 260:	ff 93       	push	r31
 262:	ef 93       	push	r30
 264:	03 2e       	mov	r0, r19
 266:	00 0c       	add	r0, r0
 268:	44 0b       	sbc	r20, r20
 26a:	55 0b       	sbc	r21, r21
 26c:	0e 94 4b 04 	call	0x896	; 0x896 <__divmodsi4>
 270:	5f 93       	push	r21
 272:	4f 93       	push	r20
 274:	3f 93       	push	r19
 276:	2f 93       	push	r18
 278:	80 e1       	ldi	r24, 0x10	; 16
 27a:	90 e4       	ldi	r25, 0x40	; 64
 27c:	9f 93       	push	r25
 27e:	8f 93       	push	r24
 280:	0e 94 ac 04 	call	0x958	; 0x958 <printf>
			//printf("hello world");
			tc = 0;
 284:	10 92 51 40 	sts	0x4051, r1	; 0x804051 <tc>
 288:	10 92 52 40 	sts	0x4052, r1	; 0x804052 <tc+0x1>
 28c:	10 92 53 40 	sts	0x4053, r1	; 0x804053 <tc+0x2>
 290:	10 92 54 40 	sts	0x4054, r1	; 0x804054 <tc+0x3>
			t_prev = 0;
 294:	10 92 49 40 	sts	0x4049, r1	; 0x804049 <t_prev>
 298:	10 92 4a 40 	sts	0x404A, r1	; 0x80404a <t_prev+0x1>
 29c:	10 92 4b 40 	sts	0x404B, r1	; 0x80404b <t_prev+0x2>
 2a0:	10 92 4c 40 	sts	0x404C, r1	; 0x80404c <t_prev+0x3>
			mode = 0;
 2a4:	10 92 46 40 	sts	0x4046, r1	; 0x804046 <mode>
			count = 0;
 2a8:	10 92 47 40 	sts	0x4047, r1	; 0x804047 <count>
 2ac:	10 92 48 40 	sts	0x4048, r1	; 0x804048 <count+0x1>
 2b0:	8d b7       	in	r24, 0x3d	; 61
 2b2:	9e b7       	in	r25, 0x3e	; 62
 2b4:	0a 96       	adiw	r24, 0x0a	; 10
 2b6:	8d bf       	out	0x3d, r24	; 61
 2b8:	9e bf       	out	0x3e, r25	; 62
			//sei();
		}
		
		if (btn5_flag) {
 2ba:	80 91 40 40 	lds	r24, 0x4040	; 0x804040 <__data_end>
 2be:	88 23       	and	r24, r24
 2c0:	c9 f0       	breq	.+50     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
			if (!BTN5) {
 2c2:	35 9b       	sbis	0x06, 5	; 6
 2c4:	17 c0       	rjmp	.+46     	; 0x2f4 <__EEPROM_REGION_LENGTH__+0xf4>
				btn5_flag = 0;
 2c6:	10 92 40 40 	sts	0x4040, r1	; 0x804040 <__data_end>
				freq < 10 ? freq++ : 0;
 2ca:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2ce:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 2d2:	0a 97       	sbiw	r24, 0x0a	; 10
 2d4:	4c f4       	brge	.+18     	; 0x2e8 <__EEPROM_REGION_LENGTH__+0xe8>
 2d6:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2da:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 2de:	01 96       	adiw	r24, 0x01	; 1
 2e0:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 2e4:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
				set_freq_TCA0(freq);	
 2e8:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 2ec:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 2f0:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_freq_TCA0>
			}
		}
		
		if (btn2_flag) {
 2f4:	80 91 41 40 	lds	r24, 0x4041	; 0x804041 <btn2_flag>
 2f8:	88 23       	and	r24, r24
 2fa:	09 f4       	brne	.+2      	; 0x2fe <__EEPROM_REGION_LENGTH__+0xfe>
 2fc:	8b cf       	rjmp	.-234    	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
			if (!BTN2) {
 2fe:	32 9b       	sbis	0x06, 2	; 6
 300:	89 cf       	rjmp	.-238    	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>
				btn2_flag = 0;
 302:	10 92 41 40 	sts	0x4041, r1	; 0x804041 <btn2_flag>
				freq > 1 ? freq-- : 0;
 306:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 30a:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 30e:	02 97       	sbiw	r24, 0x02	; 2
 310:	4c f0       	brlt	.+18     	; 0x324 <__EEPROM_REGION_LENGTH__+0x124>
 312:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 316:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 31a:	01 97       	sbiw	r24, 0x01	; 1
 31c:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
 320:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
				set_freq_TCA0(freq);
 324:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
 328:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
 32c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <set_freq_TCA0>
 330:	71 cf       	rjmp	.-286    	; 0x214 <__EEPROM_REGION_LENGTH__+0x14>

00000332 <__vector_47>:
			}
		}
    }
}

ISR(TCA1_OVF_vect) {
 332:	1f 92       	push	r1
 334:	0f 92       	push	r0
 336:	0f b6       	in	r0, 0x3f	; 63
 338:	0f 92       	push	r0
 33a:	11 24       	eor	r1, r1
 33c:	0b b6       	in	r0, 0x3b	; 59
 33e:	0f 92       	push	r0
 340:	2f 93       	push	r18
 342:	8f 93       	push	r24
 344:	9f 93       	push	r25
 346:	af 93       	push	r26
 348:	bf 93       	push	r27
 34a:	ef 93       	push	r30
 34c:	ff 93       	push	r31
	if (tc < UINT32_MAX) tc+=1000;
 34e:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <tc>
 352:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <tc+0x1>
 356:	a0 91 53 40 	lds	r26, 0x4053	; 0x804053 <tc+0x2>
 35a:	b0 91 54 40 	lds	r27, 0x4054	; 0x804054 <tc+0x3>
 35e:	8f 3f       	cpi	r24, 0xFF	; 255
 360:	9f 4f       	sbci	r25, 0xFF	; 255
 362:	af 4f       	sbci	r26, 0xFF	; 255
 364:	bf 4f       	sbci	r27, 0xFF	; 255
 366:	a1 f0       	breq	.+40     	; 0x390 <__vector_47+0x5e>
 368:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <tc>
 36c:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <tc+0x1>
 370:	a0 91 53 40 	lds	r26, 0x4053	; 0x804053 <tc+0x2>
 374:	b0 91 54 40 	lds	r27, 0x4054	; 0x804054 <tc+0x3>
 378:	88 51       	subi	r24, 0x18	; 24
 37a:	9c 4f       	sbci	r25, 0xFC	; 252
 37c:	af 4f       	sbci	r26, 0xFF	; 255
 37e:	bf 4f       	sbci	r27, 0xFF	; 255
 380:	80 93 51 40 	sts	0x4051, r24	; 0x804051 <tc>
 384:	90 93 52 40 	sts	0x4052, r25	; 0x804052 <tc+0x1>
 388:	a0 93 53 40 	sts	0x4053, r26	; 0x804053 <tc+0x2>
 38c:	b0 93 54 40 	sts	0x4054, r27	; 0x804054 <tc+0x3>
	
	if (tc_btn2 < INT_MAX) tc_btn2++;
 390:	80 91 44 40 	lds	r24, 0x4044	; 0x804044 <tc_btn2>
 394:	90 91 45 40 	lds	r25, 0x4045	; 0x804045 <tc_btn2+0x1>
 398:	8f 3f       	cpi	r24, 0xFF	; 255
 39a:	9f 47       	sbci	r25, 0x7F	; 127
 39c:	49 f0       	breq	.+18     	; 0x3b0 <__vector_47+0x7e>
 39e:	80 91 44 40 	lds	r24, 0x4044	; 0x804044 <tc_btn2>
 3a2:	90 91 45 40 	lds	r25, 0x4045	; 0x804045 <tc_btn2+0x1>
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	80 93 44 40 	sts	0x4044, r24	; 0x804044 <tc_btn2>
 3ac:	90 93 45 40 	sts	0x4045, r25	; 0x804045 <tc_btn2+0x1>
	if (tc_btn5 < INT_MAX) tc_btn5++;
 3b0:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <tc_btn5>
 3b4:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <tc_btn5+0x1>
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	9f 47       	sbci	r25, 0x7F	; 127
 3bc:	49 f0       	breq	.+18     	; 0x3d0 <__vector_47+0x9e>
 3be:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <tc_btn5>
 3c2:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <tc_btn5+0x1>
 3c6:	01 96       	adiw	r24, 0x01	; 1
 3c8:	80 93 42 40 	sts	0x4042, r24	; 0x804042 <tc_btn5>
 3cc:	90 93 43 40 	sts	0x4043, r25	; 0x804043 <tc_btn5+0x1>
	if (tc_btn2 >= DEBOUNCE_TIME && BTN2) btn2_flag = 1; 
 3d0:	80 91 44 40 	lds	r24, 0x4044	; 0x804044 <tc_btn2>
 3d4:	90 91 45 40 	lds	r25, 0x4045	; 0x804045 <tc_btn2+0x1>
 3d8:	0a 97       	sbiw	r24, 0x0a	; 10
 3da:	2c f0       	brlt	.+10     	; 0x3e6 <__vector_47+0xb4>
 3dc:	32 99       	sbic	0x06, 2	; 6
 3de:	03 c0       	rjmp	.+6      	; 0x3e6 <__vector_47+0xb4>
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	80 93 41 40 	sts	0x4041, r24	; 0x804041 <btn2_flag>
	if (tc_btn5 >= DEBOUNCE_TIME && BTN5) btn5_flag = 1;
 3e6:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <tc_btn5>
 3ea:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <tc_btn5+0x1>
 3ee:	0a 97       	sbiw	r24, 0x0a	; 10
 3f0:	2c f0       	brlt	.+10     	; 0x3fc <__vector_47+0xca>
 3f2:	35 99       	sbic	0x06, 5	; 6
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <__vector_47+0xca>
 3f6:	81 e0       	ldi	r24, 0x01	; 1
 3f8:	80 93 40 40 	sts	0x4040, r24	; 0x804040 <__data_end>
	
	TCA1.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
 3fc:	e0 e4       	ldi	r30, 0x40	; 64
 3fe:	fa e0       	ldi	r31, 0x0A	; 10
 400:	83 85       	ldd	r24, Z+11	; 0x0b
 402:	81 60       	ori	r24, 0x01	; 1
 404:	83 87       	std	Z+11, r24	; 0x0b
}
 406:	ff 91       	pop	r31
 408:	ef 91       	pop	r30
 40a:	bf 91       	pop	r27
 40c:	af 91       	pop	r26
 40e:	9f 91       	pop	r25
 410:	8f 91       	pop	r24
 412:	2f 91       	pop	r18
 414:	0f 90       	pop	r0
 416:	0b be       	out	0x3b, r0	; 59
 418:	0f 90       	pop	r0
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	0f 90       	pop	r0
 41e:	1f 90       	pop	r1
 420:	18 95       	reti

00000422 <__vector_45>:

ISR(PORTB_PORT_vect) {
 422:	1f 92       	push	r1
 424:	0f 92       	push	r0
 426:	0f b6       	in	r0, 0x3f	; 63
 428:	0f 92       	push	r0
 42a:	11 24       	eor	r1, r1
 42c:	0b b6       	in	r0, 0x3b	; 59
 42e:	0f 92       	push	r0
 430:	8f 93       	push	r24
 432:	9f 93       	push	r25
 434:	ef 93       	push	r30
 436:	ff 93       	push	r31
	if (PORTB.INTFLAGS & PIN5_bm) {
 438:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
 43c:	85 ff       	sbrs	r24, 5
 43e:	0f c0       	rjmp	.+30     	; 0x45e <__vector_45+0x3c>
		PORTB.INTFLAGS |= PIN5_bm;
 440:	e0 e2       	ldi	r30, 0x20	; 32
 442:	f4 e0       	ldi	r31, 0x04	; 4
 444:	81 85       	ldd	r24, Z+9	; 0x09
 446:	80 62       	ori	r24, 0x20	; 32
 448:	81 87       	std	Z+9, r24	; 0x09
		if (tc_btn5 >= DEBOUNCE_TIME) tc_btn5 = 0;
 44a:	80 91 42 40 	lds	r24, 0x4042	; 0x804042 <tc_btn5>
 44e:	90 91 43 40 	lds	r25, 0x4043	; 0x804043 <tc_btn5+0x1>
 452:	0a 97       	sbiw	r24, 0x0a	; 10
 454:	24 f0       	brlt	.+8      	; 0x45e <__vector_45+0x3c>
 456:	10 92 42 40 	sts	0x4042, r1	; 0x804042 <tc_btn5>
 45a:	10 92 43 40 	sts	0x4043, r1	; 0x804043 <tc_btn5+0x1>
	}
	if (PORTB.INTFLAGS & PIN2_bm) {
 45e:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x7e0429>
 462:	82 ff       	sbrs	r24, 2
 464:	0f c0       	rjmp	.+30     	; 0x484 <__vector_45+0x62>
		PORTB.INTFLAGS |= PIN2_bm;
 466:	e0 e2       	ldi	r30, 0x20	; 32
 468:	f4 e0       	ldi	r31, 0x04	; 4
 46a:	81 85       	ldd	r24, Z+9	; 0x09
 46c:	84 60       	ori	r24, 0x04	; 4
 46e:	81 87       	std	Z+9, r24	; 0x09
		if (tc_btn2 >= DEBOUNCE_TIME) tc_btn2 = 0;
 470:	80 91 44 40 	lds	r24, 0x4044	; 0x804044 <tc_btn2>
 474:	90 91 45 40 	lds	r25, 0x4045	; 0x804045 <tc_btn2+0x1>
 478:	0a 97       	sbiw	r24, 0x0a	; 10
 47a:	24 f0       	brlt	.+8      	; 0x484 <__vector_45+0x62>
 47c:	10 92 44 40 	sts	0x4044, r1	; 0x804044 <tc_btn2>
 480:	10 92 45 40 	sts	0x4045, r1	; 0x804045 <tc_btn2+0x1>
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	9f 91       	pop	r25
 48a:	8f 91       	pop	r24
 48c:	0f 90       	pop	r0
 48e:	0b be       	out	0x3b, r0	; 59
 490:	0f 90       	pop	r0
 492:	0f be       	out	0x3f, r0	; 63
 494:	0f 90       	pop	r0
 496:	1f 90       	pop	r1
 498:	18 95       	reti

0000049a <__vector_24>:

ISR(PORTD_PORT_vect) {
 49a:	1f 92       	push	r1
 49c:	0f 92       	push	r0
 49e:	0f b6       	in	r0, 0x3f	; 63
 4a0:	0f 92       	push	r0
 4a2:	11 24       	eor	r1, r1
 4a4:	0b b6       	in	r0, 0x3b	; 59
 4a6:	0f 92       	push	r0
 4a8:	4f 93       	push	r20
 4aa:	5f 93       	push	r21
 4ac:	6f 93       	push	r22
 4ae:	7f 93       	push	r23
 4b0:	8f 93       	push	r24
 4b2:	9f 93       	push	r25
 4b4:	af 93       	push	r26
 4b6:	bf 93       	push	r27
 4b8:	ef 93       	push	r30
 4ba:	ff 93       	push	r31
	if (PORTD.INTFLAGS & PIN0_bm) {
 4bc:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <__TEXT_REGION_LENGTH__+0x7e0469>
 4c0:	80 ff       	sbrs	r24, 0
 4c2:	54 c0       	rjmp	.+168    	; 0x56c <__vector_24+0xd2>
		PORTD.INTFLAGS |= PIN0_bm;
 4c4:	e0 e6       	ldi	r30, 0x60	; 96
 4c6:	f4 e0       	ldi	r31, 0x04	; 4
 4c8:	81 85       	ldd	r24, Z+9	; 0x09
 4ca:	81 60       	ori	r24, 0x01	; 1
 4cc:	81 87       	std	Z+9, r24	; 0x09
		
		if (mode == 0) {
 4ce:	80 91 46 40 	lds	r24, 0x4046	; 0x804046 <mode>
 4d2:	81 11       	cpse	r24, r1
 4d4:	14 c0       	rjmp	.+40     	; 0x4fe <__vector_24+0x64>
			t_prev = tc;
 4d6:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <tc>
 4da:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <tc+0x1>
 4de:	a0 91 53 40 	lds	r26, 0x4053	; 0x804053 <tc+0x2>
 4e2:	b0 91 54 40 	lds	r27, 0x4054	; 0x804054 <tc+0x3>
 4e6:	80 93 49 40 	sts	0x4049, r24	; 0x804049 <t_prev>
 4ea:	90 93 4a 40 	sts	0x404A, r25	; 0x80404a <t_prev+0x1>
 4ee:	a0 93 4b 40 	sts	0x404B, r26	; 0x80404b <t_prev+0x2>
 4f2:	b0 93 4c 40 	sts	0x404C, r27	; 0x80404c <t_prev+0x3>
			mode = 1;
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	80 93 46 40 	sts	0x4046, r24	; 0x804046 <mode>
 4fc:	37 c0       	rjmp	.+110    	; 0x56c <__vector_24+0xd2>
		} else if (mode == 1) {
 4fe:	80 91 46 40 	lds	r24, 0x4046	; 0x804046 <mode>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	99 f5       	brne	.+102    	; 0x56c <__vector_24+0xd2>
			total += (tc - t_prev);
 506:	80 91 51 40 	lds	r24, 0x4051	; 0x804051 <tc>
 50a:	90 91 52 40 	lds	r25, 0x4052	; 0x804052 <tc+0x1>
 50e:	a0 91 53 40 	lds	r26, 0x4053	; 0x804053 <tc+0x2>
 512:	b0 91 54 40 	lds	r27, 0x4054	; 0x804054 <tc+0x3>
 516:	40 91 49 40 	lds	r20, 0x4049	; 0x804049 <t_prev>
 51a:	50 91 4a 40 	lds	r21, 0x404A	; 0x80404a <t_prev+0x1>
 51e:	60 91 4b 40 	lds	r22, 0x404B	; 0x80404b <t_prev+0x2>
 522:	70 91 4c 40 	lds	r23, 0x404C	; 0x80404c <t_prev+0x3>
 526:	84 1b       	sub	r24, r20
 528:	95 0b       	sbc	r25, r21
 52a:	a6 0b       	sbc	r26, r22
 52c:	b7 0b       	sbc	r27, r23
 52e:	40 91 4d 40 	lds	r20, 0x404D	; 0x80404d <total>
 532:	50 91 4e 40 	lds	r21, 0x404E	; 0x80404e <total+0x1>
 536:	60 91 4f 40 	lds	r22, 0x404F	; 0x80404f <total+0x2>
 53a:	70 91 50 40 	lds	r23, 0x4050	; 0x804050 <total+0x3>
 53e:	84 0f       	add	r24, r20
 540:	95 1f       	adc	r25, r21
 542:	a6 1f       	adc	r26, r22
 544:	b7 1f       	adc	r27, r23
 546:	80 93 4d 40 	sts	0x404D, r24	; 0x80404d <total>
 54a:	90 93 4e 40 	sts	0x404E, r25	; 0x80404e <total+0x1>
 54e:	a0 93 4f 40 	sts	0x404F, r26	; 0x80404f <total+0x2>
 552:	b0 93 50 40 	sts	0x4050, r27	; 0x804050 <total+0x3>
			count++;
 556:	80 91 47 40 	lds	r24, 0x4047	; 0x804047 <count>
 55a:	90 91 48 40 	lds	r25, 0x4048	; 0x804048 <count+0x1>
 55e:	01 96       	adiw	r24, 0x01	; 1
 560:	80 93 47 40 	sts	0x4047, r24	; 0x804047 <count>
 564:	90 93 48 40 	sts	0x4048, r25	; 0x804048 <count+0x1>
			mode = 0;
 568:	10 92 46 40 	sts	0x4046, r1	; 0x804046 <mode>
		}
	}
}
 56c:	ff 91       	pop	r31
 56e:	ef 91       	pop	r30
 570:	bf 91       	pop	r27
 572:	af 91       	pop	r26
 574:	9f 91       	pop	r25
 576:	8f 91       	pop	r24
 578:	7f 91       	pop	r23
 57a:	6f 91       	pop	r22
 57c:	5f 91       	pop	r21
 57e:	4f 91       	pop	r20
 580:	0f 90       	pop	r0
 582:	0b be       	out	0x3b, r0	; 59
 584:	0f 90       	pop	r0
 586:	0f be       	out	0x3f, r0	; 63
 588:	0f 90       	pop	r0
 58a:	1f 90       	pop	r1
 58c:	18 95       	reti

0000058e <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
 58e:	cf 93       	push	r28
 590:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
 592:	81 11       	cpse	r24, r1
 594:	06 c0       	rjmp	.+12     	; 0x5a2 <usart_init+0x14>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
 596:	81 e0       	ldi	r24, 0x01	; 1
 598:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
 59c:	c0 e0       	ldi	r28, 0x00	; 0
 59e:	d8 e0       	ldi	r29, 0x08	; 8
 5a0:	19 c0       	rjmp	.+50     	; 0x5d4 <usart_init+0x46>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
 5a2:	81 30       	cpi	r24, 0x01	; 1
 5a4:	29 f4       	brne	.+10     	; 0x5b0 <usart_init+0x22>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
 5a6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
 5aa:	c0 e2       	ldi	r28, 0x20	; 32
 5ac:	d8 e0       	ldi	r29, 0x08	; 8
 5ae:	12 c0       	rjmp	.+36     	; 0x5d4 <usart_init+0x46>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
 5b0:	82 30       	cpi	r24, 0x02	; 2
 5b2:	31 f4       	brne	.+12     	; 0x5c0 <usart_init+0x32>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
 5ba:	c0 e4       	ldi	r28, 0x40	; 64
 5bc:	d8 e0       	ldi	r29, 0x08	; 8
 5be:	0a c0       	rjmp	.+20     	; 0x5d4 <usart_init+0x46>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
 5c0:	83 30       	cpi	r24, 0x03	; 3
 5c2:	31 f4       	brne	.+12     	; 0x5d0 <usart_init+0x42>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
 5ca:	c0 e6       	ldi	r28, 0x60	; 96
 5cc:	d8 e0       	ldi	r29, 0x08	; 8
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <usart_init+0x46>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
 5d0:	c0 e0       	ldi	r28, 0x00	; 0
 5d2:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
 5d4:	db 01       	movw	r26, r22
 5d6:	ca 01       	movw	r24, r20
 5d8:	88 0f       	add	r24, r24
 5da:	99 1f       	adc	r25, r25
 5dc:	aa 1f       	adc	r26, r26
 5de:	bb 1f       	adc	r27, r27
 5e0:	88 0f       	add	r24, r24
 5e2:	99 1f       	adc	r25, r25
 5e4:	aa 1f       	adc	r26, r26
 5e6:	bb 1f       	adc	r27, r27
 5e8:	9c 01       	movw	r18, r24
 5ea:	ad 01       	movw	r20, r26
 5ec:	22 0f       	add	r18, r18
 5ee:	33 1f       	adc	r19, r19
 5f0:	44 1f       	adc	r20, r20
 5f2:	55 1f       	adc	r21, r21
 5f4:	22 0f       	add	r18, r18
 5f6:	33 1f       	adc	r19, r19
 5f8:	44 1f       	adc	r20, r20
 5fa:	55 1f       	adc	r21, r21
 5fc:	60 e0       	ldi	r22, 0x00	; 0
 5fe:	70 e0       	ldi	r23, 0x00	; 0
 600:	89 e0       	ldi	r24, 0x09	; 9
 602:	9d e3       	ldi	r25, 0x3D	; 61
 604:	0e 94 29 04 	call	0x852	; 0x852 <__udivmodsi4>
 608:	28 87       	std	Y+8, r18	; 0x08
 60a:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
 60c:	8e 81       	ldd	r24, Y+6	; 0x06
 60e:	80 6c       	ori	r24, 0xC0	; 192
 610:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
 612:	ce 01       	movw	r24, r28
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	08 95       	ret

0000061a <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
 61a:	fc 01       	movw	r30, r24
 61c:	62 83       	std	Z+2, r22	; 0x02
 61e:	08 95       	ret

00000620 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
 620:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
 622:	94 81       	ldd	r25, Z+4	; 0x04
 624:	95 ff       	sbrs	r25, 5
 626:	fd cf       	rjmp	.-6      	; 0x622 <usart_wait_until_transmit_ready+0x2>
}
 628:	08 95       	ret

0000062a <usart_receive_data>:

int usart_receive_data(void* ptr)
{
 62a:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
 62c:	94 81       	ldd	r25, Z+4	; 0x04
 62e:	99 23       	and	r25, r25
 630:	ec f7       	brge	.-6      	; 0x62c <usart_receive_data+0x2>
	return (usart->RXDATAL);
 632:	80 81       	ld	r24, Z
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	08 95       	ret

00000638 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
 638:	0f 93       	push	r16
 63a:	1f 93       	push	r17
 63c:	cf 93       	push	r28
 63e:	c8 2f       	mov	r28, r24
 640:	8b 01       	movw	r16, r22
	if (c == '\a') {
 642:	87 30       	cpi	r24, 0x07	; 7
 644:	69 f4       	brne	.+26     	; 0x660 <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
 646:	20 91 ab 40 	lds	r18, 0x40AB	; 0x8040ab <__iob+0x4>
 64a:	30 91 ac 40 	lds	r19, 0x40AC	; 0x8040ac <__iob+0x5>
 64e:	47 e0       	ldi	r20, 0x07	; 7
 650:	50 e0       	ldi	r21, 0x00	; 0
 652:	61 e0       	ldi	r22, 0x01	; 1
 654:	70 e0       	ldi	r23, 0x00	; 0
 656:	87 e3       	ldi	r24, 0x37	; 55
 658:	90 e4       	ldi	r25, 0x40	; 64
 65a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <fwrite>
		return 0;
 65e:	0f c0       	rjmp	.+30     	; 0x67e <uart_putchar+0x46>
	}

	if (c == '\n') {
 660:	8a 30       	cpi	r24, 0x0A	; 10
 662:	19 f4       	brne	.+6      	; 0x66a <uart_putchar+0x32>
		uart_putchar('\r', stream);
 664:	8d e0       	ldi	r24, 0x0D	; 13
 666:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
 66a:	f8 01       	movw	r30, r16
 66c:	04 85       	ldd	r16, Z+12	; 0x0c
 66e:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
 670:	c8 01       	movw	r24, r16
 672:	0e 94 10 03 	call	0x620	; 0x620 <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
 676:	6c 2f       	mov	r22, r28
 678:	c8 01       	movw	r24, r16
 67a:	0e 94 0d 03 	call	0x61a	; 0x61a <usart_transmit_data>

	return 0;
}
 67e:	80 e0       	ldi	r24, 0x00	; 0
 680:	90 e0       	ldi	r25, 0x00	; 0
 682:	cf 91       	pop	r28
 684:	1f 91       	pop	r17
 686:	0f 91       	pop	r16
 688:	08 95       	ret

0000068a <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
 68a:	ef 92       	push	r14
 68c:	ff 92       	push	r15
 68e:	0f 93       	push	r16
 690:	1f 93       	push	r17
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
 696:	20 91 a5 40 	lds	r18, 0x40A5	; 0x8040a5 <rxp.1995>
 69a:	30 91 a6 40 	lds	r19, 0x40A6	; 0x8040a6 <rxp.1995+0x1>
 69e:	23 2b       	or	r18, r19
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <uart_getchar+0x1a>
 6a2:	9a c0       	rjmp	.+308    	; 0x7d8 <uart_getchar+0x14e>
 6a4:	8c 01       	movw	r16, r24
 6a6:	c5 e5       	ldi	r28, 0x55	; 85
 6a8:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
 6aa:	f8 01       	movw	r30, r16
 6ac:	84 85       	ldd	r24, Z+12	; 0x0c
 6ae:	95 85       	ldd	r25, Z+13	; 0x0d
 6b0:	0e 94 15 03 	call	0x62a	; 0x62a <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
 6b4:	8d 30       	cpi	r24, 0x0D	; 13
 6b6:	09 f4       	brne	.+2      	; 0x6ba <uart_getchar+0x30>
				c = '\n';
 6b8:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
 6ba:	8a 30       	cpi	r24, 0x0A	; 10
 6bc:	59 f4       	brne	.+22     	; 0x6d4 <uart_getchar+0x4a>
			    *cp = c;
 6be:	88 83       	st	Y, r24
				uart_putchar(c, stream);
 6c0:	b8 01       	movw	r22, r16
 6c2:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
			    rxp = b;
 6c6:	85 e5       	ldi	r24, 0x55	; 85
 6c8:	90 e4       	ldi	r25, 0x40	; 64
 6ca:	80 93 a5 40 	sts	0x40A5, r24	; 0x8040a5 <rxp.1995>
 6ce:	90 93 a6 40 	sts	0x40A6, r25	; 0x8040a6 <rxp.1995+0x1>
				break;
 6d2:	82 c0       	rjmp	.+260    	; 0x7d8 <uart_getchar+0x14e>
			}
			else if (c == '\t')
 6d4:	89 30       	cpi	r24, 0x09	; 9
 6d6:	09 f4       	brne	.+2      	; 0x6da <uart_getchar+0x50>
				c = ' ';
 6d8:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
 6da:	90 ee       	ldi	r25, 0xE0	; 224
 6dc:	98 0f       	add	r25, r24
 6de:	9f 35       	cpi	r25, 0x5F	; 95
 6e0:	10 f0       	brcs	.+4      	; 0x6e6 <uart_getchar+0x5c>
 6e2:	80 3a       	cpi	r24, 0xA0	; 160
 6e4:	98 f0       	brcs	.+38     	; 0x70c <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
 6e6:	f0 e4       	ldi	r31, 0x40	; 64
 6e8:	c4 3a       	cpi	r28, 0xA4	; 164
 6ea:	df 07       	cpc	r29, r31
 6ec:	29 f4       	brne	.+10     	; 0x6f8 <uart_getchar+0x6e>
					uart_putchar('\a', stream);
 6ee:	b8 01       	movw	r22, r16
 6f0:	87 e0       	ldi	r24, 0x07	; 7
 6f2:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
 6f6:	d9 cf       	rjmp	.-78     	; 0x6aa <uart_getchar+0x20>
				else {
					*cp++ = c;
 6f8:	7e 01       	movw	r14, r28
 6fa:	9f ef       	ldi	r25, 0xFF	; 255
 6fc:	e9 1a       	sub	r14, r25
 6fe:	f9 0a       	sbc	r15, r25
 700:	88 83       	st	Y, r24
					uart_putchar(c, stream);
 702:	b8 01       	movw	r22, r16
 704:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
 708:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
 70a:	cf cf       	rjmp	.-98     	; 0x6aa <uart_getchar+0x20>
			}

			switch (c) {
 70c:	82 31       	cpi	r24, 0x12	; 18
 70e:	19 f1       	breq	.+70     	; 0x756 <uart_getchar+0xcc>
 710:	30 f4       	brcc	.+12     	; 0x71e <uart_getchar+0x94>
 712:	83 30       	cpi	r24, 0x03	; 3
 714:	09 f4       	brne	.+2      	; 0x718 <uart_getchar+0x8e>
 716:	73 c0       	rjmp	.+230    	; 0x7fe <uart_getchar+0x174>
 718:	88 30       	cpi	r24, 0x08	; 8
 71a:	49 f0       	breq	.+18     	; 0x72e <uart_getchar+0xa4>
 71c:	c6 cf       	rjmp	.-116    	; 0x6aa <uart_getchar+0x20>
 71e:	87 31       	cpi	r24, 0x17	; 23
 720:	09 f4       	brne	.+2      	; 0x724 <uart_getchar+0x9a>
 722:	4e c0       	rjmp	.+156    	; 0x7c0 <uart_getchar+0x136>
 724:	8f 37       	cpi	r24, 0x7F	; 127
 726:	19 f0       	breq	.+6      	; 0x72e <uart_getchar+0xa4>
 728:	85 31       	cpi	r24, 0x15	; 21
 72a:	b9 f1       	breq	.+110    	; 0x79a <uart_getchar+0x110>
 72c:	be cf       	rjmp	.-132    	; 0x6aa <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
 72e:	e0 e4       	ldi	r30, 0x40	; 64
 730:	c5 35       	cpi	r28, 0x55	; 85
 732:	de 07       	cpc	r29, r30
 734:	09 f0       	breq	.+2      	; 0x738 <uart_getchar+0xae>
 736:	08 f4       	brcc	.+2      	; 0x73a <uart_getchar+0xb0>
 738:	b8 cf       	rjmp	.-144    	; 0x6aa <uart_getchar+0x20>
						uart_putchar('\b', stream);
 73a:	b8 01       	movw	r22, r16
 73c:	88 e0       	ldi	r24, 0x08	; 8
 73e:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar(' ', stream);
 742:	b8 01       	movw	r22, r16
 744:	80 e2       	ldi	r24, 0x20	; 32
 746:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar('\b', stream);
 74a:	b8 01       	movw	r22, r16
 74c:	88 e0       	ldi	r24, 0x08	; 8
 74e:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						cp--;
 752:	21 97       	sbiw	r28, 0x01	; 1
 754:	aa cf       	rjmp	.-172    	; 0x6aa <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
 756:	b8 01       	movw	r22, r16
 758:	8d e0       	ldi	r24, 0x0D	; 13
 75a:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
 75e:	0f 2e       	mov	r0, r31
 760:	f5 e5       	ldi	r31, 0x55	; 85
 762:	ef 2e       	mov	r14, r31
 764:	f0 e4       	ldi	r31, 0x40	; 64
 766:	ff 2e       	mov	r15, r31
 768:	f0 2d       	mov	r31, r0
 76a:	06 c0       	rjmp	.+12     	; 0x778 <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
 76c:	b8 01       	movw	r22, r16
 76e:	f7 01       	movw	r30, r14
 770:	81 91       	ld	r24, Z+
 772:	7f 01       	movw	r14, r30
 774:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
 778:	ec 16       	cp	r14, r28
 77a:	fd 06       	cpc	r15, r29
 77c:	b8 f3       	brcs	.-18     	; 0x76c <uart_getchar+0xe2>
 77e:	95 cf       	rjmp	.-214    	; 0x6aa <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
 780:	b8 01       	movw	r22, r16
 782:	88 e0       	ldi	r24, 0x08	; 8
 784:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar(' ', stream);
 788:	b8 01       	movw	r22, r16
 78a:	80 e2       	ldi	r24, 0x20	; 32
 78c:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar('\b', stream);
 790:	b8 01       	movw	r22, r16
 792:	88 e0       	ldi	r24, 0x08	; 8
 794:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						cp--;
 798:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
 79a:	f0 e4       	ldi	r31, 0x40	; 64
 79c:	c5 35       	cpi	r28, 0x55	; 85
 79e:	df 07       	cpc	r29, r31
 7a0:	09 f0       	breq	.+2      	; 0x7a4 <uart_getchar+0x11a>
 7a2:	70 f7       	brcc	.-36     	; 0x780 <uart_getchar+0xf6>
 7a4:	82 cf       	rjmp	.-252    	; 0x6aa <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
 7a6:	b8 01       	movw	r22, r16
 7a8:	88 e0       	ldi	r24, 0x08	; 8
 7aa:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar(' ', stream);
 7ae:	b8 01       	movw	r22, r16
 7b0:	80 e2       	ldi	r24, 0x20	; 32
 7b2:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						uart_putchar('\b', stream);
 7b6:	b8 01       	movw	r22, r16
 7b8:	88 e0       	ldi	r24, 0x08	; 8
 7ba:	0e 94 1c 03 	call	0x638	; 0x638 <uart_putchar>
						cp--;
 7be:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
 7c0:	80 e4       	ldi	r24, 0x40	; 64
 7c2:	c5 35       	cpi	r28, 0x55	; 85
 7c4:	d8 07       	cpc	r29, r24
 7c6:	09 f0       	breq	.+2      	; 0x7ca <uart_getchar+0x140>
 7c8:	08 f4       	brcc	.+2      	; 0x7cc <uart_getchar+0x142>
 7ca:	6f cf       	rjmp	.-290    	; 0x6aa <uart_getchar+0x20>
 7cc:	fe 01       	movw	r30, r28
 7ce:	31 97       	sbiw	r30, 0x01	; 1
 7d0:	80 81       	ld	r24, Z
 7d2:	80 32       	cpi	r24, 0x20	; 32
 7d4:	41 f7       	brne	.-48     	; 0x7a6 <uart_getchar+0x11c>
 7d6:	69 cf       	rjmp	.-302    	; 0x6aa <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
 7d8:	e0 91 a5 40 	lds	r30, 0x40A5	; 0x8040a5 <rxp.1995>
 7dc:	f0 91 a6 40 	lds	r31, 0x40A6	; 0x8040a6 <rxp.1995+0x1>
 7e0:	cf 01       	movw	r24, r30
 7e2:	01 96       	adiw	r24, 0x01	; 1
 7e4:	80 93 a5 40 	sts	0x40A5, r24	; 0x8040a5 <rxp.1995>
 7e8:	90 93 a6 40 	sts	0x40A6, r25	; 0x8040a6 <rxp.1995+0x1>
 7ec:	80 81       	ld	r24, Z
	if (c == '\n')
 7ee:	8a 30       	cpi	r24, 0x0A	; 10
 7f0:	21 f4       	brne	.+8      	; 0x7fa <uart_getchar+0x170>
		rxp = 0;
 7f2:	10 92 a5 40 	sts	0x40A5, r1	; 0x8040a5 <rxp.1995>
 7f6:	10 92 a6 40 	sts	0x40A6, r1	; 0x8040a6 <rxp.1995+0x1>

	return c;
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	02 c0       	rjmp	.+4      	; 0x802 <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
 7fe:	8f ef       	ldi	r24, 0xFF	; 255
 800:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
 802:	df 91       	pop	r29
 804:	cf 91       	pop	r28
 806:	1f 91       	pop	r17
 808:	0f 91       	pop	r16
 80a:	ff 90       	pop	r15
 80c:	ef 90       	pop	r14
 80e:	08 95       	ret

00000810 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
 810:	cf 93       	push	r28
 812:	df 93       	push	r29
 814:	e9 01       	movw	r28, r18
	if (stream) {
 816:	20 97       	sbiw	r28, 0x00	; 0
 818:	49 f0       	breq	.+18     	; 0x82c <uart_init+0x1c>
		*stream = uartFile;
 81a:	9e e0       	ldi	r25, 0x0E	; 14
 81c:	e2 e0       	ldi	r30, 0x02	; 2
 81e:	f0 e4       	ldi	r31, 0x40	; 64
 820:	d9 01       	movw	r26, r18
 822:	01 90       	ld	r0, Z+
 824:	0d 92       	st	X+, r0
 826:	9a 95       	dec	r25
 828:	e1 f7       	brne	.-8      	; 0x822 <uart_init+0x12>
 82a:	0b c0       	rjmp	.+22     	; 0x842 <uart_init+0x32>
	} else {
		stdout = &uartFile;
 82c:	e7 ea       	ldi	r30, 0xA7	; 167
 82e:	f0 e4       	ldi	r31, 0x40	; 64
 830:	22 e0       	ldi	r18, 0x02	; 2
 832:	30 e4       	ldi	r19, 0x40	; 64
 834:	22 83       	std	Z+2, r18	; 0x02
 836:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
 838:	20 83       	st	Z, r18
 83a:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
 83c:	24 83       	std	Z+4, r18	; 0x04
 83e:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
 840:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
 842:	0e 94 c7 02 	call	0x58e	; 0x58e <usart_init>
	fdev_set_udata(stream, usart);
 846:	8c 87       	std	Y+12, r24	; 0x0c
 848:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
 84a:	ce 01       	movw	r24, r28
 84c:	df 91       	pop	r29
 84e:	cf 91       	pop	r28
 850:	08 95       	ret

00000852 <__udivmodsi4>:
 852:	a1 e2       	ldi	r26, 0x21	; 33
 854:	1a 2e       	mov	r1, r26
 856:	aa 1b       	sub	r26, r26
 858:	bb 1b       	sub	r27, r27
 85a:	fd 01       	movw	r30, r26
 85c:	0d c0       	rjmp	.+26     	; 0x878 <__udivmodsi4_ep>

0000085e <__udivmodsi4_loop>:
 85e:	aa 1f       	adc	r26, r26
 860:	bb 1f       	adc	r27, r27
 862:	ee 1f       	adc	r30, r30
 864:	ff 1f       	adc	r31, r31
 866:	a2 17       	cp	r26, r18
 868:	b3 07       	cpc	r27, r19
 86a:	e4 07       	cpc	r30, r20
 86c:	f5 07       	cpc	r31, r21
 86e:	20 f0       	brcs	.+8      	; 0x878 <__udivmodsi4_ep>
 870:	a2 1b       	sub	r26, r18
 872:	b3 0b       	sbc	r27, r19
 874:	e4 0b       	sbc	r30, r20
 876:	f5 0b       	sbc	r31, r21

00000878 <__udivmodsi4_ep>:
 878:	66 1f       	adc	r22, r22
 87a:	77 1f       	adc	r23, r23
 87c:	88 1f       	adc	r24, r24
 87e:	99 1f       	adc	r25, r25
 880:	1a 94       	dec	r1
 882:	69 f7       	brne	.-38     	; 0x85e <__udivmodsi4_loop>
 884:	60 95       	com	r22
 886:	70 95       	com	r23
 888:	80 95       	com	r24
 88a:	90 95       	com	r25
 88c:	9b 01       	movw	r18, r22
 88e:	ac 01       	movw	r20, r24
 890:	bd 01       	movw	r22, r26
 892:	cf 01       	movw	r24, r30
 894:	08 95       	ret

00000896 <__divmodsi4>:
 896:	05 2e       	mov	r0, r21
 898:	97 fb       	bst	r25, 7
 89a:	1e f4       	brtc	.+6      	; 0x8a2 <__divmodsi4+0xc>
 89c:	00 94       	com	r0
 89e:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__negsi2>
 8a2:	57 fd       	sbrc	r21, 7
 8a4:	07 d0       	rcall	.+14     	; 0x8b4 <__divmodsi4_neg2>
 8a6:	0e 94 29 04 	call	0x852	; 0x852 <__udivmodsi4>
 8aa:	07 fc       	sbrc	r0, 7
 8ac:	03 d0       	rcall	.+6      	; 0x8b4 <__divmodsi4_neg2>
 8ae:	4e f4       	brtc	.+18     	; 0x8c2 <__divmodsi4_exit>
 8b0:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__negsi2>

000008b4 <__divmodsi4_neg2>:
 8b4:	50 95       	com	r21
 8b6:	40 95       	com	r20
 8b8:	30 95       	com	r19
 8ba:	21 95       	neg	r18
 8bc:	3f 4f       	sbci	r19, 0xFF	; 255
 8be:	4f 4f       	sbci	r20, 0xFF	; 255
 8c0:	5f 4f       	sbci	r21, 0xFF	; 255

000008c2 <__divmodsi4_exit>:
 8c2:	08 95       	ret

000008c4 <__negsi2>:
 8c4:	90 95       	com	r25
 8c6:	80 95       	com	r24
 8c8:	70 95       	com	r23
 8ca:	61 95       	neg	r22
 8cc:	7f 4f       	sbci	r23, 0xFF	; 255
 8ce:	8f 4f       	sbci	r24, 0xFF	; 255
 8d0:	9f 4f       	sbci	r25, 0xFF	; 255
 8d2:	08 95       	ret

000008d4 <fwrite>:
 8d4:	8f 92       	push	r8
 8d6:	9f 92       	push	r9
 8d8:	af 92       	push	r10
 8da:	bf 92       	push	r11
 8dc:	cf 92       	push	r12
 8de:	df 92       	push	r13
 8e0:	ef 92       	push	r14
 8e2:	ff 92       	push	r15
 8e4:	0f 93       	push	r16
 8e6:	1f 93       	push	r17
 8e8:	cf 93       	push	r28
 8ea:	df 93       	push	r29
 8ec:	5b 01       	movw	r10, r22
 8ee:	4a 01       	movw	r8, r20
 8f0:	79 01       	movw	r14, r18
 8f2:	d9 01       	movw	r26, r18
 8f4:	13 96       	adiw	r26, 0x03	; 3
 8f6:	2c 91       	ld	r18, X
 8f8:	21 ff       	sbrs	r18, 1
 8fa:	1d c0       	rjmp	.+58     	; 0x936 <fwrite+0x62>
 8fc:	c0 e0       	ldi	r28, 0x00	; 0
 8fe:	d0 e0       	ldi	r29, 0x00	; 0
 900:	c8 15       	cp	r28, r8
 902:	d9 05       	cpc	r29, r9
 904:	d9 f0       	breq	.+54     	; 0x93c <fwrite+0x68>
 906:	8c 01       	movw	r16, r24
 908:	6c 01       	movw	r12, r24
 90a:	ca 0c       	add	r12, r10
 90c:	db 1c       	adc	r13, r11
 90e:	c8 01       	movw	r24, r16
 910:	0c 15       	cp	r16, r12
 912:	1d 05       	cpc	r17, r13
 914:	71 f0       	breq	.+28     	; 0x932 <fwrite+0x5e>
 916:	0f 5f       	subi	r16, 0xFF	; 255
 918:	1f 4f       	sbci	r17, 0xFF	; 255
 91a:	d7 01       	movw	r26, r14
 91c:	18 96       	adiw	r26, 0x08	; 8
 91e:	ed 91       	ld	r30, X+
 920:	fc 91       	ld	r31, X
 922:	19 97       	sbiw	r26, 0x09	; 9
 924:	b7 01       	movw	r22, r14
 926:	dc 01       	movw	r26, r24
 928:	8c 91       	ld	r24, X
 92a:	09 95       	icall
 92c:	89 2b       	or	r24, r25
 92e:	79 f3       	breq	.-34     	; 0x90e <fwrite+0x3a>
 930:	05 c0       	rjmp	.+10     	; 0x93c <fwrite+0x68>
 932:	21 96       	adiw	r28, 0x01	; 1
 934:	e5 cf       	rjmp	.-54     	; 0x900 <fwrite+0x2c>
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	01 c0       	rjmp	.+2      	; 0x93e <fwrite+0x6a>
 93c:	ce 01       	movw	r24, r28
 93e:	df 91       	pop	r29
 940:	cf 91       	pop	r28
 942:	1f 91       	pop	r17
 944:	0f 91       	pop	r16
 946:	ff 90       	pop	r15
 948:	ef 90       	pop	r14
 94a:	df 90       	pop	r13
 94c:	cf 90       	pop	r12
 94e:	bf 90       	pop	r11
 950:	af 90       	pop	r10
 952:	9f 90       	pop	r9
 954:	8f 90       	pop	r8
 956:	08 95       	ret

00000958 <printf>:
 958:	cf 93       	push	r28
 95a:	df 93       	push	r29
 95c:	cd b7       	in	r28, 0x3d	; 61
 95e:	de b7       	in	r29, 0x3e	; 62
 960:	ae 01       	movw	r20, r28
 962:	4b 5f       	subi	r20, 0xFB	; 251
 964:	5f 4f       	sbci	r21, 0xFF	; 255
 966:	fa 01       	movw	r30, r20
 968:	61 91       	ld	r22, Z+
 96a:	71 91       	ld	r23, Z+
 96c:	af 01       	movw	r20, r30
 96e:	80 91 a9 40 	lds	r24, 0x40A9	; 0x8040a9 <__iob+0x2>
 972:	90 91 aa 40 	lds	r25, 0x40AA	; 0x8040aa <__iob+0x3>
 976:	0e 94 c0 04 	call	0x980	; 0x980 <vfprintf>
 97a:	df 91       	pop	r29
 97c:	cf 91       	pop	r28
 97e:	08 95       	ret

00000980 <vfprintf>:
 980:	2f 92       	push	r2
 982:	3f 92       	push	r3
 984:	4f 92       	push	r4
 986:	5f 92       	push	r5
 988:	6f 92       	push	r6
 98a:	7f 92       	push	r7
 98c:	8f 92       	push	r8
 98e:	9f 92       	push	r9
 990:	af 92       	push	r10
 992:	bf 92       	push	r11
 994:	cf 92       	push	r12
 996:	df 92       	push	r13
 998:	ef 92       	push	r14
 99a:	ff 92       	push	r15
 99c:	0f 93       	push	r16
 99e:	1f 93       	push	r17
 9a0:	cf 93       	push	r28
 9a2:	df 93       	push	r29
 9a4:	cd b7       	in	r28, 0x3d	; 61
 9a6:	de b7       	in	r29, 0x3e	; 62
 9a8:	2b 97       	sbiw	r28, 0x0b	; 11
 9aa:	cd bf       	out	0x3d, r28	; 61
 9ac:	de bf       	out	0x3e, r29	; 62
 9ae:	6c 01       	movw	r12, r24
 9b0:	7b 01       	movw	r14, r22
 9b2:	8a 01       	movw	r16, r20
 9b4:	fc 01       	movw	r30, r24
 9b6:	16 82       	std	Z+6, r1	; 0x06
 9b8:	17 82       	std	Z+7, r1	; 0x07
 9ba:	83 81       	ldd	r24, Z+3	; 0x03
 9bc:	81 ff       	sbrs	r24, 1
 9be:	cc c1       	rjmp	.+920    	; 0xd58 <vfprintf+0x3d8>
 9c0:	ce 01       	movw	r24, r28
 9c2:	01 96       	adiw	r24, 0x01	; 1
 9c4:	3c 01       	movw	r6, r24
 9c6:	f6 01       	movw	r30, r12
 9c8:	93 81       	ldd	r25, Z+3	; 0x03
 9ca:	f7 01       	movw	r30, r14
 9cc:	93 fd       	sbrc	r25, 3
 9ce:	85 91       	lpm	r24, Z+
 9d0:	93 ff       	sbrs	r25, 3
 9d2:	81 91       	ld	r24, Z+
 9d4:	7f 01       	movw	r14, r30
 9d6:	88 23       	and	r24, r24
 9d8:	09 f4       	brne	.+2      	; 0x9dc <vfprintf+0x5c>
 9da:	ba c1       	rjmp	.+884    	; 0xd50 <vfprintf+0x3d0>
 9dc:	85 32       	cpi	r24, 0x25	; 37
 9de:	39 f4       	brne	.+14     	; 0x9ee <vfprintf+0x6e>
 9e0:	93 fd       	sbrc	r25, 3
 9e2:	85 91       	lpm	r24, Z+
 9e4:	93 ff       	sbrs	r25, 3
 9e6:	81 91       	ld	r24, Z+
 9e8:	7f 01       	movw	r14, r30
 9ea:	85 32       	cpi	r24, 0x25	; 37
 9ec:	29 f4       	brne	.+10     	; 0x9f8 <vfprintf+0x78>
 9ee:	b6 01       	movw	r22, r12
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 9f6:	e7 cf       	rjmp	.-50     	; 0x9c6 <vfprintf+0x46>
 9f8:	91 2c       	mov	r9, r1
 9fa:	21 2c       	mov	r2, r1
 9fc:	31 2c       	mov	r3, r1
 9fe:	ff e1       	ldi	r31, 0x1F	; 31
 a00:	f3 15       	cp	r31, r3
 a02:	d8 f0       	brcs	.+54     	; 0xa3a <vfprintf+0xba>
 a04:	8b 32       	cpi	r24, 0x2B	; 43
 a06:	79 f0       	breq	.+30     	; 0xa26 <vfprintf+0xa6>
 a08:	38 f4       	brcc	.+14     	; 0xa18 <vfprintf+0x98>
 a0a:	80 32       	cpi	r24, 0x20	; 32
 a0c:	79 f0       	breq	.+30     	; 0xa2c <vfprintf+0xac>
 a0e:	83 32       	cpi	r24, 0x23	; 35
 a10:	a1 f4       	brne	.+40     	; 0xa3a <vfprintf+0xba>
 a12:	23 2d       	mov	r18, r3
 a14:	20 61       	ori	r18, 0x10	; 16
 a16:	1d c0       	rjmp	.+58     	; 0xa52 <vfprintf+0xd2>
 a18:	8d 32       	cpi	r24, 0x2D	; 45
 a1a:	61 f0       	breq	.+24     	; 0xa34 <vfprintf+0xb4>
 a1c:	80 33       	cpi	r24, 0x30	; 48
 a1e:	69 f4       	brne	.+26     	; 0xa3a <vfprintf+0xba>
 a20:	23 2d       	mov	r18, r3
 a22:	21 60       	ori	r18, 0x01	; 1
 a24:	16 c0       	rjmp	.+44     	; 0xa52 <vfprintf+0xd2>
 a26:	83 2d       	mov	r24, r3
 a28:	82 60       	ori	r24, 0x02	; 2
 a2a:	38 2e       	mov	r3, r24
 a2c:	e3 2d       	mov	r30, r3
 a2e:	e4 60       	ori	r30, 0x04	; 4
 a30:	3e 2e       	mov	r3, r30
 a32:	2a c0       	rjmp	.+84     	; 0xa88 <vfprintf+0x108>
 a34:	f3 2d       	mov	r31, r3
 a36:	f8 60       	ori	r31, 0x08	; 8
 a38:	1d c0       	rjmp	.+58     	; 0xa74 <vfprintf+0xf4>
 a3a:	37 fc       	sbrc	r3, 7
 a3c:	2d c0       	rjmp	.+90     	; 0xa98 <vfprintf+0x118>
 a3e:	20 ed       	ldi	r18, 0xD0	; 208
 a40:	28 0f       	add	r18, r24
 a42:	2a 30       	cpi	r18, 0x0A	; 10
 a44:	40 f0       	brcs	.+16     	; 0xa56 <vfprintf+0xd6>
 a46:	8e 32       	cpi	r24, 0x2E	; 46
 a48:	b9 f4       	brne	.+46     	; 0xa78 <vfprintf+0xf8>
 a4a:	36 fc       	sbrc	r3, 6
 a4c:	81 c1       	rjmp	.+770    	; 0xd50 <vfprintf+0x3d0>
 a4e:	23 2d       	mov	r18, r3
 a50:	20 64       	ori	r18, 0x40	; 64
 a52:	32 2e       	mov	r3, r18
 a54:	19 c0       	rjmp	.+50     	; 0xa88 <vfprintf+0x108>
 a56:	36 fe       	sbrs	r3, 6
 a58:	06 c0       	rjmp	.+12     	; 0xa66 <vfprintf+0xe6>
 a5a:	8a e0       	ldi	r24, 0x0A	; 10
 a5c:	98 9e       	mul	r9, r24
 a5e:	20 0d       	add	r18, r0
 a60:	11 24       	eor	r1, r1
 a62:	92 2e       	mov	r9, r18
 a64:	11 c0       	rjmp	.+34     	; 0xa88 <vfprintf+0x108>
 a66:	ea e0       	ldi	r30, 0x0A	; 10
 a68:	2e 9e       	mul	r2, r30
 a6a:	20 0d       	add	r18, r0
 a6c:	11 24       	eor	r1, r1
 a6e:	22 2e       	mov	r2, r18
 a70:	f3 2d       	mov	r31, r3
 a72:	f0 62       	ori	r31, 0x20	; 32
 a74:	3f 2e       	mov	r3, r31
 a76:	08 c0       	rjmp	.+16     	; 0xa88 <vfprintf+0x108>
 a78:	8c 36       	cpi	r24, 0x6C	; 108
 a7a:	21 f4       	brne	.+8      	; 0xa84 <vfprintf+0x104>
 a7c:	83 2d       	mov	r24, r3
 a7e:	80 68       	ori	r24, 0x80	; 128
 a80:	38 2e       	mov	r3, r24
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <vfprintf+0x108>
 a84:	88 36       	cpi	r24, 0x68	; 104
 a86:	41 f4       	brne	.+16     	; 0xa98 <vfprintf+0x118>
 a88:	f7 01       	movw	r30, r14
 a8a:	93 fd       	sbrc	r25, 3
 a8c:	85 91       	lpm	r24, Z+
 a8e:	93 ff       	sbrs	r25, 3
 a90:	81 91       	ld	r24, Z+
 a92:	7f 01       	movw	r14, r30
 a94:	81 11       	cpse	r24, r1
 a96:	b3 cf       	rjmp	.-154    	; 0x9fe <vfprintf+0x7e>
 a98:	98 2f       	mov	r25, r24
 a9a:	9f 7d       	andi	r25, 0xDF	; 223
 a9c:	95 54       	subi	r25, 0x45	; 69
 a9e:	93 30       	cpi	r25, 0x03	; 3
 aa0:	28 f4       	brcc	.+10     	; 0xaac <vfprintf+0x12c>
 aa2:	0c 5f       	subi	r16, 0xFC	; 252
 aa4:	1f 4f       	sbci	r17, 0xFF	; 255
 aa6:	9f e3       	ldi	r25, 0x3F	; 63
 aa8:	99 83       	std	Y+1, r25	; 0x01
 aaa:	0d c0       	rjmp	.+26     	; 0xac6 <vfprintf+0x146>
 aac:	83 36       	cpi	r24, 0x63	; 99
 aae:	31 f0       	breq	.+12     	; 0xabc <vfprintf+0x13c>
 ab0:	83 37       	cpi	r24, 0x73	; 115
 ab2:	71 f0       	breq	.+28     	; 0xad0 <vfprintf+0x150>
 ab4:	83 35       	cpi	r24, 0x53	; 83
 ab6:	09 f0       	breq	.+2      	; 0xaba <vfprintf+0x13a>
 ab8:	59 c0       	rjmp	.+178    	; 0xb6c <vfprintf+0x1ec>
 aba:	21 c0       	rjmp	.+66     	; 0xafe <vfprintf+0x17e>
 abc:	f8 01       	movw	r30, r16
 abe:	80 81       	ld	r24, Z
 ac0:	89 83       	std	Y+1, r24	; 0x01
 ac2:	0e 5f       	subi	r16, 0xFE	; 254
 ac4:	1f 4f       	sbci	r17, 0xFF	; 255
 ac6:	88 24       	eor	r8, r8
 ac8:	83 94       	inc	r8
 aca:	91 2c       	mov	r9, r1
 acc:	53 01       	movw	r10, r6
 ace:	13 c0       	rjmp	.+38     	; 0xaf6 <vfprintf+0x176>
 ad0:	28 01       	movw	r4, r16
 ad2:	f2 e0       	ldi	r31, 0x02	; 2
 ad4:	4f 0e       	add	r4, r31
 ad6:	51 1c       	adc	r5, r1
 ad8:	f8 01       	movw	r30, r16
 ada:	a0 80       	ld	r10, Z
 adc:	b1 80       	ldd	r11, Z+1	; 0x01
 ade:	36 fe       	sbrs	r3, 6
 ae0:	03 c0       	rjmp	.+6      	; 0xae8 <vfprintf+0x168>
 ae2:	69 2d       	mov	r22, r9
 ae4:	70 e0       	ldi	r23, 0x00	; 0
 ae6:	02 c0       	rjmp	.+4      	; 0xaec <vfprintf+0x16c>
 ae8:	6f ef       	ldi	r22, 0xFF	; 255
 aea:	7f ef       	ldi	r23, 0xFF	; 255
 aec:	c5 01       	movw	r24, r10
 aee:	0e 94 cf 06 	call	0xd9e	; 0xd9e <strnlen>
 af2:	4c 01       	movw	r8, r24
 af4:	82 01       	movw	r16, r4
 af6:	f3 2d       	mov	r31, r3
 af8:	ff 77       	andi	r31, 0x7F	; 127
 afa:	3f 2e       	mov	r3, r31
 afc:	16 c0       	rjmp	.+44     	; 0xb2a <vfprintf+0x1aa>
 afe:	28 01       	movw	r4, r16
 b00:	22 e0       	ldi	r18, 0x02	; 2
 b02:	42 0e       	add	r4, r18
 b04:	51 1c       	adc	r5, r1
 b06:	f8 01       	movw	r30, r16
 b08:	a0 80       	ld	r10, Z
 b0a:	b1 80       	ldd	r11, Z+1	; 0x01
 b0c:	36 fe       	sbrs	r3, 6
 b0e:	03 c0       	rjmp	.+6      	; 0xb16 <vfprintf+0x196>
 b10:	69 2d       	mov	r22, r9
 b12:	70 e0       	ldi	r23, 0x00	; 0
 b14:	02 c0       	rjmp	.+4      	; 0xb1a <vfprintf+0x19a>
 b16:	6f ef       	ldi	r22, 0xFF	; 255
 b18:	7f ef       	ldi	r23, 0xFF	; 255
 b1a:	c5 01       	movw	r24, r10
 b1c:	0e 94 c4 06 	call	0xd88	; 0xd88 <strnlen_P>
 b20:	4c 01       	movw	r8, r24
 b22:	f3 2d       	mov	r31, r3
 b24:	f0 68       	ori	r31, 0x80	; 128
 b26:	3f 2e       	mov	r3, r31
 b28:	82 01       	movw	r16, r4
 b2a:	33 fc       	sbrc	r3, 3
 b2c:	1b c0       	rjmp	.+54     	; 0xb64 <vfprintf+0x1e4>
 b2e:	82 2d       	mov	r24, r2
 b30:	90 e0       	ldi	r25, 0x00	; 0
 b32:	88 16       	cp	r8, r24
 b34:	99 06       	cpc	r9, r25
 b36:	b0 f4       	brcc	.+44     	; 0xb64 <vfprintf+0x1e4>
 b38:	b6 01       	movw	r22, r12
 b3a:	80 e2       	ldi	r24, 0x20	; 32
 b3c:	90 e0       	ldi	r25, 0x00	; 0
 b3e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 b42:	2a 94       	dec	r2
 b44:	f4 cf       	rjmp	.-24     	; 0xb2e <vfprintf+0x1ae>
 b46:	f5 01       	movw	r30, r10
 b48:	37 fc       	sbrc	r3, 7
 b4a:	85 91       	lpm	r24, Z+
 b4c:	37 fe       	sbrs	r3, 7
 b4e:	81 91       	ld	r24, Z+
 b50:	5f 01       	movw	r10, r30
 b52:	b6 01       	movw	r22, r12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 b5a:	21 10       	cpse	r2, r1
 b5c:	2a 94       	dec	r2
 b5e:	21 e0       	ldi	r18, 0x01	; 1
 b60:	82 1a       	sub	r8, r18
 b62:	91 08       	sbc	r9, r1
 b64:	81 14       	cp	r8, r1
 b66:	91 04       	cpc	r9, r1
 b68:	71 f7       	brne	.-36     	; 0xb46 <vfprintf+0x1c6>
 b6a:	e8 c0       	rjmp	.+464    	; 0xd3c <vfprintf+0x3bc>
 b6c:	84 36       	cpi	r24, 0x64	; 100
 b6e:	11 f0       	breq	.+4      	; 0xb74 <vfprintf+0x1f4>
 b70:	89 36       	cpi	r24, 0x69	; 105
 b72:	41 f5       	brne	.+80     	; 0xbc4 <vfprintf+0x244>
 b74:	f8 01       	movw	r30, r16
 b76:	37 fe       	sbrs	r3, 7
 b78:	07 c0       	rjmp	.+14     	; 0xb88 <vfprintf+0x208>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	82 81       	ldd	r24, Z+2	; 0x02
 b80:	93 81       	ldd	r25, Z+3	; 0x03
 b82:	0c 5f       	subi	r16, 0xFC	; 252
 b84:	1f 4f       	sbci	r17, 0xFF	; 255
 b86:	08 c0       	rjmp	.+16     	; 0xb98 <vfprintf+0x218>
 b88:	60 81       	ld	r22, Z
 b8a:	71 81       	ldd	r23, Z+1	; 0x01
 b8c:	07 2e       	mov	r0, r23
 b8e:	00 0c       	add	r0, r0
 b90:	88 0b       	sbc	r24, r24
 b92:	99 0b       	sbc	r25, r25
 b94:	0e 5f       	subi	r16, 0xFE	; 254
 b96:	1f 4f       	sbci	r17, 0xFF	; 255
 b98:	f3 2d       	mov	r31, r3
 b9a:	ff 76       	andi	r31, 0x6F	; 111
 b9c:	3f 2e       	mov	r3, r31
 b9e:	97 ff       	sbrs	r25, 7
 ba0:	09 c0       	rjmp	.+18     	; 0xbb4 <vfprintf+0x234>
 ba2:	90 95       	com	r25
 ba4:	80 95       	com	r24
 ba6:	70 95       	com	r23
 ba8:	61 95       	neg	r22
 baa:	7f 4f       	sbci	r23, 0xFF	; 255
 bac:	8f 4f       	sbci	r24, 0xFF	; 255
 bae:	9f 4f       	sbci	r25, 0xFF	; 255
 bb0:	f0 68       	ori	r31, 0x80	; 128
 bb2:	3f 2e       	mov	r3, r31
 bb4:	2a e0       	ldi	r18, 0x0A	; 10
 bb6:	30 e0       	ldi	r19, 0x00	; 0
 bb8:	a3 01       	movw	r20, r6
 bba:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 bbe:	88 2e       	mov	r8, r24
 bc0:	86 18       	sub	r8, r6
 bc2:	45 c0       	rjmp	.+138    	; 0xc4e <vfprintf+0x2ce>
 bc4:	85 37       	cpi	r24, 0x75	; 117
 bc6:	31 f4       	brne	.+12     	; 0xbd4 <vfprintf+0x254>
 bc8:	23 2d       	mov	r18, r3
 bca:	2f 7e       	andi	r18, 0xEF	; 239
 bcc:	b2 2e       	mov	r11, r18
 bce:	2a e0       	ldi	r18, 0x0A	; 10
 bd0:	30 e0       	ldi	r19, 0x00	; 0
 bd2:	25 c0       	rjmp	.+74     	; 0xc1e <vfprintf+0x29e>
 bd4:	93 2d       	mov	r25, r3
 bd6:	99 7f       	andi	r25, 0xF9	; 249
 bd8:	b9 2e       	mov	r11, r25
 bda:	8f 36       	cpi	r24, 0x6F	; 111
 bdc:	c1 f0       	breq	.+48     	; 0xc0e <vfprintf+0x28e>
 bde:	18 f4       	brcc	.+6      	; 0xbe6 <vfprintf+0x266>
 be0:	88 35       	cpi	r24, 0x58	; 88
 be2:	79 f0       	breq	.+30     	; 0xc02 <vfprintf+0x282>
 be4:	b5 c0       	rjmp	.+362    	; 0xd50 <vfprintf+0x3d0>
 be6:	80 37       	cpi	r24, 0x70	; 112
 be8:	19 f0       	breq	.+6      	; 0xbf0 <vfprintf+0x270>
 bea:	88 37       	cpi	r24, 0x78	; 120
 bec:	21 f0       	breq	.+8      	; 0xbf6 <vfprintf+0x276>
 bee:	b0 c0       	rjmp	.+352    	; 0xd50 <vfprintf+0x3d0>
 bf0:	e9 2f       	mov	r30, r25
 bf2:	e0 61       	ori	r30, 0x10	; 16
 bf4:	be 2e       	mov	r11, r30
 bf6:	b4 fe       	sbrs	r11, 4
 bf8:	0d c0       	rjmp	.+26     	; 0xc14 <vfprintf+0x294>
 bfa:	fb 2d       	mov	r31, r11
 bfc:	f4 60       	ori	r31, 0x04	; 4
 bfe:	bf 2e       	mov	r11, r31
 c00:	09 c0       	rjmp	.+18     	; 0xc14 <vfprintf+0x294>
 c02:	34 fe       	sbrs	r3, 4
 c04:	0a c0       	rjmp	.+20     	; 0xc1a <vfprintf+0x29a>
 c06:	29 2f       	mov	r18, r25
 c08:	26 60       	ori	r18, 0x06	; 6
 c0a:	b2 2e       	mov	r11, r18
 c0c:	06 c0       	rjmp	.+12     	; 0xc1a <vfprintf+0x29a>
 c0e:	28 e0       	ldi	r18, 0x08	; 8
 c10:	30 e0       	ldi	r19, 0x00	; 0
 c12:	05 c0       	rjmp	.+10     	; 0xc1e <vfprintf+0x29e>
 c14:	20 e1       	ldi	r18, 0x10	; 16
 c16:	30 e0       	ldi	r19, 0x00	; 0
 c18:	02 c0       	rjmp	.+4      	; 0xc1e <vfprintf+0x29e>
 c1a:	20 e1       	ldi	r18, 0x10	; 16
 c1c:	32 e0       	ldi	r19, 0x02	; 2
 c1e:	f8 01       	movw	r30, r16
 c20:	b7 fe       	sbrs	r11, 7
 c22:	07 c0       	rjmp	.+14     	; 0xc32 <vfprintf+0x2b2>
 c24:	60 81       	ld	r22, Z
 c26:	71 81       	ldd	r23, Z+1	; 0x01
 c28:	82 81       	ldd	r24, Z+2	; 0x02
 c2a:	93 81       	ldd	r25, Z+3	; 0x03
 c2c:	0c 5f       	subi	r16, 0xFC	; 252
 c2e:	1f 4f       	sbci	r17, 0xFF	; 255
 c30:	06 c0       	rjmp	.+12     	; 0xc3e <vfprintf+0x2be>
 c32:	60 81       	ld	r22, Z
 c34:	71 81       	ldd	r23, Z+1	; 0x01
 c36:	80 e0       	ldi	r24, 0x00	; 0
 c38:	90 e0       	ldi	r25, 0x00	; 0
 c3a:	0e 5f       	subi	r16, 0xFE	; 254
 c3c:	1f 4f       	sbci	r17, 0xFF	; 255
 c3e:	a3 01       	movw	r20, r6
 c40:	0e 94 16 07 	call	0xe2c	; 0xe2c <__ultoa_invert>
 c44:	88 2e       	mov	r8, r24
 c46:	86 18       	sub	r8, r6
 c48:	fb 2d       	mov	r31, r11
 c4a:	ff 77       	andi	r31, 0x7F	; 127
 c4c:	3f 2e       	mov	r3, r31
 c4e:	36 fe       	sbrs	r3, 6
 c50:	0d c0       	rjmp	.+26     	; 0xc6c <vfprintf+0x2ec>
 c52:	23 2d       	mov	r18, r3
 c54:	2e 7f       	andi	r18, 0xFE	; 254
 c56:	a2 2e       	mov	r10, r18
 c58:	89 14       	cp	r8, r9
 c5a:	58 f4       	brcc	.+22     	; 0xc72 <vfprintf+0x2f2>
 c5c:	34 fe       	sbrs	r3, 4
 c5e:	0b c0       	rjmp	.+22     	; 0xc76 <vfprintf+0x2f6>
 c60:	32 fc       	sbrc	r3, 2
 c62:	09 c0       	rjmp	.+18     	; 0xc76 <vfprintf+0x2f6>
 c64:	83 2d       	mov	r24, r3
 c66:	8e 7e       	andi	r24, 0xEE	; 238
 c68:	a8 2e       	mov	r10, r24
 c6a:	05 c0       	rjmp	.+10     	; 0xc76 <vfprintf+0x2f6>
 c6c:	b8 2c       	mov	r11, r8
 c6e:	a3 2c       	mov	r10, r3
 c70:	03 c0       	rjmp	.+6      	; 0xc78 <vfprintf+0x2f8>
 c72:	b8 2c       	mov	r11, r8
 c74:	01 c0       	rjmp	.+2      	; 0xc78 <vfprintf+0x2f8>
 c76:	b9 2c       	mov	r11, r9
 c78:	a4 fe       	sbrs	r10, 4
 c7a:	0f c0       	rjmp	.+30     	; 0xc9a <vfprintf+0x31a>
 c7c:	fe 01       	movw	r30, r28
 c7e:	e8 0d       	add	r30, r8
 c80:	f1 1d       	adc	r31, r1
 c82:	80 81       	ld	r24, Z
 c84:	80 33       	cpi	r24, 0x30	; 48
 c86:	21 f4       	brne	.+8      	; 0xc90 <vfprintf+0x310>
 c88:	9a 2d       	mov	r25, r10
 c8a:	99 7e       	andi	r25, 0xE9	; 233
 c8c:	a9 2e       	mov	r10, r25
 c8e:	09 c0       	rjmp	.+18     	; 0xca2 <vfprintf+0x322>
 c90:	a2 fe       	sbrs	r10, 2
 c92:	06 c0       	rjmp	.+12     	; 0xca0 <vfprintf+0x320>
 c94:	b3 94       	inc	r11
 c96:	b3 94       	inc	r11
 c98:	04 c0       	rjmp	.+8      	; 0xca2 <vfprintf+0x322>
 c9a:	8a 2d       	mov	r24, r10
 c9c:	86 78       	andi	r24, 0x86	; 134
 c9e:	09 f0       	breq	.+2      	; 0xca2 <vfprintf+0x322>
 ca0:	b3 94       	inc	r11
 ca2:	a3 fc       	sbrc	r10, 3
 ca4:	11 c0       	rjmp	.+34     	; 0xcc8 <vfprintf+0x348>
 ca6:	a0 fe       	sbrs	r10, 0
 ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <vfprintf+0x336>
 caa:	b2 14       	cp	r11, r2
 cac:	88 f4       	brcc	.+34     	; 0xcd0 <vfprintf+0x350>
 cae:	28 0c       	add	r2, r8
 cb0:	92 2c       	mov	r9, r2
 cb2:	9b 18       	sub	r9, r11
 cb4:	0e c0       	rjmp	.+28     	; 0xcd2 <vfprintf+0x352>
 cb6:	b2 14       	cp	r11, r2
 cb8:	60 f4       	brcc	.+24     	; 0xcd2 <vfprintf+0x352>
 cba:	b6 01       	movw	r22, r12
 cbc:	80 e2       	ldi	r24, 0x20	; 32
 cbe:	90 e0       	ldi	r25, 0x00	; 0
 cc0:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 cc4:	b3 94       	inc	r11
 cc6:	f7 cf       	rjmp	.-18     	; 0xcb6 <vfprintf+0x336>
 cc8:	b2 14       	cp	r11, r2
 cca:	18 f4       	brcc	.+6      	; 0xcd2 <vfprintf+0x352>
 ccc:	2b 18       	sub	r2, r11
 cce:	02 c0       	rjmp	.+4      	; 0xcd4 <vfprintf+0x354>
 cd0:	98 2c       	mov	r9, r8
 cd2:	21 2c       	mov	r2, r1
 cd4:	a4 fe       	sbrs	r10, 4
 cd6:	10 c0       	rjmp	.+32     	; 0xcf8 <vfprintf+0x378>
 cd8:	b6 01       	movw	r22, r12
 cda:	80 e3       	ldi	r24, 0x30	; 48
 cdc:	90 e0       	ldi	r25, 0x00	; 0
 cde:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 ce2:	a2 fe       	sbrs	r10, 2
 ce4:	17 c0       	rjmp	.+46     	; 0xd14 <vfprintf+0x394>
 ce6:	a1 fc       	sbrc	r10, 1
 ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <vfprintf+0x370>
 cea:	88 e7       	ldi	r24, 0x78	; 120
 cec:	90 e0       	ldi	r25, 0x00	; 0
 cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x374>
 cf0:	88 e5       	ldi	r24, 0x58	; 88
 cf2:	90 e0       	ldi	r25, 0x00	; 0
 cf4:	b6 01       	movw	r22, r12
 cf6:	0c c0       	rjmp	.+24     	; 0xd10 <vfprintf+0x390>
 cf8:	8a 2d       	mov	r24, r10
 cfa:	86 78       	andi	r24, 0x86	; 134
 cfc:	59 f0       	breq	.+22     	; 0xd14 <vfprintf+0x394>
 cfe:	a1 fe       	sbrs	r10, 1
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <vfprintf+0x386>
 d02:	8b e2       	ldi	r24, 0x2B	; 43
 d04:	01 c0       	rjmp	.+2      	; 0xd08 <vfprintf+0x388>
 d06:	80 e2       	ldi	r24, 0x20	; 32
 d08:	a7 fc       	sbrc	r10, 7
 d0a:	8d e2       	ldi	r24, 0x2D	; 45
 d0c:	b6 01       	movw	r22, r12
 d0e:	90 e0       	ldi	r25, 0x00	; 0
 d10:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d14:	89 14       	cp	r8, r9
 d16:	38 f4       	brcc	.+14     	; 0xd26 <vfprintf+0x3a6>
 d18:	b6 01       	movw	r22, r12
 d1a:	80 e3       	ldi	r24, 0x30	; 48
 d1c:	90 e0       	ldi	r25, 0x00	; 0
 d1e:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d22:	9a 94       	dec	r9
 d24:	f7 cf       	rjmp	.-18     	; 0xd14 <vfprintf+0x394>
 d26:	8a 94       	dec	r8
 d28:	f3 01       	movw	r30, r6
 d2a:	e8 0d       	add	r30, r8
 d2c:	f1 1d       	adc	r31, r1
 d2e:	80 81       	ld	r24, Z
 d30:	b6 01       	movw	r22, r12
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d38:	81 10       	cpse	r8, r1
 d3a:	f5 cf       	rjmp	.-22     	; 0xd26 <vfprintf+0x3a6>
 d3c:	22 20       	and	r2, r2
 d3e:	09 f4       	brne	.+2      	; 0xd42 <vfprintf+0x3c2>
 d40:	42 ce       	rjmp	.-892    	; 0x9c6 <vfprintf+0x46>
 d42:	b6 01       	movw	r22, r12
 d44:	80 e2       	ldi	r24, 0x20	; 32
 d46:	90 e0       	ldi	r25, 0x00	; 0
 d48:	0e 94 da 06 	call	0xdb4	; 0xdb4 <fputc>
 d4c:	2a 94       	dec	r2
 d4e:	f6 cf       	rjmp	.-20     	; 0xd3c <vfprintf+0x3bc>
 d50:	f6 01       	movw	r30, r12
 d52:	86 81       	ldd	r24, Z+6	; 0x06
 d54:	97 81       	ldd	r25, Z+7	; 0x07
 d56:	02 c0       	rjmp	.+4      	; 0xd5c <vfprintf+0x3dc>
 d58:	8f ef       	ldi	r24, 0xFF	; 255
 d5a:	9f ef       	ldi	r25, 0xFF	; 255
 d5c:	2b 96       	adiw	r28, 0x0b	; 11
 d5e:	cd bf       	out	0x3d, r28	; 61
 d60:	de bf       	out	0x3e, r29	; 62
 d62:	df 91       	pop	r29
 d64:	cf 91       	pop	r28
 d66:	1f 91       	pop	r17
 d68:	0f 91       	pop	r16
 d6a:	ff 90       	pop	r15
 d6c:	ef 90       	pop	r14
 d6e:	df 90       	pop	r13
 d70:	cf 90       	pop	r12
 d72:	bf 90       	pop	r11
 d74:	af 90       	pop	r10
 d76:	9f 90       	pop	r9
 d78:	8f 90       	pop	r8
 d7a:	7f 90       	pop	r7
 d7c:	6f 90       	pop	r6
 d7e:	5f 90       	pop	r5
 d80:	4f 90       	pop	r4
 d82:	3f 90       	pop	r3
 d84:	2f 90       	pop	r2
 d86:	08 95       	ret

00000d88 <strnlen_P>:
 d88:	fc 01       	movw	r30, r24
 d8a:	05 90       	lpm	r0, Z+
 d8c:	61 50       	subi	r22, 0x01	; 1
 d8e:	70 40       	sbci	r23, 0x00	; 0
 d90:	01 10       	cpse	r0, r1
 d92:	d8 f7       	brcc	.-10     	; 0xd8a <strnlen_P+0x2>
 d94:	80 95       	com	r24
 d96:	90 95       	com	r25
 d98:	8e 0f       	add	r24, r30
 d9a:	9f 1f       	adc	r25, r31
 d9c:	08 95       	ret

00000d9e <strnlen>:
 d9e:	fc 01       	movw	r30, r24
 da0:	61 50       	subi	r22, 0x01	; 1
 da2:	70 40       	sbci	r23, 0x00	; 0
 da4:	01 90       	ld	r0, Z+
 da6:	01 10       	cpse	r0, r1
 da8:	d8 f7       	brcc	.-10     	; 0xda0 <strnlen+0x2>
 daa:	80 95       	com	r24
 dac:	90 95       	com	r25
 dae:	8e 0f       	add	r24, r30
 db0:	9f 1f       	adc	r25, r31
 db2:	08 95       	ret

00000db4 <fputc>:
 db4:	0f 93       	push	r16
 db6:	1f 93       	push	r17
 db8:	cf 93       	push	r28
 dba:	df 93       	push	r29
 dbc:	fb 01       	movw	r30, r22
 dbe:	23 81       	ldd	r18, Z+3	; 0x03
 dc0:	21 fd       	sbrc	r18, 1
 dc2:	03 c0       	rjmp	.+6      	; 0xdca <fputc+0x16>
 dc4:	8f ef       	ldi	r24, 0xFF	; 255
 dc6:	9f ef       	ldi	r25, 0xFF	; 255
 dc8:	2c c0       	rjmp	.+88     	; 0xe22 <fputc+0x6e>
 dca:	22 ff       	sbrs	r18, 2
 dcc:	16 c0       	rjmp	.+44     	; 0xdfa <fputc+0x46>
 dce:	46 81       	ldd	r20, Z+6	; 0x06
 dd0:	57 81       	ldd	r21, Z+7	; 0x07
 dd2:	24 81       	ldd	r18, Z+4	; 0x04
 dd4:	35 81       	ldd	r19, Z+5	; 0x05
 dd6:	42 17       	cp	r20, r18
 dd8:	53 07       	cpc	r21, r19
 dda:	44 f4       	brge	.+16     	; 0xdec <fputc+0x38>
 ddc:	a0 81       	ld	r26, Z
 dde:	b1 81       	ldd	r27, Z+1	; 0x01
 de0:	9d 01       	movw	r18, r26
 de2:	2f 5f       	subi	r18, 0xFF	; 255
 de4:	3f 4f       	sbci	r19, 0xFF	; 255
 de6:	20 83       	st	Z, r18
 de8:	31 83       	std	Z+1, r19	; 0x01
 dea:	8c 93       	st	X, r24
 dec:	26 81       	ldd	r18, Z+6	; 0x06
 dee:	37 81       	ldd	r19, Z+7	; 0x07
 df0:	2f 5f       	subi	r18, 0xFF	; 255
 df2:	3f 4f       	sbci	r19, 0xFF	; 255
 df4:	26 83       	std	Z+6, r18	; 0x06
 df6:	37 83       	std	Z+7, r19	; 0x07
 df8:	14 c0       	rjmp	.+40     	; 0xe22 <fputc+0x6e>
 dfa:	8b 01       	movw	r16, r22
 dfc:	ec 01       	movw	r28, r24
 dfe:	fb 01       	movw	r30, r22
 e00:	00 84       	ldd	r0, Z+8	; 0x08
 e02:	f1 85       	ldd	r31, Z+9	; 0x09
 e04:	e0 2d       	mov	r30, r0
 e06:	09 95       	icall
 e08:	89 2b       	or	r24, r25
 e0a:	e1 f6       	brne	.-72     	; 0xdc4 <fputc+0x10>
 e0c:	d8 01       	movw	r26, r16
 e0e:	16 96       	adiw	r26, 0x06	; 6
 e10:	8d 91       	ld	r24, X+
 e12:	9c 91       	ld	r25, X
 e14:	17 97       	sbiw	r26, 0x07	; 7
 e16:	01 96       	adiw	r24, 0x01	; 1
 e18:	16 96       	adiw	r26, 0x06	; 6
 e1a:	8d 93       	st	X+, r24
 e1c:	9c 93       	st	X, r25
 e1e:	17 97       	sbiw	r26, 0x07	; 7
 e20:	ce 01       	movw	r24, r28
 e22:	df 91       	pop	r29
 e24:	cf 91       	pop	r28
 e26:	1f 91       	pop	r17
 e28:	0f 91       	pop	r16
 e2a:	08 95       	ret

00000e2c <__ultoa_invert>:
 e2c:	fa 01       	movw	r30, r20
 e2e:	aa 27       	eor	r26, r26
 e30:	28 30       	cpi	r18, 0x08	; 8
 e32:	51 f1       	breq	.+84     	; 0xe88 <__ultoa_invert+0x5c>
 e34:	20 31       	cpi	r18, 0x10	; 16
 e36:	81 f1       	breq	.+96     	; 0xe98 <__ultoa_invert+0x6c>
 e38:	e8 94       	clt
 e3a:	6f 93       	push	r22
 e3c:	6e 7f       	andi	r22, 0xFE	; 254
 e3e:	6e 5f       	subi	r22, 0xFE	; 254
 e40:	7f 4f       	sbci	r23, 0xFF	; 255
 e42:	8f 4f       	sbci	r24, 0xFF	; 255
 e44:	9f 4f       	sbci	r25, 0xFF	; 255
 e46:	af 4f       	sbci	r26, 0xFF	; 255
 e48:	b1 e0       	ldi	r27, 0x01	; 1
 e4a:	3e d0       	rcall	.+124    	; 0xec8 <__ultoa_invert+0x9c>
 e4c:	b4 e0       	ldi	r27, 0x04	; 4
 e4e:	3c d0       	rcall	.+120    	; 0xec8 <__ultoa_invert+0x9c>
 e50:	67 0f       	add	r22, r23
 e52:	78 1f       	adc	r23, r24
 e54:	89 1f       	adc	r24, r25
 e56:	9a 1f       	adc	r25, r26
 e58:	a1 1d       	adc	r26, r1
 e5a:	68 0f       	add	r22, r24
 e5c:	79 1f       	adc	r23, r25
 e5e:	8a 1f       	adc	r24, r26
 e60:	91 1d       	adc	r25, r1
 e62:	a1 1d       	adc	r26, r1
 e64:	6a 0f       	add	r22, r26
 e66:	71 1d       	adc	r23, r1
 e68:	81 1d       	adc	r24, r1
 e6a:	91 1d       	adc	r25, r1
 e6c:	a1 1d       	adc	r26, r1
 e6e:	20 d0       	rcall	.+64     	; 0xeb0 <__ultoa_invert+0x84>
 e70:	09 f4       	brne	.+2      	; 0xe74 <__ultoa_invert+0x48>
 e72:	68 94       	set
 e74:	3f 91       	pop	r19
 e76:	2a e0       	ldi	r18, 0x0A	; 10
 e78:	26 9f       	mul	r18, r22
 e7a:	11 24       	eor	r1, r1
 e7c:	30 19       	sub	r19, r0
 e7e:	30 5d       	subi	r19, 0xD0	; 208
 e80:	31 93       	st	Z+, r19
 e82:	de f6       	brtc	.-74     	; 0xe3a <__ultoa_invert+0xe>
 e84:	cf 01       	movw	r24, r30
 e86:	08 95       	ret
 e88:	46 2f       	mov	r20, r22
 e8a:	47 70       	andi	r20, 0x07	; 7
 e8c:	40 5d       	subi	r20, 0xD0	; 208
 e8e:	41 93       	st	Z+, r20
 e90:	b3 e0       	ldi	r27, 0x03	; 3
 e92:	0f d0       	rcall	.+30     	; 0xeb2 <__ultoa_invert+0x86>
 e94:	c9 f7       	brne	.-14     	; 0xe88 <__ultoa_invert+0x5c>
 e96:	f6 cf       	rjmp	.-20     	; 0xe84 <__ultoa_invert+0x58>
 e98:	46 2f       	mov	r20, r22
 e9a:	4f 70       	andi	r20, 0x0F	; 15
 e9c:	40 5d       	subi	r20, 0xD0	; 208
 e9e:	4a 33       	cpi	r20, 0x3A	; 58
 ea0:	18 f0       	brcs	.+6      	; 0xea8 <__ultoa_invert+0x7c>
 ea2:	49 5d       	subi	r20, 0xD9	; 217
 ea4:	31 fd       	sbrc	r19, 1
 ea6:	40 52       	subi	r20, 0x20	; 32
 ea8:	41 93       	st	Z+, r20
 eaa:	02 d0       	rcall	.+4      	; 0xeb0 <__ultoa_invert+0x84>
 eac:	a9 f7       	brne	.-22     	; 0xe98 <__ultoa_invert+0x6c>
 eae:	ea cf       	rjmp	.-44     	; 0xe84 <__ultoa_invert+0x58>
 eb0:	b4 e0       	ldi	r27, 0x04	; 4
 eb2:	a6 95       	lsr	r26
 eb4:	97 95       	ror	r25
 eb6:	87 95       	ror	r24
 eb8:	77 95       	ror	r23
 eba:	67 95       	ror	r22
 ebc:	ba 95       	dec	r27
 ebe:	c9 f7       	brne	.-14     	; 0xeb2 <__ultoa_invert+0x86>
 ec0:	00 97       	sbiw	r24, 0x00	; 0
 ec2:	61 05       	cpc	r22, r1
 ec4:	71 05       	cpc	r23, r1
 ec6:	08 95       	ret
 ec8:	9b 01       	movw	r18, r22
 eca:	ac 01       	movw	r20, r24
 ecc:	0a 2e       	mov	r0, r26
 ece:	06 94       	lsr	r0
 ed0:	57 95       	ror	r21
 ed2:	47 95       	ror	r20
 ed4:	37 95       	ror	r19
 ed6:	27 95       	ror	r18
 ed8:	ba 95       	dec	r27
 eda:	c9 f7       	brne	.-14     	; 0xece <__ultoa_invert+0xa2>
 edc:	62 0f       	add	r22, r18
 ede:	73 1f       	adc	r23, r19
 ee0:	84 1f       	adc	r24, r20
 ee2:	95 1f       	adc	r25, r21
 ee4:	a0 1d       	adc	r26, r0
 ee6:	08 95       	ret

00000ee8 <_exit>:
 ee8:	f8 94       	cli

00000eea <__stop_program>:
 eea:	ff cf       	rjmp	.-2      	; 0xeea <__stop_program>
