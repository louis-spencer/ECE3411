
EEPROM_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00804000  000010a0  00001134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000059  008040d0  008040d0  00001204  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001260  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000012a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049e4  00000000  00000000  000013f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003459  00000000  00000000  00005dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd8  00000000  00000000  0000922d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  0000a008  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002004  00000000  00000000  0000a260  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b11  00000000  00000000  0000c264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000cd75  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	df e7       	ldi	r29, 0x7F	; 127
      fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
     100:	10 e4       	ldi	r17, 0x40	; 64
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b0 e4       	ldi	r27, 0x40	; 64
     106:	e0 ea       	ldi	r30, 0xA0	; 160
     108:	f0 e1       	ldi	r31, 0x10	; 16
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 3d       	cpi	r26, 0xD0	; 208
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	21 e4       	ldi	r18, 0x41	; 65
     11c:	a0 ed       	ldi	r26, 0xD0	; 208
     11e:	b0 e4       	ldi	r27, 0x40	; 64
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a9 32       	cpi	r26, 0x29	; 41
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
     12e:	0c 94 4e 08 	jmp	0x109c	; 0x109c <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_clock>:
	uint8_t len = read_buf_eeprom(buf);
	
	printf("current pwd: ");
	printf_raw(buf, NULL);
	putchar('\n');
}
     136:	88 ed       	ldi	r24, 0xD8	; 216
     138:	84 bf       	out	0x34, r24	; 52
     13a:	e0 e6       	ldi	r30, 0x60	; 96
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	95 e0       	ldi	r25, 0x05	; 5
     140:	90 a3       	std	Z+32, r25	; 0x20
     142:	84 bf       	out	0x34, r24	; 52
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	80 83       	st	Z, r24
     148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     14c:	84 ff       	sbrs	r24, 4
     14e:	fc cf       	rjmp	.-8      	; 0x148 <init_clock+0x12>
     150:	08 95       	ret

00000152 <init_WDT>:
     152:	a8 95       	wdr
     154:	88 ed       	ldi	r24, 0xD8	; 216
     156:	a8 95       	wdr
     158:	84 bf       	out	0x34, r24	; 52
     15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     15e:	8b 60       	ori	r24, 0x0B	; 11
     160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     164:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
     168:	81 fd       	sbrc	r24, 1
     16a:	fc cf       	rjmp	.-8      	; 0x164 <init_WDT+0x12>
     16c:	08 95       	ret

0000016e <write_buf_eeprom>:
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	8c 01       	movw	r16, r24
     176:	c6 2f       	mov	r28, r22
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 e7 07 	call	0xfce	; 0xfce <eeprom_write_byte>
     180:	4c 2f       	mov	r20, r28
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	c8 01       	movw	r24, r16
     18a:	0e 94 b3 07 	call	0xf66	; 0xf66 <eeprom_write_block>
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <read_buf_eeprom>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	8c 01       	movw	r16, r24
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 df 07 	call	0xfbe	; 0xfbe <eeprom_read_byte>
     1a6:	c8 2f       	mov	r28, r24
     1a8:	01 15       	cp	r16, r1
     1aa:	11 05       	cpc	r17, r1
     1ac:	39 f0       	breq	.+14     	; 0x1bc <read_buf_eeprom+0x26>
     1ae:	48 2f       	mov	r20, r24
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	c8 01       	movw	r24, r16
     1b8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <eeprom_read_block>
     1bc:	8c 2f       	mov	r24, r28
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	08 95       	ret

000001c6 <str_input>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	ec 01       	movw	r28, r24
     1cc:	40 91 23 41 	lds	r20, 0x4123	; 0x804123 <__iob>
     1d0:	50 91 24 41 	lds	r21, 0x4124	; 0x804124 <__iob+0x1>
     1d4:	60 e1       	ldi	r22, 0x10	; 16
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	0e 94 09 04 	call	0x812	; 0x812 <fgets>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	fe 01       	movw	r30, r28
     1e2:	e8 0f       	add	r30, r24
     1e4:	f1 1d       	adc	r31, r1
     1e6:	90 81       	ld	r25, Z
     1e8:	9a 30       	cpi	r25, 0x0A	; 10
     1ea:	11 f0       	breq	.+4      	; 0x1f0 <str_input+0x2a>
     1ec:	8f 30       	cpi	r24, 0x0F	; 15
     1ee:	b8 f3       	brcs	.-18     	; 0x1de <str_input+0x18>
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	06 c0       	rjmp	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1f6:	fe 01       	movw	r30, r28
     1f8:	e2 0f       	add	r30, r18
     1fa:	f3 1f       	adc	r31, r19
     1fc:	10 82       	st	Z, r1
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	20 31       	cpi	r18, 0x10	; 16
     204:	31 05       	cpc	r19, r1
     206:	bc f3       	brlt	.-18     	; 0x1f6 <str_input+0x30>
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <pwd_to_eeprom>:
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	60 97       	sbiw	r28, 0x10	; 16
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	89 e1       	ldi	r24, 0x19	; 25
     220:	90 e4       	ldi	r25, 0x40	; 64
     222:	9f 93       	push	r25
     224:	8f 93       	push	r24
     226:	0e 94 b9 04 	call	0x972	; 0x972 <printf>
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <str_input>
     232:	18 2f       	mov	r17, r24
     234:	60 91 25 41 	lds	r22, 0x4125	; 0x804125 <__iob+0x2>
     238:	70 91 26 41 	lds	r23, 0x4126	; 0x804126 <__iob+0x3>
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     244:	61 2f       	mov	r22, r17
     246:	ce 01       	movw	r24, r28
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	0e 94 b7 00 	call	0x16e	; 0x16e <write_buf_eeprom>
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	60 96       	adiw	r28, 0x10	; 16
     254:	cd bf       	out	0x3d, r28	; 61
     256:	de bf       	out	0x3e, r29	; 62
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <random_char>:

char random_char(int index) {
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	ef 97       	sbiw	r28, 0x3f	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	de bf       	out	0x3e, r29	; 62
	char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
     26e:	2f e3       	ldi	r18, 0x3F	; 63
     270:	e2 e3       	ldi	r30, 0x32	; 50
     272:	f0 e4       	ldi	r31, 0x40	; 64
     274:	de 01       	movw	r26, r28
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	2a 95       	dec	r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <random_char+0x18>
	return charset[index];
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	2c 0f       	add	r18, r28
     286:	3d 1f       	adc	r19, r29
     288:	82 0f       	add	r24, r18
     28a:	93 1f       	adc	r25, r19
}
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	ef 96       	adiw	r28, 0x3f	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	de bf       	out	0x3e, r29	; 62
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <main>:

int main(void)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	a0 97       	sbiw	r28, 0x20	; 32
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	de bf       	out	0x3e, r29	; 62
    wdt_reset();
     2aa:	a8 95       	wdr
	wdt_disable();
     2ac:	88 ed       	ldi	r24, 0xD8	; 216
     2ae:	a8 95       	wdr
     2b0:	84 bf       	out	0x34, r24	; 52
     2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     2b6:	80 7f       	andi	r24, 0xF0	; 240
     2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
	init_clock();
     2bc:	0e 94 9b 00 	call	0x136	; 0x136 <init_clock>
	uart_init(3, 9600, NULL);
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e8       	ldi	r20, 0x80	; 128
     2c6:	55 e2       	ldi	r21, 0x25	; 37
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 37 03 	call	0x66e	; 0x66e <uart_init>

	sei();
     2d2:	78 94       	sei
	
	if (RSTCTRL.RSTFR & RSTCTRL_WDRF_bm) {
     2d4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
     2d8:	83 ff       	sbrs	r24, 3
     2da:	26 c0       	rjmp	.+76     	; 0x328 <main+0x8c>
		printf("\npassword reset\n");
     2dc:	81 e7       	ldi	r24, 0x71	; 113
     2de:	90 e4       	ldi	r25, 0x40	; 64
     2e0:	0e 94 cd 04 	call	0x99a	; 0x99a <puts>
		char buf_eeprom[BUF_SZ];
		for (int i = 0; i < BUF_SZ; i++) {
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	11 c0       	rjmp	.+34     	; 0x30c <main+0x70>
			buf_eeprom[i] = random_char( rand()%62 );
     2ea:	0e 94 ed 03 	call	0x7da	; 0x7da <rand>
     2ee:	6e e3       	ldi	r22, 0x3E	; 62
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	0e 94 58 03 	call	0x6b0	; 0x6b0 <__divmodhi4>
     2f6:	0e 94 30 01 	call	0x260	; 0x260 <random_char>
     2fa:	e1 e1       	ldi	r30, 0x11	; 17
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	e0 0f       	add	r30, r16
     304:	f1 1f       	adc	r31, r17
     306:	80 83       	st	Z, r24
	sei();
	
	if (RSTCTRL.RSTFR & RSTCTRL_WDRF_bm) {
		printf("\npassword reset\n");
		char buf_eeprom[BUF_SZ];
		for (int i = 0; i < BUF_SZ; i++) {
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	00 31       	cpi	r16, 0x10	; 16
     30e:	11 05       	cpc	r17, r1
     310:	64 f3       	brlt	.-40     	; 0x2ea <main+0x4e>
			buf_eeprom[i] = random_char( rand()%62 );
		}
		buf_eeprom[BUF_SZ-1] = '\0';
     312:	18 a2       	std	Y+32, r1	; 0x20
		
		write_buf_eeprom(buf_eeprom, BUF_SZ);
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	ce 01       	movw	r24, r28
     318:	41 96       	adiw	r24, 0x11	; 17
     31a:	0e 94 b7 00 	call	0x16e	; 0x16e <write_buf_eeprom>
		RSTCTRL.RSTFR |= RSTCTRL_WDRF_bm;		
     31e:	e0 e4       	ldi	r30, 0x40	; 64
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	88 60       	ori	r24, 0x08	; 8
     326:	80 83       	st	Z, r24
	}
	
	char eeprom_buf[BUF_SZ];
	uint8_t eeprom_len = read_buf_eeprom(eeprom_buf);
     328:	ce 01       	movw	r24, r28
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	0e 94 cb 00 	call	0x196	; 0x196 <read_buf_eeprom>
     330:	18 2f       	mov	r17, r24
	
	if (eeprom_len == 0xff) {
     332:	8f 3f       	cpi	r24, 0xFF	; 255
     334:	39 f4       	brne	.+14     	; 0x344 <main+0xa8>
		printf("\n--set password--\n");
     336:	81 e8       	ldi	r24, 0x81	; 129
     338:	90 e4       	ldi	r25, 0x40	; 64
     33a:	0e 94 cd 04 	call	0x99a	; 0x99a <puts>
		pwd_to_eeprom();
     33e:	0e 94 07 01 	call	0x20e	; 0x20e <pwd_to_eeprom>
     342:	50 c0       	rjmp	.+160    	; 0x3e4 <main+0x148>
	} else {
		printf("\n--guess password--\n");
     344:	83 e9       	ldi	r24, 0x93	; 147
     346:	90 e4       	ldi	r25, 0x40	; 64
     348:	0e 94 cd 04 	call	0x99a	; 0x99a <puts>
		//print_pwd_eeprom();
		//init_WDT();
		char cmp_buf[BUF_SZ];
		
		while (no_match_flag != 0) {
     34c:	3f c0       	rjmp	.+126    	; 0x3cc <main+0x130>
			printf("enter password: ");
     34e:	87 ea       	ldi	r24, 0xA7	; 167
     350:	90 e4       	ldi	r25, 0x40	; 64
     352:	9f 93       	push	r25
     354:	8f 93       	push	r24
     356:	0e 94 b9 04 	call	0x972	; 0x972 <printf>
			uint8_t cmp_len = str_input(cmp_buf);
     35a:	ce 01       	movw	r24, r28
     35c:	41 96       	adiw	r24, 0x11	; 17
     35e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <str_input>
     362:	08 2f       	mov	r16, r24
			putchar('\n');
     364:	60 91 25 41 	lds	r22, 0x4125	; 0x804125 <__iob+0x2>
     368:	70 91 26 41 	lds	r23, 0x4126	; 0x804126 <__iob+0x3>
     36c:	8a e0       	ldi	r24, 0x0A	; 10
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
			no_match_flag = (memcmp(eeprom_buf, cmp_buf, eeprom_len) || !(eeprom_len == cmp_len));
     374:	41 2f       	mov	r20, r17
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	be 01       	movw	r22, r28
     37a:	6f 5e       	subi	r22, 0xEF	; 239
     37c:	7f 4f       	sbci	r23, 0xFF	; 255
     37e:	ce 01       	movw	r24, r28
     380:	01 96       	adiw	r24, 0x01	; 1
     382:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <memcmp>
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	00 97       	sbiw	r24, 0x00	; 0
     38c:	29 f4       	brne	.+10     	; 0x398 <main+0xfc>
     38e:	10 17       	cp	r17, r16
     390:	29 f0       	breq	.+10     	; 0x39c <main+0x100>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	02 c0       	rjmp	.+4      	; 0x39c <main+0x100>
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <no_match_flag>
			if (no_match_flag == 0) break;
     3a0:	88 23       	and	r24, r24
     3a2:	c1 f0       	breq	.+48     	; 0x3d4 <main+0x138>
			printf("wrong password\n");
     3a4:	88 eb       	ldi	r24, 0xB8	; 184
     3a6:	90 e4       	ldi	r25, 0x40	; 64
     3a8:	0e 94 cd 04 	call	0x99a	; 0x99a <puts>
			memset(cmp_buf, 0, BUF_SZ);
     3ac:	fe 01       	movw	r30, r28
     3ae:	71 96       	adiw	r30, 0x11	; 17
     3b0:	80 e1       	ldi	r24, 0x10	; 16
     3b2:	df 01       	movw	r26, r30
     3b4:	1d 92       	st	X+, r1
     3b6:	8a 95       	dec	r24
     3b8:	e9 f7       	brne	.-6      	; 0x3b4 <main+0x118>
			
			if (!start_wdt_flag) {
     3ba:	80 91 d0 40 	lds	r24, 0x40D0	; 0x8040d0 <__data_end>
     3be:	81 11       	cpse	r24, r1
     3c0:	05 c0       	rjmp	.+10     	; 0x3cc <main+0x130>
				init_WDT();
     3c2:	0e 94 a9 00 	call	0x152	; 0x152 <init_WDT>
				start_wdt_flag = 1;
     3c6:	81 e0       	ldi	r24, 0x01	; 1
     3c8:	80 93 d0 40 	sts	0x40D0, r24	; 0x8040d0 <__data_end>
		printf("\n--guess password--\n");
		//print_pwd_eeprom();
		//init_WDT();
		char cmp_buf[BUF_SZ];
		
		while (no_match_flag != 0) {
     3cc:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <no_match_flag>
     3d0:	81 11       	cpse	r24, r1
     3d2:	bd cf       	rjmp	.-134    	; 0x34e <main+0xb2>
				init_WDT();
				start_wdt_flag = 1;
			}
		}
		
		wdt_disable();
     3d4:	88 ed       	ldi	r24, 0xD8	; 216
     3d6:	a8 95       	wdr
     3d8:	84 bf       	out	0x34, r24	; 52
     3da:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     3de:	80 7f       	andi	r24, 0xF0	; 240
     3e0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
	}
	
	VPORTB.DIR = 0xff;
     3e4:	8f ef       	ldi	r24, 0xFF	; 255
     3e6:	84 b9       	out	0x04, r24	; 4
	VPORTB.OUT = 0x00;	
     3e8:	15 b8       	out	0x05, r1	; 5
     3ea:	ff cf       	rjmp	.-2      	; 0x3ea <main+0x14e>

000003ec <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
     3ec:	cf 93       	push	r28
     3ee:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
     3f0:	81 11       	cpse	r24, r1
     3f2:	06 c0       	rjmp	.+12     	; 0x400 <__LOCK_REGION_LENGTH__>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
     3f4:	81 e0       	ldi	r24, 0x01	; 1
     3f6:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
     3fa:	c0 e0       	ldi	r28, 0x00	; 0
     3fc:	d8 e0       	ldi	r29, 0x08	; 8
     3fe:	19 c0       	rjmp	.+50     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
     400:	81 30       	cpi	r24, 0x01	; 1
     402:	29 f4       	brne	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
     404:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
     408:	c0 e2       	ldi	r28, 0x20	; 32
     40a:	d8 e0       	ldi	r29, 0x08	; 8
     40c:	12 c0       	rjmp	.+36     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
     40e:	82 30       	cpi	r24, 0x02	; 2
     410:	31 f4       	brne	.+12     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
     418:	c0 e4       	ldi	r28, 0x40	; 64
     41a:	d8 e0       	ldi	r29, 0x08	; 8
     41c:	0a c0       	rjmp	.+20     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
     41e:	83 30       	cpi	r24, 0x03	; 3
     420:	31 f4       	brne	.+12     	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
     422:	81 e0       	ldi	r24, 0x01	; 1
     424:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
     428:	c0 e6       	ldi	r28, 0x60	; 96
     42a:	d8 e0       	ldi	r29, 0x08	; 8
     42c:	02 c0       	rjmp	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
     42e:	c0 e0       	ldi	r28, 0x00	; 0
     430:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
     432:	db 01       	movw	r26, r22
     434:	ca 01       	movw	r24, r20
     436:	88 0f       	add	r24, r24
     438:	99 1f       	adc	r25, r25
     43a:	aa 1f       	adc	r26, r26
     43c:	bb 1f       	adc	r27, r27
     43e:	88 0f       	add	r24, r24
     440:	99 1f       	adc	r25, r25
     442:	aa 1f       	adc	r26, r26
     444:	bb 1f       	adc	r27, r27
     446:	9c 01       	movw	r18, r24
     448:	ad 01       	movw	r20, r26
     44a:	22 0f       	add	r18, r18
     44c:	33 1f       	adc	r19, r19
     44e:	44 1f       	adc	r20, r20
     450:	55 1f       	adc	r21, r21
     452:	22 0f       	add	r18, r18
     454:	33 1f       	adc	r19, r19
     456:	44 1f       	adc	r20, r20
     458:	55 1f       	adc	r21, r21
     45a:	60 e0       	ldi	r22, 0x00	; 0
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	89 e0       	ldi	r24, 0x09	; 9
     460:	9d e3       	ldi	r25, 0x3D	; 61
     462:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodsi4>
     466:	28 87       	std	Y+8, r18	; 0x08
     468:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
     46a:	8e 81       	ldd	r24, Y+6	; 0x06
     46c:	80 6c       	ori	r24, 0xC0	; 192
     46e:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
     470:	ce 01       	movw	r24, r28
     472:	df 91       	pop	r29
     474:	cf 91       	pop	r28
     476:	08 95       	ret

00000478 <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
     478:	fc 01       	movw	r30, r24
     47a:	62 83       	std	Z+2, r22	; 0x02
     47c:	08 95       	ret

0000047e <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
     47e:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
     480:	94 81       	ldd	r25, Z+4	; 0x04
     482:	95 ff       	sbrs	r25, 5
     484:	fd cf       	rjmp	.-6      	; 0x480 <usart_wait_until_transmit_ready+0x2>
}
     486:	08 95       	ret

00000488 <usart_receive_data>:

int usart_receive_data(void* ptr)
{
     488:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
     48a:	94 81       	ldd	r25, Z+4	; 0x04
     48c:	99 23       	and	r25, r25
     48e:	ec f7       	brge	.-6      	; 0x48a <usart_receive_data+0x2>
	return (usart->RXDATAL);
     490:	80 81       	ld	r24, Z
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	08 95       	ret

00000496 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     496:	0f 93       	push	r16
     498:	1f 93       	push	r17
     49a:	cf 93       	push	r28
     49c:	c8 2f       	mov	r28, r24
     49e:	8b 01       	movw	r16, r22
	if (c == '\a') {
     4a0:	87 30       	cpi	r24, 0x07	; 7
     4a2:	69 f4       	brne	.+26     	; 0x4be <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
     4a4:	20 91 27 41 	lds	r18, 0x4127	; 0x804127 <__iob+0x4>
     4a8:	30 91 28 41 	lds	r19, 0x4128	; 0x804128 <__iob+0x5>
     4ac:	47 e0       	ldi	r20, 0x07	; 7
     4ae:	50 e0       	ldi	r21, 0x00	; 0
     4b0:	61 e0       	ldi	r22, 0x01	; 1
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	87 ec       	ldi	r24, 0xC7	; 199
     4b6:	90 e4       	ldi	r25, 0x40	; 64
     4b8:	0e 94 77 04 	call	0x8ee	; 0x8ee <fwrite>
		return 0;
     4bc:	0f c0       	rjmp	.+30     	; 0x4dc <uart_putchar+0x46>
	}

	if (c == '\n') {
     4be:	8a 30       	cpi	r24, 0x0A	; 10
     4c0:	19 f4       	brne	.+6      	; 0x4c8 <uart_putchar+0x32>
		uart_putchar('\r', stream);
     4c2:	8d e0       	ldi	r24, 0x0D	; 13
     4c4:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
     4c8:	f8 01       	movw	r30, r16
     4ca:	04 85       	ldd	r16, Z+12	; 0x0c
     4cc:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
     4ce:	c8 01       	movw	r24, r16
     4d0:	0e 94 3f 02 	call	0x47e	; 0x47e <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
     4d4:	6c 2f       	mov	r22, r28
     4d6:	c8 01       	movw	r24, r16
     4d8:	0e 94 3c 02 	call	0x478	; 0x478 <usart_transmit_data>

	return 0;
}
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	90 e0       	ldi	r25, 0x00	; 0
     4e0:	cf 91       	pop	r28
     4e2:	1f 91       	pop	r17
     4e4:	0f 91       	pop	r16
     4e6:	08 95       	ret

000004e8 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     4e8:	ef 92       	push	r14
     4ea:	ff 92       	push	r15
     4ec:	0f 93       	push	r16
     4ee:	1f 93       	push	r17
     4f0:	cf 93       	push	r28
     4f2:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
     4f4:	20 91 21 41 	lds	r18, 0x4121	; 0x804121 <rxp.1995>
     4f8:	30 91 22 41 	lds	r19, 0x4122	; 0x804122 <rxp.1995+0x1>
     4fc:	23 2b       	or	r18, r19
     4fe:	09 f0       	breq	.+2      	; 0x502 <uart_getchar+0x1a>
     500:	9a c0       	rjmp	.+308    	; 0x636 <uart_getchar+0x14e>
     502:	8c 01       	movw	r16, r24
     504:	c1 ed       	ldi	r28, 0xD1	; 209
     506:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
     508:	f8 01       	movw	r30, r16
     50a:	84 85       	ldd	r24, Z+12	; 0x0c
     50c:	95 85       	ldd	r25, Z+13	; 0x0d
     50e:	0e 94 44 02 	call	0x488	; 0x488 <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
     512:	8d 30       	cpi	r24, 0x0D	; 13
     514:	09 f4       	brne	.+2      	; 0x518 <uart_getchar+0x30>
				c = '\n';
     516:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
     518:	8a 30       	cpi	r24, 0x0A	; 10
     51a:	59 f4       	brne	.+22     	; 0x532 <uart_getchar+0x4a>
			    *cp = c;
     51c:	88 83       	st	Y, r24
				uart_putchar(c, stream);
     51e:	b8 01       	movw	r22, r16
     520:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
			    rxp = b;
     524:	81 ed       	ldi	r24, 0xD1	; 209
     526:	90 e4       	ldi	r25, 0x40	; 64
     528:	80 93 21 41 	sts	0x4121, r24	; 0x804121 <rxp.1995>
     52c:	90 93 22 41 	sts	0x4122, r25	; 0x804122 <rxp.1995+0x1>
				break;
     530:	82 c0       	rjmp	.+260    	; 0x636 <uart_getchar+0x14e>
			}
			else if (c == '\t')
     532:	89 30       	cpi	r24, 0x09	; 9
     534:	09 f4       	brne	.+2      	; 0x538 <uart_getchar+0x50>
				c = ' ';
     536:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     538:	90 ee       	ldi	r25, 0xE0	; 224
     53a:	98 0f       	add	r25, r24
     53c:	9f 35       	cpi	r25, 0x5F	; 95
     53e:	10 f0       	brcs	.+4      	; 0x544 <uart_getchar+0x5c>
     540:	80 3a       	cpi	r24, 0xA0	; 160
     542:	98 f0       	brcs	.+38     	; 0x56a <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
     544:	f1 e4       	ldi	r31, 0x41	; 65
     546:	c0 32       	cpi	r28, 0x20	; 32
     548:	df 07       	cpc	r29, r31
     54a:	29 f4       	brne	.+10     	; 0x556 <uart_getchar+0x6e>
					uart_putchar('\a', stream);
     54c:	b8 01       	movw	r22, r16
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
     554:	d9 cf       	rjmp	.-78     	; 0x508 <uart_getchar+0x20>
				else {
					*cp++ = c;
     556:	7e 01       	movw	r14, r28
     558:	9f ef       	ldi	r25, 0xFF	; 255
     55a:	e9 1a       	sub	r14, r25
     55c:	f9 0a       	sbc	r15, r25
     55e:	88 83       	st	Y, r24
					uart_putchar(c, stream);
     560:	b8 01       	movw	r22, r16
     562:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
     566:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
     568:	cf cf       	rjmp	.-98     	; 0x508 <uart_getchar+0x20>
			}

			switch (c) {
     56a:	82 31       	cpi	r24, 0x12	; 18
     56c:	19 f1       	breq	.+70     	; 0x5b4 <uart_getchar+0xcc>
     56e:	30 f4       	brcc	.+12     	; 0x57c <uart_getchar+0x94>
     570:	83 30       	cpi	r24, 0x03	; 3
     572:	09 f4       	brne	.+2      	; 0x576 <uart_getchar+0x8e>
     574:	73 c0       	rjmp	.+230    	; 0x65c <uart_getchar+0x174>
     576:	88 30       	cpi	r24, 0x08	; 8
     578:	49 f0       	breq	.+18     	; 0x58c <uart_getchar+0xa4>
     57a:	c6 cf       	rjmp	.-116    	; 0x508 <uart_getchar+0x20>
     57c:	87 31       	cpi	r24, 0x17	; 23
     57e:	09 f4       	brne	.+2      	; 0x582 <uart_getchar+0x9a>
     580:	4e c0       	rjmp	.+156    	; 0x61e <uart_getchar+0x136>
     582:	8f 37       	cpi	r24, 0x7F	; 127
     584:	19 f0       	breq	.+6      	; 0x58c <uart_getchar+0xa4>
     586:	85 31       	cpi	r24, 0x15	; 21
     588:	b9 f1       	breq	.+110    	; 0x5f8 <uart_getchar+0x110>
     58a:	be cf       	rjmp	.-132    	; 0x508 <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
     58c:	e0 e4       	ldi	r30, 0x40	; 64
     58e:	c1 3d       	cpi	r28, 0xD1	; 209
     590:	de 07       	cpc	r29, r30
     592:	09 f0       	breq	.+2      	; 0x596 <uart_getchar+0xae>
     594:	08 f4       	brcc	.+2      	; 0x598 <uart_getchar+0xb0>
     596:	b8 cf       	rjmp	.-144    	; 0x508 <uart_getchar+0x20>
						uart_putchar('\b', stream);
     598:	b8 01       	movw	r22, r16
     59a:	88 e0       	ldi	r24, 0x08	; 8
     59c:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar(' ', stream);
     5a0:	b8 01       	movw	r22, r16
     5a2:	80 e2       	ldi	r24, 0x20	; 32
     5a4:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar('\b', stream);
     5a8:	b8 01       	movw	r22, r16
     5aa:	88 e0       	ldi	r24, 0x08	; 8
     5ac:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						cp--;
     5b0:	21 97       	sbiw	r28, 0x01	; 1
     5b2:	aa cf       	rjmp	.-172    	; 0x508 <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
     5b4:	b8 01       	movw	r22, r16
     5b6:	8d e0       	ldi	r24, 0x0D	; 13
     5b8:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
     5bc:	0f 2e       	mov	r0, r31
     5be:	f1 ed       	ldi	r31, 0xD1	; 209
     5c0:	ef 2e       	mov	r14, r31
     5c2:	f0 e4       	ldi	r31, 0x40	; 64
     5c4:	ff 2e       	mov	r15, r31
     5c6:	f0 2d       	mov	r31, r0
     5c8:	06 c0       	rjmp	.+12     	; 0x5d6 <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
     5ca:	b8 01       	movw	r22, r16
     5cc:	f7 01       	movw	r30, r14
     5ce:	81 91       	ld	r24, Z+
     5d0:	7f 01       	movw	r14, r30
     5d2:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
     5d6:	ec 16       	cp	r14, r28
     5d8:	fd 06       	cpc	r15, r29
     5da:	b8 f3       	brcs	.-18     	; 0x5ca <uart_getchar+0xe2>
     5dc:	95 cf       	rjmp	.-214    	; 0x508 <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
     5de:	b8 01       	movw	r22, r16
     5e0:	88 e0       	ldi	r24, 0x08	; 8
     5e2:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar(' ', stream);
     5e6:	b8 01       	movw	r22, r16
     5e8:	80 e2       	ldi	r24, 0x20	; 32
     5ea:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar('\b', stream);
     5ee:	b8 01       	movw	r22, r16
     5f0:	88 e0       	ldi	r24, 0x08	; 8
     5f2:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						cp--;
     5f6:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
     5f8:	f0 e4       	ldi	r31, 0x40	; 64
     5fa:	c1 3d       	cpi	r28, 0xD1	; 209
     5fc:	df 07       	cpc	r29, r31
     5fe:	09 f0       	breq	.+2      	; 0x602 <uart_getchar+0x11a>
     600:	70 f7       	brcc	.-36     	; 0x5de <uart_getchar+0xf6>
     602:	82 cf       	rjmp	.-252    	; 0x508 <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
     604:	b8 01       	movw	r22, r16
     606:	88 e0       	ldi	r24, 0x08	; 8
     608:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar(' ', stream);
     60c:	b8 01       	movw	r22, r16
     60e:	80 e2       	ldi	r24, 0x20	; 32
     610:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						uart_putchar('\b', stream);
     614:	b8 01       	movw	r22, r16
     616:	88 e0       	ldi	r24, 0x08	; 8
     618:	0e 94 4b 02 	call	0x496	; 0x496 <uart_putchar>
						cp--;
     61c:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
     61e:	80 e4       	ldi	r24, 0x40	; 64
     620:	c1 3d       	cpi	r28, 0xD1	; 209
     622:	d8 07       	cpc	r29, r24
     624:	09 f0       	breq	.+2      	; 0x628 <uart_getchar+0x140>
     626:	08 f4       	brcc	.+2      	; 0x62a <uart_getchar+0x142>
     628:	6f cf       	rjmp	.-290    	; 0x508 <uart_getchar+0x20>
     62a:	fe 01       	movw	r30, r28
     62c:	31 97       	sbiw	r30, 0x01	; 1
     62e:	80 81       	ld	r24, Z
     630:	80 32       	cpi	r24, 0x20	; 32
     632:	41 f7       	brne	.-48     	; 0x604 <uart_getchar+0x11c>
     634:	69 cf       	rjmp	.-302    	; 0x508 <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
     636:	e0 91 21 41 	lds	r30, 0x4121	; 0x804121 <rxp.1995>
     63a:	f0 91 22 41 	lds	r31, 0x4122	; 0x804122 <rxp.1995+0x1>
     63e:	cf 01       	movw	r24, r30
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	80 93 21 41 	sts	0x4121, r24	; 0x804121 <rxp.1995>
     646:	90 93 22 41 	sts	0x4122, r25	; 0x804122 <rxp.1995+0x1>
     64a:	80 81       	ld	r24, Z
	if (c == '\n')
     64c:	8a 30       	cpi	r24, 0x0A	; 10
     64e:	21 f4       	brne	.+8      	; 0x658 <uart_getchar+0x170>
		rxp = 0;
     650:	10 92 21 41 	sts	0x4121, r1	; 0x804121 <rxp.1995>
     654:	10 92 22 41 	sts	0x4122, r1	; 0x804122 <rxp.1995+0x1>

	return c;
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	02 c0       	rjmp	.+4      	; 0x660 <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
     660:	df 91       	pop	r29
     662:	cf 91       	pop	r28
     664:	1f 91       	pop	r17
     666:	0f 91       	pop	r16
     668:	ff 90       	pop	r15
     66a:	ef 90       	pop	r14
     66c:	08 95       	ret

0000066e <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
     66e:	cf 93       	push	r28
     670:	df 93       	push	r29
     672:	e9 01       	movw	r28, r18
	if (stream) {
     674:	20 97       	sbiw	r28, 0x00	; 0
     676:	49 f0       	breq	.+18     	; 0x68a <uart_init+0x1c>
		*stream = uartFile;
     678:	9e e0       	ldi	r25, 0x0E	; 14
     67a:	e5 e0       	ldi	r30, 0x05	; 5
     67c:	f0 e4       	ldi	r31, 0x40	; 64
     67e:	d9 01       	movw	r26, r18
     680:	01 90       	ld	r0, Z+
     682:	0d 92       	st	X+, r0
     684:	9a 95       	dec	r25
     686:	e1 f7       	brne	.-8      	; 0x680 <uart_init+0x12>
     688:	0b c0       	rjmp	.+22     	; 0x6a0 <uart_init+0x32>
	} else {
		stdout = &uartFile;
     68a:	e3 e2       	ldi	r30, 0x23	; 35
     68c:	f1 e4       	ldi	r31, 0x41	; 65
     68e:	25 e0       	ldi	r18, 0x05	; 5
     690:	30 e4       	ldi	r19, 0x40	; 64
     692:	22 83       	std	Z+2, r18	; 0x02
     694:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
     696:	20 83       	st	Z, r18
     698:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
     69a:	24 83       	std	Z+4, r18	; 0x04
     69c:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
     69e:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
     6a0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <usart_init>
	fdev_set_udata(stream, usart);
     6a4:	8c 87       	std	Y+12, r24	; 0x0c
     6a6:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
     6a8:	ce 01       	movw	r24, r28
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <__divmodhi4>:
     6b0:	97 fb       	bst	r25, 7
     6b2:	07 2e       	mov	r0, r23
     6b4:	16 f4       	brtc	.+4      	; 0x6ba <__divmodhi4+0xa>
     6b6:	00 94       	com	r0
     6b8:	07 d0       	rcall	.+14     	; 0x6c8 <__divmodhi4_neg1>
     6ba:	77 fd       	sbrc	r23, 7
     6bc:	09 d0       	rcall	.+18     	; 0x6d0 <__divmodhi4_neg2>
     6be:	0e 94 8e 03 	call	0x71c	; 0x71c <__udivmodhi4>
     6c2:	07 fc       	sbrc	r0, 7
     6c4:	05 d0       	rcall	.+10     	; 0x6d0 <__divmodhi4_neg2>
     6c6:	3e f4       	brtc	.+14     	; 0x6d6 <__divmodhi4_exit>

000006c8 <__divmodhi4_neg1>:
     6c8:	90 95       	com	r25
     6ca:	81 95       	neg	r24
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	08 95       	ret

000006d0 <__divmodhi4_neg2>:
     6d0:	70 95       	com	r23
     6d2:	61 95       	neg	r22
     6d4:	7f 4f       	sbci	r23, 0xFF	; 255

000006d6 <__divmodhi4_exit>:
     6d6:	08 95       	ret

000006d8 <__udivmodsi4>:
     6d8:	a1 e2       	ldi	r26, 0x21	; 33
     6da:	1a 2e       	mov	r1, r26
     6dc:	aa 1b       	sub	r26, r26
     6de:	bb 1b       	sub	r27, r27
     6e0:	fd 01       	movw	r30, r26
     6e2:	0d c0       	rjmp	.+26     	; 0x6fe <__udivmodsi4_ep>

000006e4 <__udivmodsi4_loop>:
     6e4:	aa 1f       	adc	r26, r26
     6e6:	bb 1f       	adc	r27, r27
     6e8:	ee 1f       	adc	r30, r30
     6ea:	ff 1f       	adc	r31, r31
     6ec:	a2 17       	cp	r26, r18
     6ee:	b3 07       	cpc	r27, r19
     6f0:	e4 07       	cpc	r30, r20
     6f2:	f5 07       	cpc	r31, r21
     6f4:	20 f0       	brcs	.+8      	; 0x6fe <__udivmodsi4_ep>
     6f6:	a2 1b       	sub	r26, r18
     6f8:	b3 0b       	sbc	r27, r19
     6fa:	e4 0b       	sbc	r30, r20
     6fc:	f5 0b       	sbc	r31, r21

000006fe <__udivmodsi4_ep>:
     6fe:	66 1f       	adc	r22, r22
     700:	77 1f       	adc	r23, r23
     702:	88 1f       	adc	r24, r24
     704:	99 1f       	adc	r25, r25
     706:	1a 94       	dec	r1
     708:	69 f7       	brne	.-38     	; 0x6e4 <__udivmodsi4_loop>
     70a:	60 95       	com	r22
     70c:	70 95       	com	r23
     70e:	80 95       	com	r24
     710:	90 95       	com	r25
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	bd 01       	movw	r22, r26
     718:	cf 01       	movw	r24, r30
     71a:	08 95       	ret

0000071c <__udivmodhi4>:
     71c:	aa 1b       	sub	r26, r26
     71e:	bb 1b       	sub	r27, r27
     720:	51 e1       	ldi	r21, 0x11	; 17
     722:	07 c0       	rjmp	.+14     	; 0x732 <__udivmodhi4_ep>

00000724 <__udivmodhi4_loop>:
     724:	aa 1f       	adc	r26, r26
     726:	bb 1f       	adc	r27, r27
     728:	a6 17       	cp	r26, r22
     72a:	b7 07       	cpc	r27, r23
     72c:	10 f0       	brcs	.+4      	; 0x732 <__udivmodhi4_ep>
     72e:	a6 1b       	sub	r26, r22
     730:	b7 0b       	sbc	r27, r23

00000732 <__udivmodhi4_ep>:
     732:	88 1f       	adc	r24, r24
     734:	99 1f       	adc	r25, r25
     736:	5a 95       	dec	r21
     738:	a9 f7       	brne	.-22     	; 0x724 <__udivmodhi4_loop>
     73a:	80 95       	com	r24
     73c:	90 95       	com	r25
     73e:	bc 01       	movw	r22, r24
     740:	cd 01       	movw	r24, r26
     742:	08 95       	ret

00000744 <do_rand>:
     744:	8f 92       	push	r8
     746:	9f 92       	push	r9
     748:	af 92       	push	r10
     74a:	bf 92       	push	r11
     74c:	cf 92       	push	r12
     74e:	df 92       	push	r13
     750:	ef 92       	push	r14
     752:	ff 92       	push	r15
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ec 01       	movw	r28, r24
     75a:	68 81       	ld	r22, Y
     75c:	79 81       	ldd	r23, Y+1	; 0x01
     75e:	8a 81       	ldd	r24, Y+2	; 0x02
     760:	9b 81       	ldd	r25, Y+3	; 0x03
     762:	61 15       	cp	r22, r1
     764:	71 05       	cpc	r23, r1
     766:	81 05       	cpc	r24, r1
     768:	91 05       	cpc	r25, r1
     76a:	21 f4       	brne	.+8      	; 0x774 <do_rand+0x30>
     76c:	64 e2       	ldi	r22, 0x24	; 36
     76e:	79 ed       	ldi	r23, 0xD9	; 217
     770:	8b e5       	ldi	r24, 0x5B	; 91
     772:	97 e0       	ldi	r25, 0x07	; 7
     774:	2d e1       	ldi	r18, 0x1D	; 29
     776:	33 ef       	ldi	r19, 0xF3	; 243
     778:	41 e0       	ldi	r20, 0x01	; 1
     77a:	50 e0       	ldi	r21, 0x00	; 0
     77c:	0e 94 ff 07 	call	0xffe	; 0xffe <__divmodsi4>
     780:	49 01       	movw	r8, r18
     782:	5a 01       	movw	r10, r20
     784:	9b 01       	movw	r18, r22
     786:	ac 01       	movw	r20, r24
     788:	a7 ea       	ldi	r26, 0xA7	; 167
     78a:	b1 e4       	ldi	r27, 0x41	; 65
     78c:	0e 94 1e 08 	call	0x103c	; 0x103c <__muluhisi3>
     790:	6b 01       	movw	r12, r22
     792:	7c 01       	movw	r14, r24
     794:	ac ee       	ldi	r26, 0xEC	; 236
     796:	b4 ef       	ldi	r27, 0xF4	; 244
     798:	a5 01       	movw	r20, r10
     79a:	94 01       	movw	r18, r8
     79c:	0e 94 2c 08 	call	0x1058	; 0x1058 <__mulohisi3>
     7a0:	dc 01       	movw	r26, r24
     7a2:	cb 01       	movw	r24, r22
     7a4:	8c 0d       	add	r24, r12
     7a6:	9d 1d       	adc	r25, r13
     7a8:	ae 1d       	adc	r26, r14
     7aa:	bf 1d       	adc	r27, r15
     7ac:	b7 ff       	sbrs	r27, 7
     7ae:	03 c0       	rjmp	.+6      	; 0x7b6 <do_rand+0x72>
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	a1 09       	sbc	r26, r1
     7b4:	b0 48       	sbci	r27, 0x80	; 128
     7b6:	88 83       	st	Y, r24
     7b8:	99 83       	std	Y+1, r25	; 0x01
     7ba:	aa 83       	std	Y+2, r26	; 0x02
     7bc:	bb 83       	std	Y+3, r27	; 0x03
     7be:	9f 77       	andi	r25, 0x7F	; 127
     7c0:	df 91       	pop	r29
     7c2:	cf 91       	pop	r28
     7c4:	ff 90       	pop	r15
     7c6:	ef 90       	pop	r14
     7c8:	df 90       	pop	r13
     7ca:	cf 90       	pop	r12
     7cc:	bf 90       	pop	r11
     7ce:	af 90       	pop	r10
     7d0:	9f 90       	pop	r9
     7d2:	8f 90       	pop	r8
     7d4:	08 95       	ret

000007d6 <rand_r>:
     7d6:	0c 94 a2 03 	jmp	0x744	; 0x744 <do_rand>

000007da <rand>:
     7da:	80 e0       	ldi	r24, 0x00	; 0
     7dc:	90 e4       	ldi	r25, 0x40	; 64
     7de:	0c 94 a2 03 	jmp	0x744	; 0x744 <do_rand>

000007e2 <srand>:
     7e2:	a0 e0       	ldi	r26, 0x00	; 0
     7e4:	b0 e0       	ldi	r27, 0x00	; 0
     7e6:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
     7ea:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     7ee:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     7f2:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
     7f6:	08 95       	ret

000007f8 <memcmp>:
     7f8:	fb 01       	movw	r30, r22
     7fa:	dc 01       	movw	r26, r24
     7fc:	04 c0       	rjmp	.+8      	; 0x806 <memcmp+0xe>
     7fe:	8d 91       	ld	r24, X+
     800:	01 90       	ld	r0, Z+
     802:	80 19       	sub	r24, r0
     804:	21 f4       	brne	.+8      	; 0x80e <memcmp+0x16>
     806:	41 50       	subi	r20, 0x01	; 1
     808:	50 40       	sbci	r21, 0x00	; 0
     80a:	c8 f7       	brcc	.-14     	; 0x7fe <memcmp+0x6>
     80c:	88 1b       	sub	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	08 95       	ret

00000812 <fgets>:
     812:	cf 92       	push	r12
     814:	df 92       	push	r13
     816:	ef 92       	push	r14
     818:	ff 92       	push	r15
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	fa 01       	movw	r30, r20
     824:	23 81       	ldd	r18, Z+3	; 0x03
     826:	20 fd       	sbrc	r18, 0
     828:	03 c0       	rjmp	.+6      	; 0x830 <fgets+0x1e>
     82a:	80 e0       	ldi	r24, 0x00	; 0
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	1a c0       	rjmp	.+52     	; 0x864 <fgets+0x52>
     830:	16 16       	cp	r1, r22
     832:	17 06       	cpc	r1, r23
     834:	d4 f7       	brge	.-12     	; 0x82a <fgets+0x18>
     836:	7a 01       	movw	r14, r20
     838:	8c 01       	movw	r16, r24
     83a:	eb 01       	movw	r28, r22
     83c:	6c 01       	movw	r12, r24
     83e:	c1 30       	cpi	r28, 0x01	; 1
     840:	d1 05       	cpc	r29, r1
     842:	69 f0       	breq	.+26     	; 0x85e <fgets+0x4c>
     844:	c7 01       	movw	r24, r14
     846:	0e 94 17 07 	call	0xe2e	; 0xe2e <fgetc>
     84a:	8f 3f       	cpi	r24, 0xFF	; 255
     84c:	ff ef       	ldi	r31, 0xFF	; 255
     84e:	9f 07       	cpc	r25, r31
     850:	61 f3       	breq	.-40     	; 0x82a <fgets+0x18>
     852:	f6 01       	movw	r30, r12
     854:	81 93       	st	Z+, r24
     856:	6f 01       	movw	r12, r30
     858:	21 97       	sbiw	r28, 0x01	; 1
     85a:	0a 97       	sbiw	r24, 0x0a	; 10
     85c:	81 f7       	brne	.-32     	; 0x83e <fgets+0x2c>
     85e:	f6 01       	movw	r30, r12
     860:	10 82       	st	Z, r1
     862:	c8 01       	movw	r24, r16
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	1f 91       	pop	r17
     86a:	0f 91       	pop	r16
     86c:	ff 90       	pop	r15
     86e:	ef 90       	pop	r14
     870:	df 90       	pop	r13
     872:	cf 90       	pop	r12
     874:	08 95       	ret

00000876 <fputc>:
     876:	0f 93       	push	r16
     878:	1f 93       	push	r17
     87a:	cf 93       	push	r28
     87c:	df 93       	push	r29
     87e:	fb 01       	movw	r30, r22
     880:	23 81       	ldd	r18, Z+3	; 0x03
     882:	21 fd       	sbrc	r18, 1
     884:	03 c0       	rjmp	.+6      	; 0x88c <fputc+0x16>
     886:	8f ef       	ldi	r24, 0xFF	; 255
     888:	9f ef       	ldi	r25, 0xFF	; 255
     88a:	2c c0       	rjmp	.+88     	; 0x8e4 <fputc+0x6e>
     88c:	22 ff       	sbrs	r18, 2
     88e:	16 c0       	rjmp	.+44     	; 0x8bc <fputc+0x46>
     890:	46 81       	ldd	r20, Z+6	; 0x06
     892:	57 81       	ldd	r21, Z+7	; 0x07
     894:	24 81       	ldd	r18, Z+4	; 0x04
     896:	35 81       	ldd	r19, Z+5	; 0x05
     898:	42 17       	cp	r20, r18
     89a:	53 07       	cpc	r21, r19
     89c:	44 f4       	brge	.+16     	; 0x8ae <fputc+0x38>
     89e:	a0 81       	ld	r26, Z
     8a0:	b1 81       	ldd	r27, Z+1	; 0x01
     8a2:	9d 01       	movw	r18, r26
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	20 83       	st	Z, r18
     8aa:	31 83       	std	Z+1, r19	; 0x01
     8ac:	8c 93       	st	X, r24
     8ae:	26 81       	ldd	r18, Z+6	; 0x06
     8b0:	37 81       	ldd	r19, Z+7	; 0x07
     8b2:	2f 5f       	subi	r18, 0xFF	; 255
     8b4:	3f 4f       	sbci	r19, 0xFF	; 255
     8b6:	26 83       	std	Z+6, r18	; 0x06
     8b8:	37 83       	std	Z+7, r19	; 0x07
     8ba:	14 c0       	rjmp	.+40     	; 0x8e4 <fputc+0x6e>
     8bc:	8b 01       	movw	r16, r22
     8be:	ec 01       	movw	r28, r24
     8c0:	fb 01       	movw	r30, r22
     8c2:	00 84       	ldd	r0, Z+8	; 0x08
     8c4:	f1 85       	ldd	r31, Z+9	; 0x09
     8c6:	e0 2d       	mov	r30, r0
     8c8:	09 95       	icall
     8ca:	89 2b       	or	r24, r25
     8cc:	e1 f6       	brne	.-72     	; 0x886 <fputc+0x10>
     8ce:	d8 01       	movw	r26, r16
     8d0:	16 96       	adiw	r26, 0x06	; 6
     8d2:	8d 91       	ld	r24, X+
     8d4:	9c 91       	ld	r25, X
     8d6:	17 97       	sbiw	r26, 0x07	; 7
     8d8:	01 96       	adiw	r24, 0x01	; 1
     8da:	16 96       	adiw	r26, 0x06	; 6
     8dc:	8d 93       	st	X+, r24
     8de:	9c 93       	st	X, r25
     8e0:	17 97       	sbiw	r26, 0x07	; 7
     8e2:	ce 01       	movw	r24, r28
     8e4:	df 91       	pop	r29
     8e6:	cf 91       	pop	r28
     8e8:	1f 91       	pop	r17
     8ea:	0f 91       	pop	r16
     8ec:	08 95       	ret

000008ee <fwrite>:
     8ee:	8f 92       	push	r8
     8f0:	9f 92       	push	r9
     8f2:	af 92       	push	r10
     8f4:	bf 92       	push	r11
     8f6:	cf 92       	push	r12
     8f8:	df 92       	push	r13
     8fa:	ef 92       	push	r14
     8fc:	ff 92       	push	r15
     8fe:	0f 93       	push	r16
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	5b 01       	movw	r10, r22
     908:	4a 01       	movw	r8, r20
     90a:	79 01       	movw	r14, r18
     90c:	d9 01       	movw	r26, r18
     90e:	13 96       	adiw	r26, 0x03	; 3
     910:	2c 91       	ld	r18, X
     912:	21 ff       	sbrs	r18, 1
     914:	1d c0       	rjmp	.+58     	; 0x950 <fwrite+0x62>
     916:	c0 e0       	ldi	r28, 0x00	; 0
     918:	d0 e0       	ldi	r29, 0x00	; 0
     91a:	c8 15       	cp	r28, r8
     91c:	d9 05       	cpc	r29, r9
     91e:	d9 f0       	breq	.+54     	; 0x956 <fwrite+0x68>
     920:	8c 01       	movw	r16, r24
     922:	6c 01       	movw	r12, r24
     924:	ca 0c       	add	r12, r10
     926:	db 1c       	adc	r13, r11
     928:	c8 01       	movw	r24, r16
     92a:	0c 15       	cp	r16, r12
     92c:	1d 05       	cpc	r17, r13
     92e:	71 f0       	breq	.+28     	; 0x94c <fwrite+0x5e>
     930:	0f 5f       	subi	r16, 0xFF	; 255
     932:	1f 4f       	sbci	r17, 0xFF	; 255
     934:	d7 01       	movw	r26, r14
     936:	18 96       	adiw	r26, 0x08	; 8
     938:	ed 91       	ld	r30, X+
     93a:	fc 91       	ld	r31, X
     93c:	19 97       	sbiw	r26, 0x09	; 9
     93e:	b7 01       	movw	r22, r14
     940:	dc 01       	movw	r26, r24
     942:	8c 91       	ld	r24, X
     944:	09 95       	icall
     946:	89 2b       	or	r24, r25
     948:	79 f3       	breq	.-34     	; 0x928 <fwrite+0x3a>
     94a:	05 c0       	rjmp	.+10     	; 0x956 <fwrite+0x68>
     94c:	21 96       	adiw	r28, 0x01	; 1
     94e:	e5 cf       	rjmp	.-54     	; 0x91a <fwrite+0x2c>
     950:	80 e0       	ldi	r24, 0x00	; 0
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	01 c0       	rjmp	.+2      	; 0x958 <fwrite+0x6a>
     956:	ce 01       	movw	r24, r28
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	cf 90       	pop	r12
     968:	bf 90       	pop	r11
     96a:	af 90       	pop	r10
     96c:	9f 90       	pop	r9
     96e:	8f 90       	pop	r8
     970:	08 95       	ret

00000972 <printf>:
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
     97a:	ae 01       	movw	r20, r28
     97c:	4b 5f       	subi	r20, 0xFB	; 251
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	fa 01       	movw	r30, r20
     982:	61 91       	ld	r22, Z+
     984:	71 91       	ld	r23, Z+
     986:	af 01       	movw	r20, r30
     988:	80 91 25 41 	lds	r24, 0x4125	; 0x804125 <__iob+0x2>
     98c:	90 91 26 41 	lds	r25, 0x4126	; 0x804126 <__iob+0x3>
     990:	0e 94 fd 04 	call	0x9fa	; 0x9fa <vfprintf>
     994:	df 91       	pop	r29
     996:	cf 91       	pop	r28
     998:	08 95       	ret

0000099a <puts>:
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	e0 91 25 41 	lds	r30, 0x4125	; 0x804125 <__iob+0x2>
     9a6:	f0 91 26 41 	lds	r31, 0x4126	; 0x804126 <__iob+0x3>
     9aa:	23 81       	ldd	r18, Z+3	; 0x03
     9ac:	21 ff       	sbrs	r18, 1
     9ae:	1b c0       	rjmp	.+54     	; 0x9e6 <puts+0x4c>
     9b0:	8c 01       	movw	r16, r24
     9b2:	d0 e0       	ldi	r29, 0x00	; 0
     9b4:	c0 e0       	ldi	r28, 0x00	; 0
     9b6:	f8 01       	movw	r30, r16
     9b8:	81 91       	ld	r24, Z+
     9ba:	8f 01       	movw	r16, r30
     9bc:	60 91 25 41 	lds	r22, 0x4125	; 0x804125 <__iob+0x2>
     9c0:	70 91 26 41 	lds	r23, 0x4126	; 0x804126 <__iob+0x3>
     9c4:	db 01       	movw	r26, r22
     9c6:	18 96       	adiw	r26, 0x08	; 8
     9c8:	ed 91       	ld	r30, X+
     9ca:	fc 91       	ld	r31, X
     9cc:	19 97       	sbiw	r26, 0x09	; 9
     9ce:	88 23       	and	r24, r24
     9d0:	31 f0       	breq	.+12     	; 0x9de <puts+0x44>
     9d2:	09 95       	icall
     9d4:	89 2b       	or	r24, r25
     9d6:	79 f3       	breq	.-34     	; 0x9b6 <puts+0x1c>
     9d8:	df ef       	ldi	r29, 0xFF	; 255
     9da:	cf ef       	ldi	r28, 0xFF	; 255
     9dc:	ec cf       	rjmp	.-40     	; 0x9b6 <puts+0x1c>
     9de:	8a e0       	ldi	r24, 0x0A	; 10
     9e0:	09 95       	icall
     9e2:	89 2b       	or	r24, r25
     9e4:	19 f0       	breq	.+6      	; 0x9ec <puts+0x52>
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	02 c0       	rjmp	.+4      	; 0x9f0 <puts+0x56>
     9ec:	8d 2f       	mov	r24, r29
     9ee:	9c 2f       	mov	r25, r28
     9f0:	df 91       	pop	r29
     9f2:	cf 91       	pop	r28
     9f4:	1f 91       	pop	r17
     9f6:	0f 91       	pop	r16
     9f8:	08 95       	ret

000009fa <vfprintf>:
     9fa:	2f 92       	push	r2
     9fc:	3f 92       	push	r3
     9fe:	4f 92       	push	r4
     a00:	5f 92       	push	r5
     a02:	6f 92       	push	r6
     a04:	7f 92       	push	r7
     a06:	8f 92       	push	r8
     a08:	9f 92       	push	r9
     a0a:	af 92       	push	r10
     a0c:	bf 92       	push	r11
     a0e:	cf 92       	push	r12
     a10:	df 92       	push	r13
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62
     a22:	2b 97       	sbiw	r28, 0x0b	; 11
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	de bf       	out	0x3e, r29	; 62
     a28:	6c 01       	movw	r12, r24
     a2a:	7b 01       	movw	r14, r22
     a2c:	8a 01       	movw	r16, r20
     a2e:	fc 01       	movw	r30, r24
     a30:	16 82       	std	Z+6, r1	; 0x06
     a32:	17 82       	std	Z+7, r1	; 0x07
     a34:	83 81       	ldd	r24, Z+3	; 0x03
     a36:	81 ff       	sbrs	r24, 1
     a38:	cc c1       	rjmp	.+920    	; 0xdd2 <vfprintf+0x3d8>
     a3a:	ce 01       	movw	r24, r28
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	3c 01       	movw	r6, r24
     a40:	f6 01       	movw	r30, r12
     a42:	93 81       	ldd	r25, Z+3	; 0x03
     a44:	f7 01       	movw	r30, r14
     a46:	93 fd       	sbrc	r25, 3
     a48:	85 91       	lpm	r24, Z+
     a4a:	93 ff       	sbrs	r25, 3
     a4c:	81 91       	ld	r24, Z+
     a4e:	7f 01       	movw	r14, r30
     a50:	88 23       	and	r24, r24
     a52:	09 f4       	brne	.+2      	; 0xa56 <vfprintf+0x5c>
     a54:	ba c1       	rjmp	.+884    	; 0xdca <vfprintf+0x3d0>
     a56:	85 32       	cpi	r24, 0x25	; 37
     a58:	39 f4       	brne	.+14     	; 0xa68 <vfprintf+0x6e>
     a5a:	93 fd       	sbrc	r25, 3
     a5c:	85 91       	lpm	r24, Z+
     a5e:	93 ff       	sbrs	r25, 3
     a60:	81 91       	ld	r24, Z+
     a62:	7f 01       	movw	r14, r30
     a64:	85 32       	cpi	r24, 0x25	; 37
     a66:	29 f4       	brne	.+10     	; 0xa72 <vfprintf+0x78>
     a68:	b6 01       	movw	r22, r12
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     a70:	e7 cf       	rjmp	.-50     	; 0xa40 <vfprintf+0x46>
     a72:	91 2c       	mov	r9, r1
     a74:	21 2c       	mov	r2, r1
     a76:	31 2c       	mov	r3, r1
     a78:	ff e1       	ldi	r31, 0x1F	; 31
     a7a:	f3 15       	cp	r31, r3
     a7c:	d8 f0       	brcs	.+54     	; 0xab4 <vfprintf+0xba>
     a7e:	8b 32       	cpi	r24, 0x2B	; 43
     a80:	79 f0       	breq	.+30     	; 0xaa0 <vfprintf+0xa6>
     a82:	38 f4       	brcc	.+14     	; 0xa92 <vfprintf+0x98>
     a84:	80 32       	cpi	r24, 0x20	; 32
     a86:	79 f0       	breq	.+30     	; 0xaa6 <vfprintf+0xac>
     a88:	83 32       	cpi	r24, 0x23	; 35
     a8a:	a1 f4       	brne	.+40     	; 0xab4 <vfprintf+0xba>
     a8c:	23 2d       	mov	r18, r3
     a8e:	20 61       	ori	r18, 0x10	; 16
     a90:	1d c0       	rjmp	.+58     	; 0xacc <vfprintf+0xd2>
     a92:	8d 32       	cpi	r24, 0x2D	; 45
     a94:	61 f0       	breq	.+24     	; 0xaae <vfprintf+0xb4>
     a96:	80 33       	cpi	r24, 0x30	; 48
     a98:	69 f4       	brne	.+26     	; 0xab4 <vfprintf+0xba>
     a9a:	23 2d       	mov	r18, r3
     a9c:	21 60       	ori	r18, 0x01	; 1
     a9e:	16 c0       	rjmp	.+44     	; 0xacc <vfprintf+0xd2>
     aa0:	83 2d       	mov	r24, r3
     aa2:	82 60       	ori	r24, 0x02	; 2
     aa4:	38 2e       	mov	r3, r24
     aa6:	e3 2d       	mov	r30, r3
     aa8:	e4 60       	ori	r30, 0x04	; 4
     aaa:	3e 2e       	mov	r3, r30
     aac:	2a c0       	rjmp	.+84     	; 0xb02 <vfprintf+0x108>
     aae:	f3 2d       	mov	r31, r3
     ab0:	f8 60       	ori	r31, 0x08	; 8
     ab2:	1d c0       	rjmp	.+58     	; 0xaee <vfprintf+0xf4>
     ab4:	37 fc       	sbrc	r3, 7
     ab6:	2d c0       	rjmp	.+90     	; 0xb12 <vfprintf+0x118>
     ab8:	20 ed       	ldi	r18, 0xD0	; 208
     aba:	28 0f       	add	r18, r24
     abc:	2a 30       	cpi	r18, 0x0A	; 10
     abe:	40 f0       	brcs	.+16     	; 0xad0 <vfprintf+0xd6>
     ac0:	8e 32       	cpi	r24, 0x2E	; 46
     ac2:	b9 f4       	brne	.+46     	; 0xaf2 <vfprintf+0xf8>
     ac4:	36 fc       	sbrc	r3, 6
     ac6:	81 c1       	rjmp	.+770    	; 0xdca <vfprintf+0x3d0>
     ac8:	23 2d       	mov	r18, r3
     aca:	20 64       	ori	r18, 0x40	; 64
     acc:	32 2e       	mov	r3, r18
     ace:	19 c0       	rjmp	.+50     	; 0xb02 <vfprintf+0x108>
     ad0:	36 fe       	sbrs	r3, 6
     ad2:	06 c0       	rjmp	.+12     	; 0xae0 <vfprintf+0xe6>
     ad4:	8a e0       	ldi	r24, 0x0A	; 10
     ad6:	98 9e       	mul	r9, r24
     ad8:	20 0d       	add	r18, r0
     ada:	11 24       	eor	r1, r1
     adc:	92 2e       	mov	r9, r18
     ade:	11 c0       	rjmp	.+34     	; 0xb02 <vfprintf+0x108>
     ae0:	ea e0       	ldi	r30, 0x0A	; 10
     ae2:	2e 9e       	mul	r2, r30
     ae4:	20 0d       	add	r18, r0
     ae6:	11 24       	eor	r1, r1
     ae8:	22 2e       	mov	r2, r18
     aea:	f3 2d       	mov	r31, r3
     aec:	f0 62       	ori	r31, 0x20	; 32
     aee:	3f 2e       	mov	r3, r31
     af0:	08 c0       	rjmp	.+16     	; 0xb02 <vfprintf+0x108>
     af2:	8c 36       	cpi	r24, 0x6C	; 108
     af4:	21 f4       	brne	.+8      	; 0xafe <vfprintf+0x104>
     af6:	83 2d       	mov	r24, r3
     af8:	80 68       	ori	r24, 0x80	; 128
     afa:	38 2e       	mov	r3, r24
     afc:	02 c0       	rjmp	.+4      	; 0xb02 <vfprintf+0x108>
     afe:	88 36       	cpi	r24, 0x68	; 104
     b00:	41 f4       	brne	.+16     	; 0xb12 <vfprintf+0x118>
     b02:	f7 01       	movw	r30, r14
     b04:	93 fd       	sbrc	r25, 3
     b06:	85 91       	lpm	r24, Z+
     b08:	93 ff       	sbrs	r25, 3
     b0a:	81 91       	ld	r24, Z+
     b0c:	7f 01       	movw	r14, r30
     b0e:	81 11       	cpse	r24, r1
     b10:	b3 cf       	rjmp	.-154    	; 0xa78 <vfprintf+0x7e>
     b12:	98 2f       	mov	r25, r24
     b14:	9f 7d       	andi	r25, 0xDF	; 223
     b16:	95 54       	subi	r25, 0x45	; 69
     b18:	93 30       	cpi	r25, 0x03	; 3
     b1a:	28 f4       	brcc	.+10     	; 0xb26 <vfprintf+0x12c>
     b1c:	0c 5f       	subi	r16, 0xFC	; 252
     b1e:	1f 4f       	sbci	r17, 0xFF	; 255
     b20:	9f e3       	ldi	r25, 0x3F	; 63
     b22:	99 83       	std	Y+1, r25	; 0x01
     b24:	0d c0       	rjmp	.+26     	; 0xb40 <vfprintf+0x146>
     b26:	83 36       	cpi	r24, 0x63	; 99
     b28:	31 f0       	breq	.+12     	; 0xb36 <vfprintf+0x13c>
     b2a:	83 37       	cpi	r24, 0x73	; 115
     b2c:	71 f0       	breq	.+28     	; 0xb4a <vfprintf+0x150>
     b2e:	83 35       	cpi	r24, 0x53	; 83
     b30:	09 f0       	breq	.+2      	; 0xb34 <vfprintf+0x13a>
     b32:	59 c0       	rjmp	.+178    	; 0xbe6 <vfprintf+0x1ec>
     b34:	21 c0       	rjmp	.+66     	; 0xb78 <vfprintf+0x17e>
     b36:	f8 01       	movw	r30, r16
     b38:	80 81       	ld	r24, Z
     b3a:	89 83       	std	Y+1, r24	; 0x01
     b3c:	0e 5f       	subi	r16, 0xFE	; 254
     b3e:	1f 4f       	sbci	r17, 0xFF	; 255
     b40:	88 24       	eor	r8, r8
     b42:	83 94       	inc	r8
     b44:	91 2c       	mov	r9, r1
     b46:	53 01       	movw	r10, r6
     b48:	13 c0       	rjmp	.+38     	; 0xb70 <vfprintf+0x176>
     b4a:	28 01       	movw	r4, r16
     b4c:	f2 e0       	ldi	r31, 0x02	; 2
     b4e:	4f 0e       	add	r4, r31
     b50:	51 1c       	adc	r5, r1
     b52:	f8 01       	movw	r30, r16
     b54:	a0 80       	ld	r10, Z
     b56:	b1 80       	ldd	r11, Z+1	; 0x01
     b58:	36 fe       	sbrs	r3, 6
     b5a:	03 c0       	rjmp	.+6      	; 0xb62 <vfprintf+0x168>
     b5c:	69 2d       	mov	r22, r9
     b5e:	70 e0       	ldi	r23, 0x00	; 0
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <vfprintf+0x16c>
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	7f ef       	ldi	r23, 0xFF	; 255
     b66:	c5 01       	movw	r24, r10
     b68:	0e 94 0c 07 	call	0xe18	; 0xe18 <strnlen>
     b6c:	4c 01       	movw	r8, r24
     b6e:	82 01       	movw	r16, r4
     b70:	f3 2d       	mov	r31, r3
     b72:	ff 77       	andi	r31, 0x7F	; 127
     b74:	3f 2e       	mov	r3, r31
     b76:	16 c0       	rjmp	.+44     	; 0xba4 <vfprintf+0x1aa>
     b78:	28 01       	movw	r4, r16
     b7a:	22 e0       	ldi	r18, 0x02	; 2
     b7c:	42 0e       	add	r4, r18
     b7e:	51 1c       	adc	r5, r1
     b80:	f8 01       	movw	r30, r16
     b82:	a0 80       	ld	r10, Z
     b84:	b1 80       	ldd	r11, Z+1	; 0x01
     b86:	36 fe       	sbrs	r3, 6
     b88:	03 c0       	rjmp	.+6      	; 0xb90 <vfprintf+0x196>
     b8a:	69 2d       	mov	r22, r9
     b8c:	70 e0       	ldi	r23, 0x00	; 0
     b8e:	02 c0       	rjmp	.+4      	; 0xb94 <vfprintf+0x19a>
     b90:	6f ef       	ldi	r22, 0xFF	; 255
     b92:	7f ef       	ldi	r23, 0xFF	; 255
     b94:	c5 01       	movw	r24, r10
     b96:	0e 94 01 07 	call	0xe02	; 0xe02 <strnlen_P>
     b9a:	4c 01       	movw	r8, r24
     b9c:	f3 2d       	mov	r31, r3
     b9e:	f0 68       	ori	r31, 0x80	; 128
     ba0:	3f 2e       	mov	r3, r31
     ba2:	82 01       	movw	r16, r4
     ba4:	33 fc       	sbrc	r3, 3
     ba6:	1b c0       	rjmp	.+54     	; 0xbde <vfprintf+0x1e4>
     ba8:	82 2d       	mov	r24, r2
     baa:	90 e0       	ldi	r25, 0x00	; 0
     bac:	88 16       	cp	r8, r24
     bae:	99 06       	cpc	r9, r25
     bb0:	b0 f4       	brcc	.+44     	; 0xbde <vfprintf+0x1e4>
     bb2:	b6 01       	movw	r22, r12
     bb4:	80 e2       	ldi	r24, 0x20	; 32
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     bbc:	2a 94       	dec	r2
     bbe:	f4 cf       	rjmp	.-24     	; 0xba8 <vfprintf+0x1ae>
     bc0:	f5 01       	movw	r30, r10
     bc2:	37 fc       	sbrc	r3, 7
     bc4:	85 91       	lpm	r24, Z+
     bc6:	37 fe       	sbrs	r3, 7
     bc8:	81 91       	ld	r24, Z+
     bca:	5f 01       	movw	r10, r30
     bcc:	b6 01       	movw	r22, r12
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     bd4:	21 10       	cpse	r2, r1
     bd6:	2a 94       	dec	r2
     bd8:	21 e0       	ldi	r18, 0x01	; 1
     bda:	82 1a       	sub	r8, r18
     bdc:	91 08       	sbc	r9, r1
     bde:	81 14       	cp	r8, r1
     be0:	91 04       	cpc	r9, r1
     be2:	71 f7       	brne	.-36     	; 0xbc0 <vfprintf+0x1c6>
     be4:	e8 c0       	rjmp	.+464    	; 0xdb6 <vfprintf+0x3bc>
     be6:	84 36       	cpi	r24, 0x64	; 100
     be8:	11 f0       	breq	.+4      	; 0xbee <vfprintf+0x1f4>
     bea:	89 36       	cpi	r24, 0x69	; 105
     bec:	41 f5       	brne	.+80     	; 0xc3e <vfprintf+0x244>
     bee:	f8 01       	movw	r30, r16
     bf0:	37 fe       	sbrs	r3, 7
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <vfprintf+0x208>
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	82 81       	ldd	r24, Z+2	; 0x02
     bfa:	93 81       	ldd	r25, Z+3	; 0x03
     bfc:	0c 5f       	subi	r16, 0xFC	; 252
     bfe:	1f 4f       	sbci	r17, 0xFF	; 255
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <vfprintf+0x218>
     c02:	60 81       	ld	r22, Z
     c04:	71 81       	ldd	r23, Z+1	; 0x01
     c06:	07 2e       	mov	r0, r23
     c08:	00 0c       	add	r0, r0
     c0a:	88 0b       	sbc	r24, r24
     c0c:	99 0b       	sbc	r25, r25
     c0e:	0e 5f       	subi	r16, 0xFE	; 254
     c10:	1f 4f       	sbci	r17, 0xFF	; 255
     c12:	f3 2d       	mov	r31, r3
     c14:	ff 76       	andi	r31, 0x6F	; 111
     c16:	3f 2e       	mov	r3, r31
     c18:	97 ff       	sbrs	r25, 7
     c1a:	09 c0       	rjmp	.+18     	; 0xc2e <vfprintf+0x234>
     c1c:	90 95       	com	r25
     c1e:	80 95       	com	r24
     c20:	70 95       	com	r23
     c22:	61 95       	neg	r22
     c24:	7f 4f       	sbci	r23, 0xFF	; 255
     c26:	8f 4f       	sbci	r24, 0xFF	; 255
     c28:	9f 4f       	sbci	r25, 0xFF	; 255
     c2a:	f0 68       	ori	r31, 0x80	; 128
     c2c:	3f 2e       	mov	r3, r31
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	a3 01       	movw	r20, r6
     c34:	0e 94 55 07 	call	0xeaa	; 0xeaa <__ultoa_invert>
     c38:	88 2e       	mov	r8, r24
     c3a:	86 18       	sub	r8, r6
     c3c:	45 c0       	rjmp	.+138    	; 0xcc8 <vfprintf+0x2ce>
     c3e:	85 37       	cpi	r24, 0x75	; 117
     c40:	31 f4       	brne	.+12     	; 0xc4e <vfprintf+0x254>
     c42:	23 2d       	mov	r18, r3
     c44:	2f 7e       	andi	r18, 0xEF	; 239
     c46:	b2 2e       	mov	r11, r18
     c48:	2a e0       	ldi	r18, 0x0A	; 10
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	25 c0       	rjmp	.+74     	; 0xc98 <vfprintf+0x29e>
     c4e:	93 2d       	mov	r25, r3
     c50:	99 7f       	andi	r25, 0xF9	; 249
     c52:	b9 2e       	mov	r11, r25
     c54:	8f 36       	cpi	r24, 0x6F	; 111
     c56:	c1 f0       	breq	.+48     	; 0xc88 <vfprintf+0x28e>
     c58:	18 f4       	brcc	.+6      	; 0xc60 <vfprintf+0x266>
     c5a:	88 35       	cpi	r24, 0x58	; 88
     c5c:	79 f0       	breq	.+30     	; 0xc7c <vfprintf+0x282>
     c5e:	b5 c0       	rjmp	.+362    	; 0xdca <vfprintf+0x3d0>
     c60:	80 37       	cpi	r24, 0x70	; 112
     c62:	19 f0       	breq	.+6      	; 0xc6a <vfprintf+0x270>
     c64:	88 37       	cpi	r24, 0x78	; 120
     c66:	21 f0       	breq	.+8      	; 0xc70 <vfprintf+0x276>
     c68:	b0 c0       	rjmp	.+352    	; 0xdca <vfprintf+0x3d0>
     c6a:	e9 2f       	mov	r30, r25
     c6c:	e0 61       	ori	r30, 0x10	; 16
     c6e:	be 2e       	mov	r11, r30
     c70:	b4 fe       	sbrs	r11, 4
     c72:	0d c0       	rjmp	.+26     	; 0xc8e <vfprintf+0x294>
     c74:	fb 2d       	mov	r31, r11
     c76:	f4 60       	ori	r31, 0x04	; 4
     c78:	bf 2e       	mov	r11, r31
     c7a:	09 c0       	rjmp	.+18     	; 0xc8e <vfprintf+0x294>
     c7c:	34 fe       	sbrs	r3, 4
     c7e:	0a c0       	rjmp	.+20     	; 0xc94 <vfprintf+0x29a>
     c80:	29 2f       	mov	r18, r25
     c82:	26 60       	ori	r18, 0x06	; 6
     c84:	b2 2e       	mov	r11, r18
     c86:	06 c0       	rjmp	.+12     	; 0xc94 <vfprintf+0x29a>
     c88:	28 e0       	ldi	r18, 0x08	; 8
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <vfprintf+0x29e>
     c8e:	20 e1       	ldi	r18, 0x10	; 16
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <vfprintf+0x29e>
     c94:	20 e1       	ldi	r18, 0x10	; 16
     c96:	32 e0       	ldi	r19, 0x02	; 2
     c98:	f8 01       	movw	r30, r16
     c9a:	b7 fe       	sbrs	r11, 7
     c9c:	07 c0       	rjmp	.+14     	; 0xcac <vfprintf+0x2b2>
     c9e:	60 81       	ld	r22, Z
     ca0:	71 81       	ldd	r23, Z+1	; 0x01
     ca2:	82 81       	ldd	r24, Z+2	; 0x02
     ca4:	93 81       	ldd	r25, Z+3	; 0x03
     ca6:	0c 5f       	subi	r16, 0xFC	; 252
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	06 c0       	rjmp	.+12     	; 0xcb8 <vfprintf+0x2be>
     cac:	60 81       	ld	r22, Z
     cae:	71 81       	ldd	r23, Z+1	; 0x01
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	0e 5f       	subi	r16, 0xFE	; 254
     cb6:	1f 4f       	sbci	r17, 0xFF	; 255
     cb8:	a3 01       	movw	r20, r6
     cba:	0e 94 55 07 	call	0xeaa	; 0xeaa <__ultoa_invert>
     cbe:	88 2e       	mov	r8, r24
     cc0:	86 18       	sub	r8, r6
     cc2:	fb 2d       	mov	r31, r11
     cc4:	ff 77       	andi	r31, 0x7F	; 127
     cc6:	3f 2e       	mov	r3, r31
     cc8:	36 fe       	sbrs	r3, 6
     cca:	0d c0       	rjmp	.+26     	; 0xce6 <vfprintf+0x2ec>
     ccc:	23 2d       	mov	r18, r3
     cce:	2e 7f       	andi	r18, 0xFE	; 254
     cd0:	a2 2e       	mov	r10, r18
     cd2:	89 14       	cp	r8, r9
     cd4:	58 f4       	brcc	.+22     	; 0xcec <vfprintf+0x2f2>
     cd6:	34 fe       	sbrs	r3, 4
     cd8:	0b c0       	rjmp	.+22     	; 0xcf0 <vfprintf+0x2f6>
     cda:	32 fc       	sbrc	r3, 2
     cdc:	09 c0       	rjmp	.+18     	; 0xcf0 <vfprintf+0x2f6>
     cde:	83 2d       	mov	r24, r3
     ce0:	8e 7e       	andi	r24, 0xEE	; 238
     ce2:	a8 2e       	mov	r10, r24
     ce4:	05 c0       	rjmp	.+10     	; 0xcf0 <vfprintf+0x2f6>
     ce6:	b8 2c       	mov	r11, r8
     ce8:	a3 2c       	mov	r10, r3
     cea:	03 c0       	rjmp	.+6      	; 0xcf2 <vfprintf+0x2f8>
     cec:	b8 2c       	mov	r11, r8
     cee:	01 c0       	rjmp	.+2      	; 0xcf2 <vfprintf+0x2f8>
     cf0:	b9 2c       	mov	r11, r9
     cf2:	a4 fe       	sbrs	r10, 4
     cf4:	0f c0       	rjmp	.+30     	; 0xd14 <vfprintf+0x31a>
     cf6:	fe 01       	movw	r30, r28
     cf8:	e8 0d       	add	r30, r8
     cfa:	f1 1d       	adc	r31, r1
     cfc:	80 81       	ld	r24, Z
     cfe:	80 33       	cpi	r24, 0x30	; 48
     d00:	21 f4       	brne	.+8      	; 0xd0a <vfprintf+0x310>
     d02:	9a 2d       	mov	r25, r10
     d04:	99 7e       	andi	r25, 0xE9	; 233
     d06:	a9 2e       	mov	r10, r25
     d08:	09 c0       	rjmp	.+18     	; 0xd1c <vfprintf+0x322>
     d0a:	a2 fe       	sbrs	r10, 2
     d0c:	06 c0       	rjmp	.+12     	; 0xd1a <vfprintf+0x320>
     d0e:	b3 94       	inc	r11
     d10:	b3 94       	inc	r11
     d12:	04 c0       	rjmp	.+8      	; 0xd1c <vfprintf+0x322>
     d14:	8a 2d       	mov	r24, r10
     d16:	86 78       	andi	r24, 0x86	; 134
     d18:	09 f0       	breq	.+2      	; 0xd1c <vfprintf+0x322>
     d1a:	b3 94       	inc	r11
     d1c:	a3 fc       	sbrc	r10, 3
     d1e:	11 c0       	rjmp	.+34     	; 0xd42 <vfprintf+0x348>
     d20:	a0 fe       	sbrs	r10, 0
     d22:	06 c0       	rjmp	.+12     	; 0xd30 <vfprintf+0x336>
     d24:	b2 14       	cp	r11, r2
     d26:	88 f4       	brcc	.+34     	; 0xd4a <vfprintf+0x350>
     d28:	28 0c       	add	r2, r8
     d2a:	92 2c       	mov	r9, r2
     d2c:	9b 18       	sub	r9, r11
     d2e:	0e c0       	rjmp	.+28     	; 0xd4c <vfprintf+0x352>
     d30:	b2 14       	cp	r11, r2
     d32:	60 f4       	brcc	.+24     	; 0xd4c <vfprintf+0x352>
     d34:	b6 01       	movw	r22, r12
     d36:	80 e2       	ldi	r24, 0x20	; 32
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     d3e:	b3 94       	inc	r11
     d40:	f7 cf       	rjmp	.-18     	; 0xd30 <vfprintf+0x336>
     d42:	b2 14       	cp	r11, r2
     d44:	18 f4       	brcc	.+6      	; 0xd4c <vfprintf+0x352>
     d46:	2b 18       	sub	r2, r11
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <vfprintf+0x354>
     d4a:	98 2c       	mov	r9, r8
     d4c:	21 2c       	mov	r2, r1
     d4e:	a4 fe       	sbrs	r10, 4
     d50:	10 c0       	rjmp	.+32     	; 0xd72 <vfprintf+0x378>
     d52:	b6 01       	movw	r22, r12
     d54:	80 e3       	ldi	r24, 0x30	; 48
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     d5c:	a2 fe       	sbrs	r10, 2
     d5e:	17 c0       	rjmp	.+46     	; 0xd8e <vfprintf+0x394>
     d60:	a1 fc       	sbrc	r10, 1
     d62:	03 c0       	rjmp	.+6      	; 0xd6a <vfprintf+0x370>
     d64:	88 e7       	ldi	r24, 0x78	; 120
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <vfprintf+0x374>
     d6a:	88 e5       	ldi	r24, 0x58	; 88
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	b6 01       	movw	r22, r12
     d70:	0c c0       	rjmp	.+24     	; 0xd8a <vfprintf+0x390>
     d72:	8a 2d       	mov	r24, r10
     d74:	86 78       	andi	r24, 0x86	; 134
     d76:	59 f0       	breq	.+22     	; 0xd8e <vfprintf+0x394>
     d78:	a1 fe       	sbrs	r10, 1
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <vfprintf+0x386>
     d7c:	8b e2       	ldi	r24, 0x2B	; 43
     d7e:	01 c0       	rjmp	.+2      	; 0xd82 <vfprintf+0x388>
     d80:	80 e2       	ldi	r24, 0x20	; 32
     d82:	a7 fc       	sbrc	r10, 7
     d84:	8d e2       	ldi	r24, 0x2D	; 45
     d86:	b6 01       	movw	r22, r12
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     d8e:	89 14       	cp	r8, r9
     d90:	38 f4       	brcc	.+14     	; 0xda0 <vfprintf+0x3a6>
     d92:	b6 01       	movw	r22, r12
     d94:	80 e3       	ldi	r24, 0x30	; 48
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     d9c:	9a 94       	dec	r9
     d9e:	f7 cf       	rjmp	.-18     	; 0xd8e <vfprintf+0x394>
     da0:	8a 94       	dec	r8
     da2:	f3 01       	movw	r30, r6
     da4:	e8 0d       	add	r30, r8
     da6:	f1 1d       	adc	r31, r1
     da8:	80 81       	ld	r24, Z
     daa:	b6 01       	movw	r22, r12
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     db2:	81 10       	cpse	r8, r1
     db4:	f5 cf       	rjmp	.-22     	; 0xda0 <vfprintf+0x3a6>
     db6:	22 20       	and	r2, r2
     db8:	09 f4       	brne	.+2      	; 0xdbc <vfprintf+0x3c2>
     dba:	42 ce       	rjmp	.-892    	; 0xa40 <vfprintf+0x46>
     dbc:	b6 01       	movw	r22, r12
     dbe:	80 e2       	ldi	r24, 0x20	; 32
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 3b 04 	call	0x876	; 0x876 <fputc>
     dc6:	2a 94       	dec	r2
     dc8:	f6 cf       	rjmp	.-20     	; 0xdb6 <vfprintf+0x3bc>
     dca:	f6 01       	movw	r30, r12
     dcc:	86 81       	ldd	r24, Z+6	; 0x06
     dce:	97 81       	ldd	r25, Z+7	; 0x07
     dd0:	02 c0       	rjmp	.+4      	; 0xdd6 <vfprintf+0x3dc>
     dd2:	8f ef       	ldi	r24, 0xFF	; 255
     dd4:	9f ef       	ldi	r25, 0xFF	; 255
     dd6:	2b 96       	adiw	r28, 0x0b	; 11
     dd8:	cd bf       	out	0x3d, r28	; 61
     dda:	de bf       	out	0x3e, r29	; 62
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	1f 91       	pop	r17
     de2:	0f 91       	pop	r16
     de4:	ff 90       	pop	r15
     de6:	ef 90       	pop	r14
     de8:	df 90       	pop	r13
     dea:	cf 90       	pop	r12
     dec:	bf 90       	pop	r11
     dee:	af 90       	pop	r10
     df0:	9f 90       	pop	r9
     df2:	8f 90       	pop	r8
     df4:	7f 90       	pop	r7
     df6:	6f 90       	pop	r6
     df8:	5f 90       	pop	r5
     dfa:	4f 90       	pop	r4
     dfc:	3f 90       	pop	r3
     dfe:	2f 90       	pop	r2
     e00:	08 95       	ret

00000e02 <strnlen_P>:
     e02:	fc 01       	movw	r30, r24
     e04:	05 90       	lpm	r0, Z+
     e06:	61 50       	subi	r22, 0x01	; 1
     e08:	70 40       	sbci	r23, 0x00	; 0
     e0a:	01 10       	cpse	r0, r1
     e0c:	d8 f7       	brcc	.-10     	; 0xe04 <strnlen_P+0x2>
     e0e:	80 95       	com	r24
     e10:	90 95       	com	r25
     e12:	8e 0f       	add	r24, r30
     e14:	9f 1f       	adc	r25, r31
     e16:	08 95       	ret

00000e18 <strnlen>:
     e18:	fc 01       	movw	r30, r24
     e1a:	61 50       	subi	r22, 0x01	; 1
     e1c:	70 40       	sbci	r23, 0x00	; 0
     e1e:	01 90       	ld	r0, Z+
     e20:	01 10       	cpse	r0, r1
     e22:	d8 f7       	brcc	.-10     	; 0xe1a <strnlen+0x2>
     e24:	80 95       	com	r24
     e26:	90 95       	com	r25
     e28:	8e 0f       	add	r24, r30
     e2a:	9f 1f       	adc	r25, r31
     e2c:	08 95       	ret

00000e2e <fgetc>:
     e2e:	cf 93       	push	r28
     e30:	df 93       	push	r29
     e32:	ec 01       	movw	r28, r24
     e34:	2b 81       	ldd	r18, Y+3	; 0x03
     e36:	20 ff       	sbrs	r18, 0
     e38:	33 c0       	rjmp	.+102    	; 0xea0 <fgetc+0x72>
     e3a:	26 ff       	sbrs	r18, 6
     e3c:	0a c0       	rjmp	.+20     	; 0xe52 <fgetc+0x24>
     e3e:	2f 7b       	andi	r18, 0xBF	; 191
     e40:	2b 83       	std	Y+3, r18	; 0x03
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	9f 81       	ldd	r25, Y+7	; 0x07
     e46:	01 96       	adiw	r24, 0x01	; 1
     e48:	8e 83       	std	Y+6, r24	; 0x06
     e4a:	9f 83       	std	Y+7, r25	; 0x07
     e4c:	8a 81       	ldd	r24, Y+2	; 0x02
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	29 c0       	rjmp	.+82     	; 0xea4 <fgetc+0x76>
     e52:	22 ff       	sbrs	r18, 2
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <fgetc+0x46>
     e56:	e8 81       	ld	r30, Y
     e58:	f9 81       	ldd	r31, Y+1	; 0x01
     e5a:	80 81       	ld	r24, Z
     e5c:	08 2e       	mov	r0, r24
     e5e:	00 0c       	add	r0, r0
     e60:	99 0b       	sbc	r25, r25
     e62:	00 97       	sbiw	r24, 0x00	; 0
     e64:	19 f4       	brne	.+6      	; 0xe6c <fgetc+0x3e>
     e66:	20 62       	ori	r18, 0x20	; 32
     e68:	2b 83       	std	Y+3, r18	; 0x03
     e6a:	1a c0       	rjmp	.+52     	; 0xea0 <fgetc+0x72>
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	e8 83       	st	Y, r30
     e70:	f9 83       	std	Y+1, r31	; 0x01
     e72:	0e c0       	rjmp	.+28     	; 0xe90 <fgetc+0x62>
     e74:	ea 85       	ldd	r30, Y+10	; 0x0a
     e76:	fb 85       	ldd	r31, Y+11	; 0x0b
     e78:	09 95       	icall
     e7a:	97 ff       	sbrs	r25, 7
     e7c:	09 c0       	rjmp	.+18     	; 0xe90 <fgetc+0x62>
     e7e:	2b 81       	ldd	r18, Y+3	; 0x03
     e80:	01 96       	adiw	r24, 0x01	; 1
     e82:	11 f0       	breq	.+4      	; 0xe88 <fgetc+0x5a>
     e84:	80 e2       	ldi	r24, 0x20	; 32
     e86:	01 c0       	rjmp	.+2      	; 0xe8a <fgetc+0x5c>
     e88:	80 e1       	ldi	r24, 0x10	; 16
     e8a:	82 2b       	or	r24, r18
     e8c:	8b 83       	std	Y+3, r24	; 0x03
     e8e:	08 c0       	rjmp	.+16     	; 0xea0 <fgetc+0x72>
     e90:	2e 81       	ldd	r18, Y+6	; 0x06
     e92:	3f 81       	ldd	r19, Y+7	; 0x07
     e94:	2f 5f       	subi	r18, 0xFF	; 255
     e96:	3f 4f       	sbci	r19, 0xFF	; 255
     e98:	2e 83       	std	Y+6, r18	; 0x06
     e9a:	3f 83       	std	Y+7, r19	; 0x07
     e9c:	99 27       	eor	r25, r25
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <fgetc+0x76>
     ea0:	8f ef       	ldi	r24, 0xFF	; 255
     ea2:	9f ef       	ldi	r25, 0xFF	; 255
     ea4:	df 91       	pop	r29
     ea6:	cf 91       	pop	r28
     ea8:	08 95       	ret

00000eaa <__ultoa_invert>:
     eaa:	fa 01       	movw	r30, r20
     eac:	aa 27       	eor	r26, r26
     eae:	28 30       	cpi	r18, 0x08	; 8
     eb0:	51 f1       	breq	.+84     	; 0xf06 <__ultoa_invert+0x5c>
     eb2:	20 31       	cpi	r18, 0x10	; 16
     eb4:	81 f1       	breq	.+96     	; 0xf16 <__ultoa_invert+0x6c>
     eb6:	e8 94       	clt
     eb8:	6f 93       	push	r22
     eba:	6e 7f       	andi	r22, 0xFE	; 254
     ebc:	6e 5f       	subi	r22, 0xFE	; 254
     ebe:	7f 4f       	sbci	r23, 0xFF	; 255
     ec0:	8f 4f       	sbci	r24, 0xFF	; 255
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	af 4f       	sbci	r26, 0xFF	; 255
     ec6:	b1 e0       	ldi	r27, 0x01	; 1
     ec8:	3e d0       	rcall	.+124    	; 0xf46 <__ultoa_invert+0x9c>
     eca:	b4 e0       	ldi	r27, 0x04	; 4
     ecc:	3c d0       	rcall	.+120    	; 0xf46 <__ultoa_invert+0x9c>
     ece:	67 0f       	add	r22, r23
     ed0:	78 1f       	adc	r23, r24
     ed2:	89 1f       	adc	r24, r25
     ed4:	9a 1f       	adc	r25, r26
     ed6:	a1 1d       	adc	r26, r1
     ed8:	68 0f       	add	r22, r24
     eda:	79 1f       	adc	r23, r25
     edc:	8a 1f       	adc	r24, r26
     ede:	91 1d       	adc	r25, r1
     ee0:	a1 1d       	adc	r26, r1
     ee2:	6a 0f       	add	r22, r26
     ee4:	71 1d       	adc	r23, r1
     ee6:	81 1d       	adc	r24, r1
     ee8:	91 1d       	adc	r25, r1
     eea:	a1 1d       	adc	r26, r1
     eec:	20 d0       	rcall	.+64     	; 0xf2e <__ultoa_invert+0x84>
     eee:	09 f4       	brne	.+2      	; 0xef2 <__ultoa_invert+0x48>
     ef0:	68 94       	set
     ef2:	3f 91       	pop	r19
     ef4:	2a e0       	ldi	r18, 0x0A	; 10
     ef6:	26 9f       	mul	r18, r22
     ef8:	11 24       	eor	r1, r1
     efa:	30 19       	sub	r19, r0
     efc:	30 5d       	subi	r19, 0xD0	; 208
     efe:	31 93       	st	Z+, r19
     f00:	de f6       	brtc	.-74     	; 0xeb8 <__ultoa_invert+0xe>
     f02:	cf 01       	movw	r24, r30
     f04:	08 95       	ret
     f06:	46 2f       	mov	r20, r22
     f08:	47 70       	andi	r20, 0x07	; 7
     f0a:	40 5d       	subi	r20, 0xD0	; 208
     f0c:	41 93       	st	Z+, r20
     f0e:	b3 e0       	ldi	r27, 0x03	; 3
     f10:	0f d0       	rcall	.+30     	; 0xf30 <__ultoa_invert+0x86>
     f12:	c9 f7       	brne	.-14     	; 0xf06 <__ultoa_invert+0x5c>
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <__ultoa_invert+0x58>
     f16:	46 2f       	mov	r20, r22
     f18:	4f 70       	andi	r20, 0x0F	; 15
     f1a:	40 5d       	subi	r20, 0xD0	; 208
     f1c:	4a 33       	cpi	r20, 0x3A	; 58
     f1e:	18 f0       	brcs	.+6      	; 0xf26 <__ultoa_invert+0x7c>
     f20:	49 5d       	subi	r20, 0xD9	; 217
     f22:	31 fd       	sbrc	r19, 1
     f24:	40 52       	subi	r20, 0x20	; 32
     f26:	41 93       	st	Z+, r20
     f28:	02 d0       	rcall	.+4      	; 0xf2e <__ultoa_invert+0x84>
     f2a:	a9 f7       	brne	.-22     	; 0xf16 <__ultoa_invert+0x6c>
     f2c:	ea cf       	rjmp	.-44     	; 0xf02 <__ultoa_invert+0x58>
     f2e:	b4 e0       	ldi	r27, 0x04	; 4
     f30:	a6 95       	lsr	r26
     f32:	97 95       	ror	r25
     f34:	87 95       	ror	r24
     f36:	77 95       	ror	r23
     f38:	67 95       	ror	r22
     f3a:	ba 95       	dec	r27
     f3c:	c9 f7       	brne	.-14     	; 0xf30 <__ultoa_invert+0x86>
     f3e:	00 97       	sbiw	r24, 0x00	; 0
     f40:	61 05       	cpc	r22, r1
     f42:	71 05       	cpc	r23, r1
     f44:	08 95       	ret
     f46:	9b 01       	movw	r18, r22
     f48:	ac 01       	movw	r20, r24
     f4a:	0a 2e       	mov	r0, r26
     f4c:	06 94       	lsr	r0
     f4e:	57 95       	ror	r21
     f50:	47 95       	ror	r20
     f52:	37 95       	ror	r19
     f54:	27 95       	ror	r18
     f56:	ba 95       	dec	r27
     f58:	c9 f7       	brne	.-14     	; 0xf4c <__ultoa_invert+0xa2>
     f5a:	62 0f       	add	r22, r18
     f5c:	73 1f       	adc	r23, r19
     f5e:	84 1f       	adc	r24, r20
     f60:	95 1f       	adc	r25, r21
     f62:	a0 1d       	adc	r26, r0
     f64:	08 95       	ret

00000f66 <eeprom_write_block>:
     f66:	54 2f       	mov	r21, r20
     f68:	2f ef       	ldi	r18, 0xFF	; 255
     f6a:	35 e1       	ldi	r19, 0x15	; 21
     f6c:	24 1b       	sub	r18, r20
     f6e:	31 09       	sbc	r19, r1
     f70:	26 17       	cp	r18, r22
     f72:	37 07       	cpc	r19, r23
     f74:	10 f4       	brcc	.+4      	; 0xf7a <eeprom_write_block+0x14>
     f76:	0e 94 40 08 	call	0x1080	; 0x1080 <abort>
     f7a:	20 91 02 10 	lds	r18, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     f7e:	21 fd       	sbrc	r18, 1
     f80:	fc cf       	rjmp	.-8      	; 0xf7a <eeprom_write_block+0x14>
     f82:	33 e1       	ldi	r19, 0x13	; 19
     f84:	2d e9       	ldi	r18, 0x9D	; 157
     f86:	24 bf       	out	0x34, r18	; 52
     f88:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     f8c:	28 2f       	mov	r18, r24
     f8e:	db 01       	movw	r26, r22
     f90:	bc 5e       	subi	r27, 0xEC	; 236
     f92:	fc 01       	movw	r30, r24
     f94:	8e 2f       	mov	r24, r30
     f96:	82 1b       	sub	r24, r18
     f98:	85 17       	cp	r24, r21
     f9a:	38 f4       	brcc	.+14     	; 0xfaa <eeprom_write_block+0x44>
     f9c:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     fa0:	81 fd       	sbrc	r24, 1
     fa2:	fc cf       	rjmp	.-8      	; 0xf9c <eeprom_write_block+0x36>
     fa4:	81 91       	ld	r24, Z+
     fa6:	8d 93       	st	X+, r24
     fa8:	f5 cf       	rjmp	.-22     	; 0xf94 <eeprom_write_block+0x2e>
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	8d e9       	ldi	r24, 0x9D	; 157
     fae:	84 bf       	out	0x34, r24	; 52
     fb0:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     fb4:	08 95       	ret

00000fb6 <eeprom_read_block>:
     fb6:	60 50       	subi	r22, 0x00	; 0
     fb8:	7c 4e       	sbci	r23, 0xEC	; 236
     fba:	0c 94 45 08 	jmp	0x108a	; 0x108a <memcpy>

00000fbe <eeprom_read_byte>:
     fbe:	03 d0       	rcall	.+6      	; 0xfc6 <eeprom_mapen>
     fc0:	80 81       	ld	r24, Z
     fc2:	99 27       	eor	r25, r25
     fc4:	08 95       	ret

00000fc6 <eeprom_mapen>:
     fc6:	fc 01       	movw	r30, r24
     fc8:	e0 50       	subi	r30, 0x00	; 0
     fca:	fc 4e       	sbci	r31, 0xEC	; 236
     fcc:	08 95       	ret

00000fce <eeprom_write_byte>:
     fce:	26 2f       	mov	r18, r22

00000fd0 <eeprom_write_r18>:
     fd0:	af 93       	push	r26
     fd2:	bf 93       	push	r27
     fd4:	e0 e0       	ldi	r30, 0x00	; 0
     fd6:	f0 e1       	ldi	r31, 0x10	; 16
     fd8:	32 81       	ldd	r19, Z+2	; 0x02
     fda:	31 fd       	sbrc	r19, 1
     fdc:	fd cf       	rjmp	.-6      	; 0xfd8 <eeprom_write_r18+0x8>
     fde:	3d e9       	ldi	r19, 0x9D	; 157
     fe0:	34 bf       	out	0x34, r19	; 52
     fe2:	33 e1       	ldi	r19, 0x13	; 19
     fe4:	30 83       	st	Z, r19
     fe6:	dc 01       	movw	r26, r24
     fe8:	a0 50       	subi	r26, 0x00	; 0
     fea:	bc 4e       	sbci	r27, 0xEC	; 236
     fec:	2c 93       	st	X, r18
     fee:	3d e9       	ldi	r19, 0x9D	; 157
     ff0:	34 bf       	out	0x34, r19	; 52
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	20 83       	st	Z, r18
     ff6:	01 96       	adiw	r24, 0x01	; 1
     ff8:	bf 91       	pop	r27
     ffa:	af 91       	pop	r26
     ffc:	08 95       	ret

00000ffe <__divmodsi4>:
     ffe:	05 2e       	mov	r0, r21
    1000:	97 fb       	bst	r25, 7
    1002:	1e f4       	brtc	.+6      	; 0x100a <__divmodsi4+0xc>
    1004:	00 94       	com	r0
    1006:	0e 94 16 08 	call	0x102c	; 0x102c <__negsi2>
    100a:	57 fd       	sbrc	r21, 7
    100c:	07 d0       	rcall	.+14     	; 0x101c <__divmodsi4_neg2>
    100e:	0e 94 6c 03 	call	0x6d8	; 0x6d8 <__udivmodsi4>
    1012:	07 fc       	sbrc	r0, 7
    1014:	03 d0       	rcall	.+6      	; 0x101c <__divmodsi4_neg2>
    1016:	4e f4       	brtc	.+18     	; 0x102a <__divmodsi4_exit>
    1018:	0c 94 16 08 	jmp	0x102c	; 0x102c <__negsi2>

0000101c <__divmodsi4_neg2>:
    101c:	50 95       	com	r21
    101e:	40 95       	com	r20
    1020:	30 95       	com	r19
    1022:	21 95       	neg	r18
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	4f 4f       	sbci	r20, 0xFF	; 255
    1028:	5f 4f       	sbci	r21, 0xFF	; 255

0000102a <__divmodsi4_exit>:
    102a:	08 95       	ret

0000102c <__negsi2>:
    102c:	90 95       	com	r25
    102e:	80 95       	com	r24
    1030:	70 95       	com	r23
    1032:	61 95       	neg	r22
    1034:	7f 4f       	sbci	r23, 0xFF	; 255
    1036:	8f 4f       	sbci	r24, 0xFF	; 255
    1038:	9f 4f       	sbci	r25, 0xFF	; 255
    103a:	08 95       	ret

0000103c <__muluhisi3>:
    103c:	0e 94 31 08 	call	0x1062	; 0x1062 <__umulhisi3>
    1040:	a5 9f       	mul	r26, r21
    1042:	90 0d       	add	r25, r0
    1044:	b4 9f       	mul	r27, r20
    1046:	90 0d       	add	r25, r0
    1048:	a4 9f       	mul	r26, r20
    104a:	80 0d       	add	r24, r0
    104c:	91 1d       	adc	r25, r1
    104e:	11 24       	eor	r1, r1
    1050:	08 95       	ret

00001052 <__mulshisi3>:
    1052:	b7 ff       	sbrs	r27, 7
    1054:	0c 94 1e 08 	jmp	0x103c	; 0x103c <__muluhisi3>

00001058 <__mulohisi3>:
    1058:	0e 94 1e 08 	call	0x103c	; 0x103c <__muluhisi3>
    105c:	82 1b       	sub	r24, r18
    105e:	93 0b       	sbc	r25, r19
    1060:	08 95       	ret

00001062 <__umulhisi3>:
    1062:	a2 9f       	mul	r26, r18
    1064:	b0 01       	movw	r22, r0
    1066:	b3 9f       	mul	r27, r19
    1068:	c0 01       	movw	r24, r0
    106a:	a3 9f       	mul	r26, r19
    106c:	70 0d       	add	r23, r0
    106e:	81 1d       	adc	r24, r1
    1070:	11 24       	eor	r1, r1
    1072:	91 1d       	adc	r25, r1
    1074:	b2 9f       	mul	r27, r18
    1076:	70 0d       	add	r23, r0
    1078:	81 1d       	adc	r24, r1
    107a:	11 24       	eor	r1, r1
    107c:	91 1d       	adc	r25, r1
    107e:	08 95       	ret

00001080 <abort>:
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	f8 94       	cli
    1086:	0c 94 4e 08 	jmp	0x109c	; 0x109c <_exit>

0000108a <memcpy>:
    108a:	fb 01       	movw	r30, r22
    108c:	dc 01       	movw	r26, r24
    108e:	02 c0       	rjmp	.+4      	; 0x1094 <memcpy+0xa>
    1090:	01 90       	ld	r0, Z+
    1092:	0d 92       	st	X+, r0
    1094:	41 50       	subi	r20, 0x01	; 1
    1096:	50 40       	sbci	r21, 0x00	; 0
    1098:	d8 f7       	brcc	.-10     	; 0x1090 <memcpy+0x6>
    109a:	08 95       	ret

0000109c <_exit>:
    109c:	f8 94       	cli

0000109e <__stop_program>:
    109e:	ff cf       	rjmp	.-2      	; 0x109e <__stop_program>
