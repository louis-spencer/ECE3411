
EEPROM_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d0  00804000  00001092  00001126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000058  008040d0  008040d0  000011f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000011f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  00001298  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000049d2  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003459  00000000  00000000  00005dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dcc  00000000  00000000  00009213  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000258  00000000  00000000  00009fe0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ff5  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b11  00000000  00000000  0000c22d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0000cd3e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	df e7       	ldi	r29, 0x7F	; 127
      fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
     100:	10 e4       	ldi	r17, 0x40	; 64
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b0 e4       	ldi	r27, 0x40	; 64
     106:	e2 e9       	ldi	r30, 0x92	; 146
     108:	f0 e1       	ldi	r31, 0x10	; 16
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	a0 3d       	cpi	r26, 0xD0	; 208
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	21 e4       	ldi	r18, 0x41	; 65
     11c:	a0 ed       	ldi	r26, 0xD0	; 208
     11e:	b0 e4       	ldi	r27, 0x40	; 64
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	a8 32       	cpi	r26, 0x28	; 40
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 4e 01 	call	0x29c	; 0x29c <main>
     12e:	0c 94 47 08 	jmp	0x108e	; 0x108e <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_clock>:
	uint8_t len = read_buf_eeprom(buf);
	
	printf("current pwd: ");
	printf_raw(buf, NULL);
	putchar('\n');
}
     136:	88 ed       	ldi	r24, 0xD8	; 216
     138:	84 bf       	out	0x34, r24	; 52
     13a:	e0 e6       	ldi	r30, 0x60	; 96
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	95 e0       	ldi	r25, 0x05	; 5
     140:	90 a3       	std	Z+32, r25	; 0x20
     142:	84 bf       	out	0x34, r24	; 52
     144:	83 e0       	ldi	r24, 0x03	; 3
     146:	80 83       	st	Z, r24
     148:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     14c:	84 ff       	sbrs	r24, 4
     14e:	fc cf       	rjmp	.-8      	; 0x148 <init_clock+0x12>
     150:	08 95       	ret

00000152 <init_WDT>:
     152:	a8 95       	wdr
     154:	88 ed       	ldi	r24, 0xD8	; 216
     156:	a8 95       	wdr
     158:	84 bf       	out	0x34, r24	; 52
     15a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     15e:	8b 60       	ori	r24, 0x0B	; 11
     160:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     164:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <__TEXT_REGION_LENGTH__+0x7e0101>
     168:	81 fd       	sbrc	r24, 1
     16a:	fc cf       	rjmp	.-8      	; 0x164 <init_WDT+0x12>
     16c:	08 95       	ret

0000016e <write_buf_eeprom>:
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	8c 01       	movw	r16, r24
     176:	c6 2f       	mov	r28, r22
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <eeprom_write_byte>
     180:	4c 2f       	mov	r20, r28
     182:	50 e0       	ldi	r21, 0x00	; 0
     184:	61 e0       	ldi	r22, 0x01	; 1
     186:	70 e0       	ldi	r23, 0x00	; 0
     188:	c8 01       	movw	r24, r16
     18a:	0e 94 ac 07 	call	0xf58	; 0xf58 <eeprom_write_block>
     18e:	cf 91       	pop	r28
     190:	1f 91       	pop	r17
     192:	0f 91       	pop	r16
     194:	08 95       	ret

00000196 <read_buf_eeprom>:
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	8c 01       	movw	r16, r24
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	90 e0       	ldi	r25, 0x00	; 0
     1a2:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <eeprom_read_byte>
     1a6:	c8 2f       	mov	r28, r24
     1a8:	01 15       	cp	r16, r1
     1aa:	11 05       	cpc	r17, r1
     1ac:	39 f0       	breq	.+14     	; 0x1bc <read_buf_eeprom+0x26>
     1ae:	48 2f       	mov	r20, r24
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	61 e0       	ldi	r22, 0x01	; 1
     1b4:	70 e0       	ldi	r23, 0x00	; 0
     1b6:	c8 01       	movw	r24, r16
     1b8:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <eeprom_read_block>
     1bc:	8c 2f       	mov	r24, r28
     1be:	cf 91       	pop	r28
     1c0:	1f 91       	pop	r17
     1c2:	0f 91       	pop	r16
     1c4:	08 95       	ret

000001c6 <str_input>:
     1c6:	cf 93       	push	r28
     1c8:	df 93       	push	r29
     1ca:	ec 01       	movw	r28, r24
     1cc:	40 91 22 41 	lds	r20, 0x4122	; 0x804122 <__iob>
     1d0:	50 91 23 41 	lds	r21, 0x4123	; 0x804123 <__iob+0x1>
     1d4:	60 e1       	ldi	r22, 0x10	; 16
     1d6:	70 e0       	ldi	r23, 0x00	; 0
     1d8:	0e 94 02 04 	call	0x804	; 0x804 <fgets>
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	8f 5f       	subi	r24, 0xFF	; 255
     1e0:	fe 01       	movw	r30, r28
     1e2:	e8 0f       	add	r30, r24
     1e4:	f1 1d       	adc	r31, r1
     1e6:	90 81       	ld	r25, Z
     1e8:	9a 30       	cpi	r25, 0x0A	; 10
     1ea:	11 f0       	breq	.+4      	; 0x1f0 <str_input+0x2a>
     1ec:	8f 30       	cpi	r24, 0x0F	; 15
     1ee:	b8 f3       	brcs	.-18     	; 0x1de <str_input+0x18>
     1f0:	28 2f       	mov	r18, r24
     1f2:	30 e0       	ldi	r19, 0x00	; 0
     1f4:	06 c0       	rjmp	.+12     	; 0x202 <__EEPROM_REGION_LENGTH__+0x2>
     1f6:	fe 01       	movw	r30, r28
     1f8:	e2 0f       	add	r30, r18
     1fa:	f3 1f       	adc	r31, r19
     1fc:	10 82       	st	Z, r1
     1fe:	2f 5f       	subi	r18, 0xFF	; 255
     200:	3f 4f       	sbci	r19, 0xFF	; 255
     202:	20 31       	cpi	r18, 0x10	; 16
     204:	31 05       	cpc	r19, r1
     206:	bc f3       	brlt	.-18     	; 0x1f6 <str_input+0x30>
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	08 95       	ret

0000020e <pwd_to_eeprom>:
     20e:	1f 93       	push	r17
     210:	cf 93       	push	r28
     212:	df 93       	push	r29
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
     218:	60 97       	sbiw	r28, 0x10	; 16
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	de bf       	out	0x3e, r29	; 62
     21e:	89 e1       	ldi	r24, 0x19	; 25
     220:	90 e4       	ldi	r25, 0x40	; 64
     222:	9f 93       	push	r25
     224:	8f 93       	push	r24
     226:	0e 94 b2 04 	call	0x964	; 0x964 <printf>
     22a:	ce 01       	movw	r24, r28
     22c:	01 96       	adiw	r24, 0x01	; 1
     22e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <str_input>
     232:	18 2f       	mov	r17, r24
     234:	60 91 24 41 	lds	r22, 0x4124	; 0x804124 <__iob+0x2>
     238:	70 91 25 41 	lds	r23, 0x4125	; 0x804125 <__iob+0x3>
     23c:	8a e0       	ldi	r24, 0x0A	; 10
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     244:	61 2f       	mov	r22, r17
     246:	ce 01       	movw	r24, r28
     248:	01 96       	adiw	r24, 0x01	; 1
     24a:	0e 94 b7 00 	call	0x16e	; 0x16e <write_buf_eeprom>
     24e:	0f 90       	pop	r0
     250:	0f 90       	pop	r0
     252:	60 96       	adiw	r28, 0x10	; 16
     254:	cd bf       	out	0x3d, r28	; 61
     256:	de bf       	out	0x3e, r29	; 62
     258:	df 91       	pop	r29
     25a:	cf 91       	pop	r28
     25c:	1f 91       	pop	r17
     25e:	08 95       	ret

00000260 <random_char>:

char random_char(int index) {
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	ef 97       	sbiw	r28, 0x3f	; 63
     26a:	cd bf       	out	0x3d, r28	; 61
     26c:	de bf       	out	0x3e, r29	; 62
	char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
     26e:	2f e3       	ldi	r18, 0x3F	; 63
     270:	e2 e3       	ldi	r30, 0x32	; 50
     272:	f0 e4       	ldi	r31, 0x40	; 64
     274:	de 01       	movw	r26, r28
     276:	11 96       	adiw	r26, 0x01	; 1
     278:	01 90       	ld	r0, Z+
     27a:	0d 92       	st	X+, r0
     27c:	2a 95       	dec	r18
     27e:	e1 f7       	brne	.-8      	; 0x278 <random_char+0x18>
	return charset[index];
     280:	21 e0       	ldi	r18, 0x01	; 1
     282:	30 e0       	ldi	r19, 0x00	; 0
     284:	2c 0f       	add	r18, r28
     286:	3d 1f       	adc	r19, r29
     288:	82 0f       	add	r24, r18
     28a:	93 1f       	adc	r25, r19
}
     28c:	fc 01       	movw	r30, r24
     28e:	80 81       	ld	r24, Z
     290:	ef 96       	adiw	r28, 0x3f	; 63
     292:	cd bf       	out	0x3d, r28	; 61
     294:	de bf       	out	0x3e, r29	; 62
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <main>:

int main(void)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	cd b7       	in	r28, 0x3d	; 61
     2a2:	de b7       	in	r29, 0x3e	; 62
     2a4:	a0 97       	sbiw	r28, 0x20	; 32
     2a6:	cd bf       	out	0x3d, r28	; 61
     2a8:	de bf       	out	0x3e, r29	; 62
    wdt_reset();
     2aa:	a8 95       	wdr
	wdt_disable();
     2ac:	88 ed       	ldi	r24, 0xD8	; 216
     2ae:	a8 95       	wdr
     2b0:	84 bf       	out	0x34, r24	; 52
     2b2:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     2b6:	80 7f       	andi	r24, 0xF0	; 240
     2b8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
	init_clock();
     2bc:	0e 94 9b 00 	call	0x136	; 0x136 <init_clock>
	uart_init(3, 9600, NULL);
     2c0:	20 e0       	ldi	r18, 0x00	; 0
     2c2:	30 e0       	ldi	r19, 0x00	; 0
     2c4:	40 e8       	ldi	r20, 0x80	; 128
     2c6:	55 e2       	ldi	r21, 0x25	; 37
     2c8:	60 e0       	ldi	r22, 0x00	; 0
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	83 e0       	ldi	r24, 0x03	; 3
     2ce:	0e 94 30 03 	call	0x660	; 0x660 <uart_init>

	sei();
     2d2:	78 94       	sei
	
	if (RSTCTRL.RSTFR & RSTCTRL_WDRF_bm) {
     2d4:	80 91 40 00 	lds	r24, 0x0040	; 0x800040 <__TEXT_REGION_LENGTH__+0x7e0040>
     2d8:	83 ff       	sbrs	r24, 3
     2da:	26 c0       	rjmp	.+76     	; 0x328 <main+0x8c>
		printf("\npassword reset\n");
     2dc:	81 e7       	ldi	r24, 0x71	; 113
     2de:	90 e4       	ldi	r25, 0x40	; 64
     2e0:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
		char buf_eeprom[BUF_SZ];
		for (int i = 0; i < BUF_SZ; i++) {
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	11 c0       	rjmp	.+34     	; 0x30c <main+0x70>
			buf_eeprom[i] = random_char( rand()%62 );
     2ea:	0e 94 e6 03 	call	0x7cc	; 0x7cc <rand>
     2ee:	6e e3       	ldi	r22, 0x3E	; 62
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	0e 94 51 03 	call	0x6a2	; 0x6a2 <__divmodhi4>
     2f6:	0e 94 30 01 	call	0x260	; 0x260 <random_char>
     2fa:	e1 e1       	ldi	r30, 0x11	; 17
     2fc:	f0 e0       	ldi	r31, 0x00	; 0
     2fe:	ec 0f       	add	r30, r28
     300:	fd 1f       	adc	r31, r29
     302:	e0 0f       	add	r30, r16
     304:	f1 1f       	adc	r31, r17
     306:	80 83       	st	Z, r24
	sei();
	
	if (RSTCTRL.RSTFR & RSTCTRL_WDRF_bm) {
		printf("\npassword reset\n");
		char buf_eeprom[BUF_SZ];
		for (int i = 0; i < BUF_SZ; i++) {
     308:	0f 5f       	subi	r16, 0xFF	; 255
     30a:	1f 4f       	sbci	r17, 0xFF	; 255
     30c:	00 31       	cpi	r16, 0x10	; 16
     30e:	11 05       	cpc	r17, r1
     310:	64 f3       	brlt	.-40     	; 0x2ea <main+0x4e>
			buf_eeprom[i] = random_char( rand()%62 );
		}
		buf_eeprom[BUF_SZ-1] = '\0';
     312:	18 a2       	std	Y+32, r1	; 0x20
		
		write_buf_eeprom(buf_eeprom, BUF_SZ);
     314:	60 e1       	ldi	r22, 0x10	; 16
     316:	ce 01       	movw	r24, r28
     318:	41 96       	adiw	r24, 0x11	; 17
     31a:	0e 94 b7 00 	call	0x16e	; 0x16e <write_buf_eeprom>
		RSTCTRL.RSTFR |= RSTCTRL_WDRF_bm;		
     31e:	e0 e4       	ldi	r30, 0x40	; 64
     320:	f0 e0       	ldi	r31, 0x00	; 0
     322:	80 81       	ld	r24, Z
     324:	88 60       	ori	r24, 0x08	; 8
     326:	80 83       	st	Z, r24
	}
	
	char eeprom_buf[BUF_SZ];
	uint8_t eeprom_len = read_buf_eeprom(eeprom_buf);
     328:	ce 01       	movw	r24, r28
     32a:	01 96       	adiw	r24, 0x01	; 1
     32c:	0e 94 cb 00 	call	0x196	; 0x196 <read_buf_eeprom>
     330:	18 2f       	mov	r17, r24
	
	if (eeprom_len == 0xff) {
     332:	8f 3f       	cpi	r24, 0xFF	; 255
     334:	39 f4       	brne	.+14     	; 0x344 <main+0xa8>
		printf("\n--set password--\n");
     336:	81 e8       	ldi	r24, 0x81	; 129
     338:	90 e4       	ldi	r25, 0x40	; 64
     33a:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
		pwd_to_eeprom();
     33e:	0e 94 07 01 	call	0x20e	; 0x20e <pwd_to_eeprom>
     342:	49 c0       	rjmp	.+146    	; 0x3d6 <main+0x13a>
	} else {
		printf("\n--guess password--\n");
     344:	83 e9       	ldi	r24, 0x93	; 147
     346:	90 e4       	ldi	r25, 0x40	; 64
     348:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
		//print_pwd_eeprom();
		init_WDT();
     34c:	0e 94 a9 00 	call	0x152	; 0x152 <init_WDT>
		char cmp_buf[BUF_SZ];
		
		while (no_match_flag != 0) {
     350:	36 c0       	rjmp	.+108    	; 0x3be <main+0x122>
			printf("enter password: ");
     352:	87 ea       	ldi	r24, 0xA7	; 167
     354:	90 e4       	ldi	r25, 0x40	; 64
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	0e 94 b2 04 	call	0x964	; 0x964 <printf>
			uint8_t cmp_len = str_input(cmp_buf);
     35e:	ce 01       	movw	r24, r28
     360:	41 96       	adiw	r24, 0x11	; 17
     362:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <str_input>
     366:	08 2f       	mov	r16, r24
			putchar('\n');
     368:	60 91 24 41 	lds	r22, 0x4124	; 0x804124 <__iob+0x2>
     36c:	70 91 25 41 	lds	r23, 0x4125	; 0x804125 <__iob+0x3>
     370:	8a e0       	ldi	r24, 0x0A	; 10
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
			no_match_flag = (memcmp(eeprom_buf, cmp_buf, eeprom_len) || !(eeprom_len == cmp_len));
     378:	41 2f       	mov	r20, r17
     37a:	50 e0       	ldi	r21, 0x00	; 0
     37c:	be 01       	movw	r22, r28
     37e:	6f 5e       	subi	r22, 0xEF	; 239
     380:	7f 4f       	sbci	r23, 0xFF	; 255
     382:	ce 01       	movw	r24, r28
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	0e 94 f5 03 	call	0x7ea	; 0x7ea <memcmp>
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	00 97       	sbiw	r24, 0x00	; 0
     390:	29 f4       	brne	.+10     	; 0x39c <main+0x100>
     392:	10 17       	cp	r17, r16
     394:	29 f0       	breq	.+10     	; 0x3a0 <main+0x104>
     396:	81 e0       	ldi	r24, 0x01	; 1
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	02 c0       	rjmp	.+4      	; 0x3a0 <main+0x104>
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	80 93 04 40 	sts	0x4004, r24	; 0x804004 <no_match_flag>
			if (no_match_flag == 0) break;
     3a4:	88 23       	and	r24, r24
     3a6:	79 f0       	breq	.+30     	; 0x3c6 <main+0x12a>
			printf("wrong password\n");
     3a8:	88 eb       	ldi	r24, 0xB8	; 184
     3aa:	90 e4       	ldi	r25, 0x40	; 64
     3ac:	0e 94 c6 04 	call	0x98c	; 0x98c <puts>
			memset(cmp_buf, 0, BUF_SZ);
     3b0:	fe 01       	movw	r30, r28
     3b2:	71 96       	adiw	r30, 0x11	; 17
     3b4:	80 e1       	ldi	r24, 0x10	; 16
     3b6:	df 01       	movw	r26, r30
     3b8:	1d 92       	st	X+, r1
     3ba:	8a 95       	dec	r24
     3bc:	e9 f7       	brne	.-6      	; 0x3b8 <main+0x11c>
		printf("\n--guess password--\n");
		//print_pwd_eeprom();
		init_WDT();
		char cmp_buf[BUF_SZ];
		
		while (no_match_flag != 0) {
     3be:	80 91 04 40 	lds	r24, 0x4004	; 0x804004 <no_match_flag>
     3c2:	81 11       	cpse	r24, r1
     3c4:	c6 cf       	rjmp	.-116    	; 0x352 <main+0xb6>
			if (no_match_flag == 0) break;
			printf("wrong password\n");
			memset(cmp_buf, 0, BUF_SZ);
		}
		
		wdt_disable();
     3c6:	88 ed       	ldi	r24, 0xD8	; 216
     3c8:	a8 95       	wdr
     3ca:	84 bf       	out	0x34, r24	; 52
     3cc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
     3d0:	80 7f       	andi	r24, 0xF0	; 240
     3d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x7e0100>
	}
	
	VPORTB.DIR = 0xff;
     3d6:	8f ef       	ldi	r24, 0xFF	; 255
     3d8:	84 b9       	out	0x04, r24	; 4
	VPORTB.OUT = 0x00;	
     3da:	15 b8       	out	0x05, r1	; 5
     3dc:	ff cf       	rjmp	.-2      	; 0x3dc <main+0x140>

000003de <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
     3de:	cf 93       	push	r28
     3e0:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
     3e2:	81 11       	cpse	r24, r1
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <usart_init+0x14>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
     3e6:	81 e0       	ldi	r24, 0x01	; 1
     3e8:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
     3ec:	c0 e0       	ldi	r28, 0x00	; 0
     3ee:	d8 e0       	ldi	r29, 0x08	; 8
     3f0:	19 c0       	rjmp	.+50     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
     3f2:	81 30       	cpi	r24, 0x01	; 1
     3f4:	29 f4       	brne	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
     3f6:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
     3fa:	c0 e2       	ldi	r28, 0x20	; 32
     3fc:	d8 e0       	ldi	r29, 0x08	; 8
     3fe:	12 c0       	rjmp	.+36     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
     400:	82 30       	cpi	r24, 0x02	; 2
     402:	31 f4       	brne	.+12     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
     404:	81 e0       	ldi	r24, 0x01	; 1
     406:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
     40a:	c0 e4       	ldi	r28, 0x40	; 64
     40c:	d8 e0       	ldi	r29, 0x08	; 8
     40e:	0a c0       	rjmp	.+20     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
     410:	83 30       	cpi	r24, 0x03	; 3
     412:	31 f4       	brne	.+12     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
     41a:	c0 e6       	ldi	r28, 0x60	; 96
     41c:	d8 e0       	ldi	r29, 0x08	; 8
     41e:	02 c0       	rjmp	.+4      	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
     420:	c0 e0       	ldi	r28, 0x00	; 0
     422:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
     424:	db 01       	movw	r26, r22
     426:	ca 01       	movw	r24, r20
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	aa 1f       	adc	r26, r26
     42e:	bb 1f       	adc	r27, r27
     430:	88 0f       	add	r24, r24
     432:	99 1f       	adc	r25, r25
     434:	aa 1f       	adc	r26, r26
     436:	bb 1f       	adc	r27, r27
     438:	9c 01       	movw	r18, r24
     43a:	ad 01       	movw	r20, r26
     43c:	22 0f       	add	r18, r18
     43e:	33 1f       	adc	r19, r19
     440:	44 1f       	adc	r20, r20
     442:	55 1f       	adc	r21, r21
     444:	22 0f       	add	r18, r18
     446:	33 1f       	adc	r19, r19
     448:	44 1f       	adc	r20, r20
     44a:	55 1f       	adc	r21, r21
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	89 e0       	ldi	r24, 0x09	; 9
     452:	9d e3       	ldi	r25, 0x3D	; 61
     454:	0e 94 65 03 	call	0x6ca	; 0x6ca <__udivmodsi4>
     458:	28 87       	std	Y+8, r18	; 0x08
     45a:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
     45c:	8e 81       	ldd	r24, Y+6	; 0x06
     45e:	80 6c       	ori	r24, 0xC0	; 192
     460:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
     462:	ce 01       	movw	r24, r28
     464:	df 91       	pop	r29
     466:	cf 91       	pop	r28
     468:	08 95       	ret

0000046a <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
     46a:	fc 01       	movw	r30, r24
     46c:	62 83       	std	Z+2, r22	; 0x02
     46e:	08 95       	ret

00000470 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
     470:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
     472:	94 81       	ldd	r25, Z+4	; 0x04
     474:	95 ff       	sbrs	r25, 5
     476:	fd cf       	rjmp	.-6      	; 0x472 <usart_wait_until_transmit_ready+0x2>
}
     478:	08 95       	ret

0000047a <usart_receive_data>:

int usart_receive_data(void* ptr)
{
     47a:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
     47c:	94 81       	ldd	r25, Z+4	; 0x04
     47e:	99 23       	and	r25, r25
     480:	ec f7       	brge	.-6      	; 0x47c <usart_receive_data+0x2>
	return (usart->RXDATAL);
     482:	80 81       	ld	r24, Z
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	08 95       	ret

00000488 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     488:	0f 93       	push	r16
     48a:	1f 93       	push	r17
     48c:	cf 93       	push	r28
     48e:	c8 2f       	mov	r28, r24
     490:	8b 01       	movw	r16, r22
	if (c == '\a') {
     492:	87 30       	cpi	r24, 0x07	; 7
     494:	69 f4       	brne	.+26     	; 0x4b0 <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
     496:	20 91 26 41 	lds	r18, 0x4126	; 0x804126 <__iob+0x4>
     49a:	30 91 27 41 	lds	r19, 0x4127	; 0x804127 <__iob+0x5>
     49e:	47 e0       	ldi	r20, 0x07	; 7
     4a0:	50 e0       	ldi	r21, 0x00	; 0
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	70 e0       	ldi	r23, 0x00	; 0
     4a6:	87 ec       	ldi	r24, 0xC7	; 199
     4a8:	90 e4       	ldi	r25, 0x40	; 64
     4aa:	0e 94 70 04 	call	0x8e0	; 0x8e0 <fwrite>
		return 0;
     4ae:	0f c0       	rjmp	.+30     	; 0x4ce <uart_putchar+0x46>
	}

	if (c == '\n') {
     4b0:	8a 30       	cpi	r24, 0x0A	; 10
     4b2:	19 f4       	brne	.+6      	; 0x4ba <uart_putchar+0x32>
		uart_putchar('\r', stream);
     4b4:	8d e0       	ldi	r24, 0x0D	; 13
     4b6:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
     4ba:	f8 01       	movw	r30, r16
     4bc:	04 85       	ldd	r16, Z+12	; 0x0c
     4be:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
     4c0:	c8 01       	movw	r24, r16
     4c2:	0e 94 38 02 	call	0x470	; 0x470 <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
     4c6:	6c 2f       	mov	r22, r28
     4c8:	c8 01       	movw	r24, r16
     4ca:	0e 94 35 02 	call	0x46a	; 0x46a <usart_transmit_data>

	return 0;
}
     4ce:	80 e0       	ldi	r24, 0x00	; 0
     4d0:	90 e0       	ldi	r25, 0x00	; 0
     4d2:	cf 91       	pop	r28
     4d4:	1f 91       	pop	r17
     4d6:	0f 91       	pop	r16
     4d8:	08 95       	ret

000004da <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     4da:	ef 92       	push	r14
     4dc:	ff 92       	push	r15
     4de:	0f 93       	push	r16
     4e0:	1f 93       	push	r17
     4e2:	cf 93       	push	r28
     4e4:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
     4e6:	20 91 20 41 	lds	r18, 0x4120	; 0x804120 <rxp.1995>
     4ea:	30 91 21 41 	lds	r19, 0x4121	; 0x804121 <rxp.1995+0x1>
     4ee:	23 2b       	or	r18, r19
     4f0:	09 f0       	breq	.+2      	; 0x4f4 <uart_getchar+0x1a>
     4f2:	9a c0       	rjmp	.+308    	; 0x628 <uart_getchar+0x14e>
     4f4:	8c 01       	movw	r16, r24
     4f6:	c0 ed       	ldi	r28, 0xD0	; 208
     4f8:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
     4fa:	f8 01       	movw	r30, r16
     4fc:	84 85       	ldd	r24, Z+12	; 0x0c
     4fe:	95 85       	ldd	r25, Z+13	; 0x0d
     500:	0e 94 3d 02 	call	0x47a	; 0x47a <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
     504:	8d 30       	cpi	r24, 0x0D	; 13
     506:	09 f4       	brne	.+2      	; 0x50a <uart_getchar+0x30>
				c = '\n';
     508:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
     50a:	8a 30       	cpi	r24, 0x0A	; 10
     50c:	59 f4       	brne	.+22     	; 0x524 <uart_getchar+0x4a>
			    *cp = c;
     50e:	88 83       	st	Y, r24
				uart_putchar(c, stream);
     510:	b8 01       	movw	r22, r16
     512:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
			    rxp = b;
     516:	80 ed       	ldi	r24, 0xD0	; 208
     518:	90 e4       	ldi	r25, 0x40	; 64
     51a:	80 93 20 41 	sts	0x4120, r24	; 0x804120 <rxp.1995>
     51e:	90 93 21 41 	sts	0x4121, r25	; 0x804121 <rxp.1995+0x1>
				break;
     522:	82 c0       	rjmp	.+260    	; 0x628 <uart_getchar+0x14e>
			}
			else if (c == '\t')
     524:	89 30       	cpi	r24, 0x09	; 9
     526:	09 f4       	brne	.+2      	; 0x52a <uart_getchar+0x50>
				c = ' ';
     528:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     52a:	90 ee       	ldi	r25, 0xE0	; 224
     52c:	98 0f       	add	r25, r24
     52e:	9f 35       	cpi	r25, 0x5F	; 95
     530:	10 f0       	brcs	.+4      	; 0x536 <uart_getchar+0x5c>
     532:	80 3a       	cpi	r24, 0xA0	; 160
     534:	98 f0       	brcs	.+38     	; 0x55c <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
     536:	f1 e4       	ldi	r31, 0x41	; 65
     538:	cf 31       	cpi	r28, 0x1F	; 31
     53a:	df 07       	cpc	r29, r31
     53c:	29 f4       	brne	.+10     	; 0x548 <uart_getchar+0x6e>
					uart_putchar('\a', stream);
     53e:	b8 01       	movw	r22, r16
     540:	87 e0       	ldi	r24, 0x07	; 7
     542:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
     546:	d9 cf       	rjmp	.-78     	; 0x4fa <uart_getchar+0x20>
				else {
					*cp++ = c;
     548:	7e 01       	movw	r14, r28
     54a:	9f ef       	ldi	r25, 0xFF	; 255
     54c:	e9 1a       	sub	r14, r25
     54e:	f9 0a       	sbc	r15, r25
     550:	88 83       	st	Y, r24
					uart_putchar(c, stream);
     552:	b8 01       	movw	r22, r16
     554:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
     558:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
     55a:	cf cf       	rjmp	.-98     	; 0x4fa <uart_getchar+0x20>
			}

			switch (c) {
     55c:	82 31       	cpi	r24, 0x12	; 18
     55e:	19 f1       	breq	.+70     	; 0x5a6 <uart_getchar+0xcc>
     560:	30 f4       	brcc	.+12     	; 0x56e <uart_getchar+0x94>
     562:	83 30       	cpi	r24, 0x03	; 3
     564:	09 f4       	brne	.+2      	; 0x568 <uart_getchar+0x8e>
     566:	73 c0       	rjmp	.+230    	; 0x64e <uart_getchar+0x174>
     568:	88 30       	cpi	r24, 0x08	; 8
     56a:	49 f0       	breq	.+18     	; 0x57e <uart_getchar+0xa4>
     56c:	c6 cf       	rjmp	.-116    	; 0x4fa <uart_getchar+0x20>
     56e:	87 31       	cpi	r24, 0x17	; 23
     570:	09 f4       	brne	.+2      	; 0x574 <uart_getchar+0x9a>
     572:	4e c0       	rjmp	.+156    	; 0x610 <uart_getchar+0x136>
     574:	8f 37       	cpi	r24, 0x7F	; 127
     576:	19 f0       	breq	.+6      	; 0x57e <uart_getchar+0xa4>
     578:	85 31       	cpi	r24, 0x15	; 21
     57a:	b9 f1       	breq	.+110    	; 0x5ea <uart_getchar+0x110>
     57c:	be cf       	rjmp	.-132    	; 0x4fa <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
     57e:	e0 e4       	ldi	r30, 0x40	; 64
     580:	c0 3d       	cpi	r28, 0xD0	; 208
     582:	de 07       	cpc	r29, r30
     584:	09 f0       	breq	.+2      	; 0x588 <uart_getchar+0xae>
     586:	08 f4       	brcc	.+2      	; 0x58a <uart_getchar+0xb0>
     588:	b8 cf       	rjmp	.-144    	; 0x4fa <uart_getchar+0x20>
						uart_putchar('\b', stream);
     58a:	b8 01       	movw	r22, r16
     58c:	88 e0       	ldi	r24, 0x08	; 8
     58e:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar(' ', stream);
     592:	b8 01       	movw	r22, r16
     594:	80 e2       	ldi	r24, 0x20	; 32
     596:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar('\b', stream);
     59a:	b8 01       	movw	r22, r16
     59c:	88 e0       	ldi	r24, 0x08	; 8
     59e:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						cp--;
     5a2:	21 97       	sbiw	r28, 0x01	; 1
     5a4:	aa cf       	rjmp	.-172    	; 0x4fa <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
     5a6:	b8 01       	movw	r22, r16
     5a8:	8d e0       	ldi	r24, 0x0D	; 13
     5aa:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
     5ae:	0f 2e       	mov	r0, r31
     5b0:	f0 ed       	ldi	r31, 0xD0	; 208
     5b2:	ef 2e       	mov	r14, r31
     5b4:	f0 e4       	ldi	r31, 0x40	; 64
     5b6:	ff 2e       	mov	r15, r31
     5b8:	f0 2d       	mov	r31, r0
     5ba:	06 c0       	rjmp	.+12     	; 0x5c8 <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
     5bc:	b8 01       	movw	r22, r16
     5be:	f7 01       	movw	r30, r14
     5c0:	81 91       	ld	r24, Z+
     5c2:	7f 01       	movw	r14, r30
     5c4:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
     5c8:	ec 16       	cp	r14, r28
     5ca:	fd 06       	cpc	r15, r29
     5cc:	b8 f3       	brcs	.-18     	; 0x5bc <uart_getchar+0xe2>
     5ce:	95 cf       	rjmp	.-214    	; 0x4fa <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
     5d0:	b8 01       	movw	r22, r16
     5d2:	88 e0       	ldi	r24, 0x08	; 8
     5d4:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar(' ', stream);
     5d8:	b8 01       	movw	r22, r16
     5da:	80 e2       	ldi	r24, 0x20	; 32
     5dc:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar('\b', stream);
     5e0:	b8 01       	movw	r22, r16
     5e2:	88 e0       	ldi	r24, 0x08	; 8
     5e4:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						cp--;
     5e8:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
     5ea:	f0 e4       	ldi	r31, 0x40	; 64
     5ec:	c0 3d       	cpi	r28, 0xD0	; 208
     5ee:	df 07       	cpc	r29, r31
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <uart_getchar+0x11a>
     5f2:	70 f7       	brcc	.-36     	; 0x5d0 <uart_getchar+0xf6>
     5f4:	82 cf       	rjmp	.-252    	; 0x4fa <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
     5f6:	b8 01       	movw	r22, r16
     5f8:	88 e0       	ldi	r24, 0x08	; 8
     5fa:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar(' ', stream);
     5fe:	b8 01       	movw	r22, r16
     600:	80 e2       	ldi	r24, 0x20	; 32
     602:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						uart_putchar('\b', stream);
     606:	b8 01       	movw	r22, r16
     608:	88 e0       	ldi	r24, 0x08	; 8
     60a:	0e 94 44 02 	call	0x488	; 0x488 <uart_putchar>
						cp--;
     60e:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
     610:	80 e4       	ldi	r24, 0x40	; 64
     612:	c0 3d       	cpi	r28, 0xD0	; 208
     614:	d8 07       	cpc	r29, r24
     616:	09 f0       	breq	.+2      	; 0x61a <uart_getchar+0x140>
     618:	08 f4       	brcc	.+2      	; 0x61c <uart_getchar+0x142>
     61a:	6f cf       	rjmp	.-290    	; 0x4fa <uart_getchar+0x20>
     61c:	fe 01       	movw	r30, r28
     61e:	31 97       	sbiw	r30, 0x01	; 1
     620:	80 81       	ld	r24, Z
     622:	80 32       	cpi	r24, 0x20	; 32
     624:	41 f7       	brne	.-48     	; 0x5f6 <uart_getchar+0x11c>
     626:	69 cf       	rjmp	.-302    	; 0x4fa <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
     628:	e0 91 20 41 	lds	r30, 0x4120	; 0x804120 <rxp.1995>
     62c:	f0 91 21 41 	lds	r31, 0x4121	; 0x804121 <rxp.1995+0x1>
     630:	cf 01       	movw	r24, r30
     632:	01 96       	adiw	r24, 0x01	; 1
     634:	80 93 20 41 	sts	0x4120, r24	; 0x804120 <rxp.1995>
     638:	90 93 21 41 	sts	0x4121, r25	; 0x804121 <rxp.1995+0x1>
     63c:	80 81       	ld	r24, Z
	if (c == '\n')
     63e:	8a 30       	cpi	r24, 0x0A	; 10
     640:	21 f4       	brne	.+8      	; 0x64a <uart_getchar+0x170>
		rxp = 0;
     642:	10 92 20 41 	sts	0x4120, r1	; 0x804120 <rxp.1995>
     646:	10 92 21 41 	sts	0x4121, r1	; 0x804121 <rxp.1995+0x1>

	return c;
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	02 c0       	rjmp	.+4      	; 0x652 <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
     64e:	8f ef       	ldi	r24, 0xFF	; 255
     650:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
     652:	df 91       	pop	r29
     654:	cf 91       	pop	r28
     656:	1f 91       	pop	r17
     658:	0f 91       	pop	r16
     65a:	ff 90       	pop	r15
     65c:	ef 90       	pop	r14
     65e:	08 95       	ret

00000660 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
     664:	e9 01       	movw	r28, r18
	if (stream) {
     666:	20 97       	sbiw	r28, 0x00	; 0
     668:	49 f0       	breq	.+18     	; 0x67c <uart_init+0x1c>
		*stream = uartFile;
     66a:	9e e0       	ldi	r25, 0x0E	; 14
     66c:	e5 e0       	ldi	r30, 0x05	; 5
     66e:	f0 e4       	ldi	r31, 0x40	; 64
     670:	d9 01       	movw	r26, r18
     672:	01 90       	ld	r0, Z+
     674:	0d 92       	st	X+, r0
     676:	9a 95       	dec	r25
     678:	e1 f7       	brne	.-8      	; 0x672 <uart_init+0x12>
     67a:	0b c0       	rjmp	.+22     	; 0x692 <uart_init+0x32>
	} else {
		stdout = &uartFile;
     67c:	e2 e2       	ldi	r30, 0x22	; 34
     67e:	f1 e4       	ldi	r31, 0x41	; 65
     680:	25 e0       	ldi	r18, 0x05	; 5
     682:	30 e4       	ldi	r19, 0x40	; 64
     684:	22 83       	std	Z+2, r18	; 0x02
     686:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
     688:	20 83       	st	Z, r18
     68a:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
     68c:	24 83       	std	Z+4, r18	; 0x04
     68e:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
     690:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
     692:	0e 94 ef 01 	call	0x3de	; 0x3de <usart_init>
	fdev_set_udata(stream, usart);
     696:	8c 87       	std	Y+12, r24	; 0x0c
     698:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
     69a:	ce 01       	movw	r24, r28
     69c:	df 91       	pop	r29
     69e:	cf 91       	pop	r28
     6a0:	08 95       	ret

000006a2 <__divmodhi4>:
     6a2:	97 fb       	bst	r25, 7
     6a4:	07 2e       	mov	r0, r23
     6a6:	16 f4       	brtc	.+4      	; 0x6ac <__divmodhi4+0xa>
     6a8:	00 94       	com	r0
     6aa:	07 d0       	rcall	.+14     	; 0x6ba <__divmodhi4_neg1>
     6ac:	77 fd       	sbrc	r23, 7
     6ae:	09 d0       	rcall	.+18     	; 0x6c2 <__divmodhi4_neg2>
     6b0:	0e 94 87 03 	call	0x70e	; 0x70e <__udivmodhi4>
     6b4:	07 fc       	sbrc	r0, 7
     6b6:	05 d0       	rcall	.+10     	; 0x6c2 <__divmodhi4_neg2>
     6b8:	3e f4       	brtc	.+14     	; 0x6c8 <__divmodhi4_exit>

000006ba <__divmodhi4_neg1>:
     6ba:	90 95       	com	r25
     6bc:	81 95       	neg	r24
     6be:	9f 4f       	sbci	r25, 0xFF	; 255
     6c0:	08 95       	ret

000006c2 <__divmodhi4_neg2>:
     6c2:	70 95       	com	r23
     6c4:	61 95       	neg	r22
     6c6:	7f 4f       	sbci	r23, 0xFF	; 255

000006c8 <__divmodhi4_exit>:
     6c8:	08 95       	ret

000006ca <__udivmodsi4>:
     6ca:	a1 e2       	ldi	r26, 0x21	; 33
     6cc:	1a 2e       	mov	r1, r26
     6ce:	aa 1b       	sub	r26, r26
     6d0:	bb 1b       	sub	r27, r27
     6d2:	fd 01       	movw	r30, r26
     6d4:	0d c0       	rjmp	.+26     	; 0x6f0 <__udivmodsi4_ep>

000006d6 <__udivmodsi4_loop>:
     6d6:	aa 1f       	adc	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	ee 1f       	adc	r30, r30
     6dc:	ff 1f       	adc	r31, r31
     6de:	a2 17       	cp	r26, r18
     6e0:	b3 07       	cpc	r27, r19
     6e2:	e4 07       	cpc	r30, r20
     6e4:	f5 07       	cpc	r31, r21
     6e6:	20 f0       	brcs	.+8      	; 0x6f0 <__udivmodsi4_ep>
     6e8:	a2 1b       	sub	r26, r18
     6ea:	b3 0b       	sbc	r27, r19
     6ec:	e4 0b       	sbc	r30, r20
     6ee:	f5 0b       	sbc	r31, r21

000006f0 <__udivmodsi4_ep>:
     6f0:	66 1f       	adc	r22, r22
     6f2:	77 1f       	adc	r23, r23
     6f4:	88 1f       	adc	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	1a 94       	dec	r1
     6fa:	69 f7       	brne	.-38     	; 0x6d6 <__udivmodsi4_loop>
     6fc:	60 95       	com	r22
     6fe:	70 95       	com	r23
     700:	80 95       	com	r24
     702:	90 95       	com	r25
     704:	9b 01       	movw	r18, r22
     706:	ac 01       	movw	r20, r24
     708:	bd 01       	movw	r22, r26
     70a:	cf 01       	movw	r24, r30
     70c:	08 95       	ret

0000070e <__udivmodhi4>:
     70e:	aa 1b       	sub	r26, r26
     710:	bb 1b       	sub	r27, r27
     712:	51 e1       	ldi	r21, 0x11	; 17
     714:	07 c0       	rjmp	.+14     	; 0x724 <__udivmodhi4_ep>

00000716 <__udivmodhi4_loop>:
     716:	aa 1f       	adc	r26, r26
     718:	bb 1f       	adc	r27, r27
     71a:	a6 17       	cp	r26, r22
     71c:	b7 07       	cpc	r27, r23
     71e:	10 f0       	brcs	.+4      	; 0x724 <__udivmodhi4_ep>
     720:	a6 1b       	sub	r26, r22
     722:	b7 0b       	sbc	r27, r23

00000724 <__udivmodhi4_ep>:
     724:	88 1f       	adc	r24, r24
     726:	99 1f       	adc	r25, r25
     728:	5a 95       	dec	r21
     72a:	a9 f7       	brne	.-22     	; 0x716 <__udivmodhi4_loop>
     72c:	80 95       	com	r24
     72e:	90 95       	com	r25
     730:	bc 01       	movw	r22, r24
     732:	cd 01       	movw	r24, r26
     734:	08 95       	ret

00000736 <do_rand>:
     736:	8f 92       	push	r8
     738:	9f 92       	push	r9
     73a:	af 92       	push	r10
     73c:	bf 92       	push	r11
     73e:	cf 92       	push	r12
     740:	df 92       	push	r13
     742:	ef 92       	push	r14
     744:	ff 92       	push	r15
     746:	cf 93       	push	r28
     748:	df 93       	push	r29
     74a:	ec 01       	movw	r28, r24
     74c:	68 81       	ld	r22, Y
     74e:	79 81       	ldd	r23, Y+1	; 0x01
     750:	8a 81       	ldd	r24, Y+2	; 0x02
     752:	9b 81       	ldd	r25, Y+3	; 0x03
     754:	61 15       	cp	r22, r1
     756:	71 05       	cpc	r23, r1
     758:	81 05       	cpc	r24, r1
     75a:	91 05       	cpc	r25, r1
     75c:	21 f4       	brne	.+8      	; 0x766 <do_rand+0x30>
     75e:	64 e2       	ldi	r22, 0x24	; 36
     760:	79 ed       	ldi	r23, 0xD9	; 217
     762:	8b e5       	ldi	r24, 0x5B	; 91
     764:	97 e0       	ldi	r25, 0x07	; 7
     766:	2d e1       	ldi	r18, 0x1D	; 29
     768:	33 ef       	ldi	r19, 0xF3	; 243
     76a:	41 e0       	ldi	r20, 0x01	; 1
     76c:	50 e0       	ldi	r21, 0x00	; 0
     76e:	0e 94 f8 07 	call	0xff0	; 0xff0 <__divmodsi4>
     772:	49 01       	movw	r8, r18
     774:	5a 01       	movw	r10, r20
     776:	9b 01       	movw	r18, r22
     778:	ac 01       	movw	r20, r24
     77a:	a7 ea       	ldi	r26, 0xA7	; 167
     77c:	b1 e4       	ldi	r27, 0x41	; 65
     77e:	0e 94 17 08 	call	0x102e	; 0x102e <__muluhisi3>
     782:	6b 01       	movw	r12, r22
     784:	7c 01       	movw	r14, r24
     786:	ac ee       	ldi	r26, 0xEC	; 236
     788:	b4 ef       	ldi	r27, 0xF4	; 244
     78a:	a5 01       	movw	r20, r10
     78c:	94 01       	movw	r18, r8
     78e:	0e 94 25 08 	call	0x104a	; 0x104a <__mulohisi3>
     792:	dc 01       	movw	r26, r24
     794:	cb 01       	movw	r24, r22
     796:	8c 0d       	add	r24, r12
     798:	9d 1d       	adc	r25, r13
     79a:	ae 1d       	adc	r26, r14
     79c:	bf 1d       	adc	r27, r15
     79e:	b7 ff       	sbrs	r27, 7
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <do_rand+0x72>
     7a2:	01 97       	sbiw	r24, 0x01	; 1
     7a4:	a1 09       	sbc	r26, r1
     7a6:	b0 48       	sbci	r27, 0x80	; 128
     7a8:	88 83       	st	Y, r24
     7aa:	99 83       	std	Y+1, r25	; 0x01
     7ac:	aa 83       	std	Y+2, r26	; 0x02
     7ae:	bb 83       	std	Y+3, r27	; 0x03
     7b0:	9f 77       	andi	r25, 0x7F	; 127
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	ff 90       	pop	r15
     7b8:	ef 90       	pop	r14
     7ba:	df 90       	pop	r13
     7bc:	cf 90       	pop	r12
     7be:	bf 90       	pop	r11
     7c0:	af 90       	pop	r10
     7c2:	9f 90       	pop	r9
     7c4:	8f 90       	pop	r8
     7c6:	08 95       	ret

000007c8 <rand_r>:
     7c8:	0c 94 9b 03 	jmp	0x736	; 0x736 <do_rand>

000007cc <rand>:
     7cc:	80 e0       	ldi	r24, 0x00	; 0
     7ce:	90 e4       	ldi	r25, 0x40	; 64
     7d0:	0c 94 9b 03 	jmp	0x736	; 0x736 <do_rand>

000007d4 <srand>:
     7d4:	a0 e0       	ldi	r26, 0x00	; 0
     7d6:	b0 e0       	ldi	r27, 0x00	; 0
     7d8:	80 93 00 40 	sts	0x4000, r24	; 0x804000 <__DATA_REGION_ORIGIN__>
     7dc:	90 93 01 40 	sts	0x4001, r25	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     7e0:	a0 93 02 40 	sts	0x4002, r26	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     7e4:	b0 93 03 40 	sts	0x4003, r27	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
     7e8:	08 95       	ret

000007ea <memcmp>:
     7ea:	fb 01       	movw	r30, r22
     7ec:	dc 01       	movw	r26, r24
     7ee:	04 c0       	rjmp	.+8      	; 0x7f8 <memcmp+0xe>
     7f0:	8d 91       	ld	r24, X+
     7f2:	01 90       	ld	r0, Z+
     7f4:	80 19       	sub	r24, r0
     7f6:	21 f4       	brne	.+8      	; 0x800 <memcmp+0x16>
     7f8:	41 50       	subi	r20, 0x01	; 1
     7fa:	50 40       	sbci	r21, 0x00	; 0
     7fc:	c8 f7       	brcc	.-14     	; 0x7f0 <memcmp+0x6>
     7fe:	88 1b       	sub	r24, r24
     800:	99 0b       	sbc	r25, r25
     802:	08 95       	ret

00000804 <fgets>:
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17
     810:	cf 93       	push	r28
     812:	df 93       	push	r29
     814:	fa 01       	movw	r30, r20
     816:	23 81       	ldd	r18, Z+3	; 0x03
     818:	20 fd       	sbrc	r18, 0
     81a:	03 c0       	rjmp	.+6      	; 0x822 <fgets+0x1e>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	1a c0       	rjmp	.+52     	; 0x856 <fgets+0x52>
     822:	16 16       	cp	r1, r22
     824:	17 06       	cpc	r1, r23
     826:	d4 f7       	brge	.-12     	; 0x81c <fgets+0x18>
     828:	7a 01       	movw	r14, r20
     82a:	8c 01       	movw	r16, r24
     82c:	eb 01       	movw	r28, r22
     82e:	6c 01       	movw	r12, r24
     830:	c1 30       	cpi	r28, 0x01	; 1
     832:	d1 05       	cpc	r29, r1
     834:	69 f0       	breq	.+26     	; 0x850 <fgets+0x4c>
     836:	c7 01       	movw	r24, r14
     838:	0e 94 10 07 	call	0xe20	; 0xe20 <fgetc>
     83c:	8f 3f       	cpi	r24, 0xFF	; 255
     83e:	ff ef       	ldi	r31, 0xFF	; 255
     840:	9f 07       	cpc	r25, r31
     842:	61 f3       	breq	.-40     	; 0x81c <fgets+0x18>
     844:	f6 01       	movw	r30, r12
     846:	81 93       	st	Z+, r24
     848:	6f 01       	movw	r12, r30
     84a:	21 97       	sbiw	r28, 0x01	; 1
     84c:	0a 97       	sbiw	r24, 0x0a	; 10
     84e:	81 f7       	brne	.-32     	; 0x830 <fgets+0x2c>
     850:	f6 01       	movw	r30, r12
     852:	10 82       	st	Z, r1
     854:	c8 01       	movw	r24, r16
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	ef 90       	pop	r14
     862:	df 90       	pop	r13
     864:	cf 90       	pop	r12
     866:	08 95       	ret

00000868 <fputc>:
     868:	0f 93       	push	r16
     86a:	1f 93       	push	r17
     86c:	cf 93       	push	r28
     86e:	df 93       	push	r29
     870:	fb 01       	movw	r30, r22
     872:	23 81       	ldd	r18, Z+3	; 0x03
     874:	21 fd       	sbrc	r18, 1
     876:	03 c0       	rjmp	.+6      	; 0x87e <fputc+0x16>
     878:	8f ef       	ldi	r24, 0xFF	; 255
     87a:	9f ef       	ldi	r25, 0xFF	; 255
     87c:	2c c0       	rjmp	.+88     	; 0x8d6 <fputc+0x6e>
     87e:	22 ff       	sbrs	r18, 2
     880:	16 c0       	rjmp	.+44     	; 0x8ae <fputc+0x46>
     882:	46 81       	ldd	r20, Z+6	; 0x06
     884:	57 81       	ldd	r21, Z+7	; 0x07
     886:	24 81       	ldd	r18, Z+4	; 0x04
     888:	35 81       	ldd	r19, Z+5	; 0x05
     88a:	42 17       	cp	r20, r18
     88c:	53 07       	cpc	r21, r19
     88e:	44 f4       	brge	.+16     	; 0x8a0 <fputc+0x38>
     890:	a0 81       	ld	r26, Z
     892:	b1 81       	ldd	r27, Z+1	; 0x01
     894:	9d 01       	movw	r18, r26
     896:	2f 5f       	subi	r18, 0xFF	; 255
     898:	3f 4f       	sbci	r19, 0xFF	; 255
     89a:	20 83       	st	Z, r18
     89c:	31 83       	std	Z+1, r19	; 0x01
     89e:	8c 93       	st	X, r24
     8a0:	26 81       	ldd	r18, Z+6	; 0x06
     8a2:	37 81       	ldd	r19, Z+7	; 0x07
     8a4:	2f 5f       	subi	r18, 0xFF	; 255
     8a6:	3f 4f       	sbci	r19, 0xFF	; 255
     8a8:	26 83       	std	Z+6, r18	; 0x06
     8aa:	37 83       	std	Z+7, r19	; 0x07
     8ac:	14 c0       	rjmp	.+40     	; 0x8d6 <fputc+0x6e>
     8ae:	8b 01       	movw	r16, r22
     8b0:	ec 01       	movw	r28, r24
     8b2:	fb 01       	movw	r30, r22
     8b4:	00 84       	ldd	r0, Z+8	; 0x08
     8b6:	f1 85       	ldd	r31, Z+9	; 0x09
     8b8:	e0 2d       	mov	r30, r0
     8ba:	09 95       	icall
     8bc:	89 2b       	or	r24, r25
     8be:	e1 f6       	brne	.-72     	; 0x878 <fputc+0x10>
     8c0:	d8 01       	movw	r26, r16
     8c2:	16 96       	adiw	r26, 0x06	; 6
     8c4:	8d 91       	ld	r24, X+
     8c6:	9c 91       	ld	r25, X
     8c8:	17 97       	sbiw	r26, 0x07	; 7
     8ca:	01 96       	adiw	r24, 0x01	; 1
     8cc:	16 96       	adiw	r26, 0x06	; 6
     8ce:	8d 93       	st	X+, r24
     8d0:	9c 93       	st	X, r25
     8d2:	17 97       	sbiw	r26, 0x07	; 7
     8d4:	ce 01       	movw	r24, r28
     8d6:	df 91       	pop	r29
     8d8:	cf 91       	pop	r28
     8da:	1f 91       	pop	r17
     8dc:	0f 91       	pop	r16
     8de:	08 95       	ret

000008e0 <fwrite>:
     8e0:	8f 92       	push	r8
     8e2:	9f 92       	push	r9
     8e4:	af 92       	push	r10
     8e6:	bf 92       	push	r11
     8e8:	cf 92       	push	r12
     8ea:	df 92       	push	r13
     8ec:	ef 92       	push	r14
     8ee:	ff 92       	push	r15
     8f0:	0f 93       	push	r16
     8f2:	1f 93       	push	r17
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	5b 01       	movw	r10, r22
     8fa:	4a 01       	movw	r8, r20
     8fc:	79 01       	movw	r14, r18
     8fe:	d9 01       	movw	r26, r18
     900:	13 96       	adiw	r26, 0x03	; 3
     902:	2c 91       	ld	r18, X
     904:	21 ff       	sbrs	r18, 1
     906:	1d c0       	rjmp	.+58     	; 0x942 <fwrite+0x62>
     908:	c0 e0       	ldi	r28, 0x00	; 0
     90a:	d0 e0       	ldi	r29, 0x00	; 0
     90c:	c8 15       	cp	r28, r8
     90e:	d9 05       	cpc	r29, r9
     910:	d9 f0       	breq	.+54     	; 0x948 <fwrite+0x68>
     912:	8c 01       	movw	r16, r24
     914:	6c 01       	movw	r12, r24
     916:	ca 0c       	add	r12, r10
     918:	db 1c       	adc	r13, r11
     91a:	c8 01       	movw	r24, r16
     91c:	0c 15       	cp	r16, r12
     91e:	1d 05       	cpc	r17, r13
     920:	71 f0       	breq	.+28     	; 0x93e <fwrite+0x5e>
     922:	0f 5f       	subi	r16, 0xFF	; 255
     924:	1f 4f       	sbci	r17, 0xFF	; 255
     926:	d7 01       	movw	r26, r14
     928:	18 96       	adiw	r26, 0x08	; 8
     92a:	ed 91       	ld	r30, X+
     92c:	fc 91       	ld	r31, X
     92e:	19 97       	sbiw	r26, 0x09	; 9
     930:	b7 01       	movw	r22, r14
     932:	dc 01       	movw	r26, r24
     934:	8c 91       	ld	r24, X
     936:	09 95       	icall
     938:	89 2b       	or	r24, r25
     93a:	79 f3       	breq	.-34     	; 0x91a <fwrite+0x3a>
     93c:	05 c0       	rjmp	.+10     	; 0x948 <fwrite+0x68>
     93e:	21 96       	adiw	r28, 0x01	; 1
     940:	e5 cf       	rjmp	.-54     	; 0x90c <fwrite+0x2c>
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	01 c0       	rjmp	.+2      	; 0x94a <fwrite+0x6a>
     948:	ce 01       	movw	r24, r28
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	08 95       	ret

00000964 <printf>:
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	ae 01       	movw	r20, r28
     96e:	4b 5f       	subi	r20, 0xFB	; 251
     970:	5f 4f       	sbci	r21, 0xFF	; 255
     972:	fa 01       	movw	r30, r20
     974:	61 91       	ld	r22, Z+
     976:	71 91       	ld	r23, Z+
     978:	af 01       	movw	r20, r30
     97a:	80 91 24 41 	lds	r24, 0x4124	; 0x804124 <__iob+0x2>
     97e:	90 91 25 41 	lds	r25, 0x4125	; 0x804125 <__iob+0x3>
     982:	0e 94 f6 04 	call	0x9ec	; 0x9ec <vfprintf>
     986:	df 91       	pop	r29
     988:	cf 91       	pop	r28
     98a:	08 95       	ret

0000098c <puts>:
     98c:	0f 93       	push	r16
     98e:	1f 93       	push	r17
     990:	cf 93       	push	r28
     992:	df 93       	push	r29
     994:	e0 91 24 41 	lds	r30, 0x4124	; 0x804124 <__iob+0x2>
     998:	f0 91 25 41 	lds	r31, 0x4125	; 0x804125 <__iob+0x3>
     99c:	23 81       	ldd	r18, Z+3	; 0x03
     99e:	21 ff       	sbrs	r18, 1
     9a0:	1b c0       	rjmp	.+54     	; 0x9d8 <puts+0x4c>
     9a2:	8c 01       	movw	r16, r24
     9a4:	d0 e0       	ldi	r29, 0x00	; 0
     9a6:	c0 e0       	ldi	r28, 0x00	; 0
     9a8:	f8 01       	movw	r30, r16
     9aa:	81 91       	ld	r24, Z+
     9ac:	8f 01       	movw	r16, r30
     9ae:	60 91 24 41 	lds	r22, 0x4124	; 0x804124 <__iob+0x2>
     9b2:	70 91 25 41 	lds	r23, 0x4125	; 0x804125 <__iob+0x3>
     9b6:	db 01       	movw	r26, r22
     9b8:	18 96       	adiw	r26, 0x08	; 8
     9ba:	ed 91       	ld	r30, X+
     9bc:	fc 91       	ld	r31, X
     9be:	19 97       	sbiw	r26, 0x09	; 9
     9c0:	88 23       	and	r24, r24
     9c2:	31 f0       	breq	.+12     	; 0x9d0 <puts+0x44>
     9c4:	09 95       	icall
     9c6:	89 2b       	or	r24, r25
     9c8:	79 f3       	breq	.-34     	; 0x9a8 <puts+0x1c>
     9ca:	df ef       	ldi	r29, 0xFF	; 255
     9cc:	cf ef       	ldi	r28, 0xFF	; 255
     9ce:	ec cf       	rjmp	.-40     	; 0x9a8 <puts+0x1c>
     9d0:	8a e0       	ldi	r24, 0x0A	; 10
     9d2:	09 95       	icall
     9d4:	89 2b       	or	r24, r25
     9d6:	19 f0       	breq	.+6      	; 0x9de <puts+0x52>
     9d8:	8f ef       	ldi	r24, 0xFF	; 255
     9da:	9f ef       	ldi	r25, 0xFF	; 255
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <puts+0x56>
     9de:	8d 2f       	mov	r24, r29
     9e0:	9c 2f       	mov	r25, r28
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <vfprintf>:
     9ec:	2f 92       	push	r2
     9ee:	3f 92       	push	r3
     9f0:	4f 92       	push	r4
     9f2:	5f 92       	push	r5
     9f4:	6f 92       	push	r6
     9f6:	7f 92       	push	r7
     9f8:	8f 92       	push	r8
     9fa:	9f 92       	push	r9
     9fc:	af 92       	push	r10
     9fe:	bf 92       	push	r11
     a00:	cf 92       	push	r12
     a02:	df 92       	push	r13
     a04:	ef 92       	push	r14
     a06:	ff 92       	push	r15
     a08:	0f 93       	push	r16
     a0a:	1f 93       	push	r17
     a0c:	cf 93       	push	r28
     a0e:	df 93       	push	r29
     a10:	cd b7       	in	r28, 0x3d	; 61
     a12:	de b7       	in	r29, 0x3e	; 62
     a14:	2b 97       	sbiw	r28, 0x0b	; 11
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	de bf       	out	0x3e, r29	; 62
     a1a:	6c 01       	movw	r12, r24
     a1c:	7b 01       	movw	r14, r22
     a1e:	8a 01       	movw	r16, r20
     a20:	fc 01       	movw	r30, r24
     a22:	16 82       	std	Z+6, r1	; 0x06
     a24:	17 82       	std	Z+7, r1	; 0x07
     a26:	83 81       	ldd	r24, Z+3	; 0x03
     a28:	81 ff       	sbrs	r24, 1
     a2a:	cc c1       	rjmp	.+920    	; 0xdc4 <vfprintf+0x3d8>
     a2c:	ce 01       	movw	r24, r28
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	3c 01       	movw	r6, r24
     a32:	f6 01       	movw	r30, r12
     a34:	93 81       	ldd	r25, Z+3	; 0x03
     a36:	f7 01       	movw	r30, r14
     a38:	93 fd       	sbrc	r25, 3
     a3a:	85 91       	lpm	r24, Z+
     a3c:	93 ff       	sbrs	r25, 3
     a3e:	81 91       	ld	r24, Z+
     a40:	7f 01       	movw	r14, r30
     a42:	88 23       	and	r24, r24
     a44:	09 f4       	brne	.+2      	; 0xa48 <vfprintf+0x5c>
     a46:	ba c1       	rjmp	.+884    	; 0xdbc <vfprintf+0x3d0>
     a48:	85 32       	cpi	r24, 0x25	; 37
     a4a:	39 f4       	brne	.+14     	; 0xa5a <vfprintf+0x6e>
     a4c:	93 fd       	sbrc	r25, 3
     a4e:	85 91       	lpm	r24, Z+
     a50:	93 ff       	sbrs	r25, 3
     a52:	81 91       	ld	r24, Z+
     a54:	7f 01       	movw	r14, r30
     a56:	85 32       	cpi	r24, 0x25	; 37
     a58:	29 f4       	brne	.+10     	; 0xa64 <vfprintf+0x78>
     a5a:	b6 01       	movw	r22, r12
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     a62:	e7 cf       	rjmp	.-50     	; 0xa32 <vfprintf+0x46>
     a64:	91 2c       	mov	r9, r1
     a66:	21 2c       	mov	r2, r1
     a68:	31 2c       	mov	r3, r1
     a6a:	ff e1       	ldi	r31, 0x1F	; 31
     a6c:	f3 15       	cp	r31, r3
     a6e:	d8 f0       	brcs	.+54     	; 0xaa6 <vfprintf+0xba>
     a70:	8b 32       	cpi	r24, 0x2B	; 43
     a72:	79 f0       	breq	.+30     	; 0xa92 <vfprintf+0xa6>
     a74:	38 f4       	brcc	.+14     	; 0xa84 <vfprintf+0x98>
     a76:	80 32       	cpi	r24, 0x20	; 32
     a78:	79 f0       	breq	.+30     	; 0xa98 <vfprintf+0xac>
     a7a:	83 32       	cpi	r24, 0x23	; 35
     a7c:	a1 f4       	brne	.+40     	; 0xaa6 <vfprintf+0xba>
     a7e:	23 2d       	mov	r18, r3
     a80:	20 61       	ori	r18, 0x10	; 16
     a82:	1d c0       	rjmp	.+58     	; 0xabe <vfprintf+0xd2>
     a84:	8d 32       	cpi	r24, 0x2D	; 45
     a86:	61 f0       	breq	.+24     	; 0xaa0 <vfprintf+0xb4>
     a88:	80 33       	cpi	r24, 0x30	; 48
     a8a:	69 f4       	brne	.+26     	; 0xaa6 <vfprintf+0xba>
     a8c:	23 2d       	mov	r18, r3
     a8e:	21 60       	ori	r18, 0x01	; 1
     a90:	16 c0       	rjmp	.+44     	; 0xabe <vfprintf+0xd2>
     a92:	83 2d       	mov	r24, r3
     a94:	82 60       	ori	r24, 0x02	; 2
     a96:	38 2e       	mov	r3, r24
     a98:	e3 2d       	mov	r30, r3
     a9a:	e4 60       	ori	r30, 0x04	; 4
     a9c:	3e 2e       	mov	r3, r30
     a9e:	2a c0       	rjmp	.+84     	; 0xaf4 <vfprintf+0x108>
     aa0:	f3 2d       	mov	r31, r3
     aa2:	f8 60       	ori	r31, 0x08	; 8
     aa4:	1d c0       	rjmp	.+58     	; 0xae0 <vfprintf+0xf4>
     aa6:	37 fc       	sbrc	r3, 7
     aa8:	2d c0       	rjmp	.+90     	; 0xb04 <vfprintf+0x118>
     aaa:	20 ed       	ldi	r18, 0xD0	; 208
     aac:	28 0f       	add	r18, r24
     aae:	2a 30       	cpi	r18, 0x0A	; 10
     ab0:	40 f0       	brcs	.+16     	; 0xac2 <vfprintf+0xd6>
     ab2:	8e 32       	cpi	r24, 0x2E	; 46
     ab4:	b9 f4       	brne	.+46     	; 0xae4 <vfprintf+0xf8>
     ab6:	36 fc       	sbrc	r3, 6
     ab8:	81 c1       	rjmp	.+770    	; 0xdbc <vfprintf+0x3d0>
     aba:	23 2d       	mov	r18, r3
     abc:	20 64       	ori	r18, 0x40	; 64
     abe:	32 2e       	mov	r3, r18
     ac0:	19 c0       	rjmp	.+50     	; 0xaf4 <vfprintf+0x108>
     ac2:	36 fe       	sbrs	r3, 6
     ac4:	06 c0       	rjmp	.+12     	; 0xad2 <vfprintf+0xe6>
     ac6:	8a e0       	ldi	r24, 0x0A	; 10
     ac8:	98 9e       	mul	r9, r24
     aca:	20 0d       	add	r18, r0
     acc:	11 24       	eor	r1, r1
     ace:	92 2e       	mov	r9, r18
     ad0:	11 c0       	rjmp	.+34     	; 0xaf4 <vfprintf+0x108>
     ad2:	ea e0       	ldi	r30, 0x0A	; 10
     ad4:	2e 9e       	mul	r2, r30
     ad6:	20 0d       	add	r18, r0
     ad8:	11 24       	eor	r1, r1
     ada:	22 2e       	mov	r2, r18
     adc:	f3 2d       	mov	r31, r3
     ade:	f0 62       	ori	r31, 0x20	; 32
     ae0:	3f 2e       	mov	r3, r31
     ae2:	08 c0       	rjmp	.+16     	; 0xaf4 <vfprintf+0x108>
     ae4:	8c 36       	cpi	r24, 0x6C	; 108
     ae6:	21 f4       	brne	.+8      	; 0xaf0 <vfprintf+0x104>
     ae8:	83 2d       	mov	r24, r3
     aea:	80 68       	ori	r24, 0x80	; 128
     aec:	38 2e       	mov	r3, r24
     aee:	02 c0       	rjmp	.+4      	; 0xaf4 <vfprintf+0x108>
     af0:	88 36       	cpi	r24, 0x68	; 104
     af2:	41 f4       	brne	.+16     	; 0xb04 <vfprintf+0x118>
     af4:	f7 01       	movw	r30, r14
     af6:	93 fd       	sbrc	r25, 3
     af8:	85 91       	lpm	r24, Z+
     afa:	93 ff       	sbrs	r25, 3
     afc:	81 91       	ld	r24, Z+
     afe:	7f 01       	movw	r14, r30
     b00:	81 11       	cpse	r24, r1
     b02:	b3 cf       	rjmp	.-154    	; 0xa6a <vfprintf+0x7e>
     b04:	98 2f       	mov	r25, r24
     b06:	9f 7d       	andi	r25, 0xDF	; 223
     b08:	95 54       	subi	r25, 0x45	; 69
     b0a:	93 30       	cpi	r25, 0x03	; 3
     b0c:	28 f4       	brcc	.+10     	; 0xb18 <vfprintf+0x12c>
     b0e:	0c 5f       	subi	r16, 0xFC	; 252
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	9f e3       	ldi	r25, 0x3F	; 63
     b14:	99 83       	std	Y+1, r25	; 0x01
     b16:	0d c0       	rjmp	.+26     	; 0xb32 <vfprintf+0x146>
     b18:	83 36       	cpi	r24, 0x63	; 99
     b1a:	31 f0       	breq	.+12     	; 0xb28 <vfprintf+0x13c>
     b1c:	83 37       	cpi	r24, 0x73	; 115
     b1e:	71 f0       	breq	.+28     	; 0xb3c <vfprintf+0x150>
     b20:	83 35       	cpi	r24, 0x53	; 83
     b22:	09 f0       	breq	.+2      	; 0xb26 <vfprintf+0x13a>
     b24:	59 c0       	rjmp	.+178    	; 0xbd8 <vfprintf+0x1ec>
     b26:	21 c0       	rjmp	.+66     	; 0xb6a <vfprintf+0x17e>
     b28:	f8 01       	movw	r30, r16
     b2a:	80 81       	ld	r24, Z
     b2c:	89 83       	std	Y+1, r24	; 0x01
     b2e:	0e 5f       	subi	r16, 0xFE	; 254
     b30:	1f 4f       	sbci	r17, 0xFF	; 255
     b32:	88 24       	eor	r8, r8
     b34:	83 94       	inc	r8
     b36:	91 2c       	mov	r9, r1
     b38:	53 01       	movw	r10, r6
     b3a:	13 c0       	rjmp	.+38     	; 0xb62 <vfprintf+0x176>
     b3c:	28 01       	movw	r4, r16
     b3e:	f2 e0       	ldi	r31, 0x02	; 2
     b40:	4f 0e       	add	r4, r31
     b42:	51 1c       	adc	r5, r1
     b44:	f8 01       	movw	r30, r16
     b46:	a0 80       	ld	r10, Z
     b48:	b1 80       	ldd	r11, Z+1	; 0x01
     b4a:	36 fe       	sbrs	r3, 6
     b4c:	03 c0       	rjmp	.+6      	; 0xb54 <vfprintf+0x168>
     b4e:	69 2d       	mov	r22, r9
     b50:	70 e0       	ldi	r23, 0x00	; 0
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <vfprintf+0x16c>
     b54:	6f ef       	ldi	r22, 0xFF	; 255
     b56:	7f ef       	ldi	r23, 0xFF	; 255
     b58:	c5 01       	movw	r24, r10
     b5a:	0e 94 05 07 	call	0xe0a	; 0xe0a <strnlen>
     b5e:	4c 01       	movw	r8, r24
     b60:	82 01       	movw	r16, r4
     b62:	f3 2d       	mov	r31, r3
     b64:	ff 77       	andi	r31, 0x7F	; 127
     b66:	3f 2e       	mov	r3, r31
     b68:	16 c0       	rjmp	.+44     	; 0xb96 <vfprintf+0x1aa>
     b6a:	28 01       	movw	r4, r16
     b6c:	22 e0       	ldi	r18, 0x02	; 2
     b6e:	42 0e       	add	r4, r18
     b70:	51 1c       	adc	r5, r1
     b72:	f8 01       	movw	r30, r16
     b74:	a0 80       	ld	r10, Z
     b76:	b1 80       	ldd	r11, Z+1	; 0x01
     b78:	36 fe       	sbrs	r3, 6
     b7a:	03 c0       	rjmp	.+6      	; 0xb82 <vfprintf+0x196>
     b7c:	69 2d       	mov	r22, r9
     b7e:	70 e0       	ldi	r23, 0x00	; 0
     b80:	02 c0       	rjmp	.+4      	; 0xb86 <vfprintf+0x19a>
     b82:	6f ef       	ldi	r22, 0xFF	; 255
     b84:	7f ef       	ldi	r23, 0xFF	; 255
     b86:	c5 01       	movw	r24, r10
     b88:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <strnlen_P>
     b8c:	4c 01       	movw	r8, r24
     b8e:	f3 2d       	mov	r31, r3
     b90:	f0 68       	ori	r31, 0x80	; 128
     b92:	3f 2e       	mov	r3, r31
     b94:	82 01       	movw	r16, r4
     b96:	33 fc       	sbrc	r3, 3
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <vfprintf+0x1e4>
     b9a:	82 2d       	mov	r24, r2
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	88 16       	cp	r8, r24
     ba0:	99 06       	cpc	r9, r25
     ba2:	b0 f4       	brcc	.+44     	; 0xbd0 <vfprintf+0x1e4>
     ba4:	b6 01       	movw	r22, r12
     ba6:	80 e2       	ldi	r24, 0x20	; 32
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     bae:	2a 94       	dec	r2
     bb0:	f4 cf       	rjmp	.-24     	; 0xb9a <vfprintf+0x1ae>
     bb2:	f5 01       	movw	r30, r10
     bb4:	37 fc       	sbrc	r3, 7
     bb6:	85 91       	lpm	r24, Z+
     bb8:	37 fe       	sbrs	r3, 7
     bba:	81 91       	ld	r24, Z+
     bbc:	5f 01       	movw	r10, r30
     bbe:	b6 01       	movw	r22, r12
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     bc6:	21 10       	cpse	r2, r1
     bc8:	2a 94       	dec	r2
     bca:	21 e0       	ldi	r18, 0x01	; 1
     bcc:	82 1a       	sub	r8, r18
     bce:	91 08       	sbc	r9, r1
     bd0:	81 14       	cp	r8, r1
     bd2:	91 04       	cpc	r9, r1
     bd4:	71 f7       	brne	.-36     	; 0xbb2 <vfprintf+0x1c6>
     bd6:	e8 c0       	rjmp	.+464    	; 0xda8 <vfprintf+0x3bc>
     bd8:	84 36       	cpi	r24, 0x64	; 100
     bda:	11 f0       	breq	.+4      	; 0xbe0 <vfprintf+0x1f4>
     bdc:	89 36       	cpi	r24, 0x69	; 105
     bde:	41 f5       	brne	.+80     	; 0xc30 <vfprintf+0x244>
     be0:	f8 01       	movw	r30, r16
     be2:	37 fe       	sbrs	r3, 7
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <vfprintf+0x208>
     be6:	60 81       	ld	r22, Z
     be8:	71 81       	ldd	r23, Z+1	; 0x01
     bea:	82 81       	ldd	r24, Z+2	; 0x02
     bec:	93 81       	ldd	r25, Z+3	; 0x03
     bee:	0c 5f       	subi	r16, 0xFC	; 252
     bf0:	1f 4f       	sbci	r17, 0xFF	; 255
     bf2:	08 c0       	rjmp	.+16     	; 0xc04 <vfprintf+0x218>
     bf4:	60 81       	ld	r22, Z
     bf6:	71 81       	ldd	r23, Z+1	; 0x01
     bf8:	07 2e       	mov	r0, r23
     bfa:	00 0c       	add	r0, r0
     bfc:	88 0b       	sbc	r24, r24
     bfe:	99 0b       	sbc	r25, r25
     c00:	0e 5f       	subi	r16, 0xFE	; 254
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	f3 2d       	mov	r31, r3
     c06:	ff 76       	andi	r31, 0x6F	; 111
     c08:	3f 2e       	mov	r3, r31
     c0a:	97 ff       	sbrs	r25, 7
     c0c:	09 c0       	rjmp	.+18     	; 0xc20 <vfprintf+0x234>
     c0e:	90 95       	com	r25
     c10:	80 95       	com	r24
     c12:	70 95       	com	r23
     c14:	61 95       	neg	r22
     c16:	7f 4f       	sbci	r23, 0xFF	; 255
     c18:	8f 4f       	sbci	r24, 0xFF	; 255
     c1a:	9f 4f       	sbci	r25, 0xFF	; 255
     c1c:	f0 68       	ori	r31, 0x80	; 128
     c1e:	3f 2e       	mov	r3, r31
     c20:	2a e0       	ldi	r18, 0x0A	; 10
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	a3 01       	movw	r20, r6
     c26:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
     c2a:	88 2e       	mov	r8, r24
     c2c:	86 18       	sub	r8, r6
     c2e:	45 c0       	rjmp	.+138    	; 0xcba <vfprintf+0x2ce>
     c30:	85 37       	cpi	r24, 0x75	; 117
     c32:	31 f4       	brne	.+12     	; 0xc40 <vfprintf+0x254>
     c34:	23 2d       	mov	r18, r3
     c36:	2f 7e       	andi	r18, 0xEF	; 239
     c38:	b2 2e       	mov	r11, r18
     c3a:	2a e0       	ldi	r18, 0x0A	; 10
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	25 c0       	rjmp	.+74     	; 0xc8a <vfprintf+0x29e>
     c40:	93 2d       	mov	r25, r3
     c42:	99 7f       	andi	r25, 0xF9	; 249
     c44:	b9 2e       	mov	r11, r25
     c46:	8f 36       	cpi	r24, 0x6F	; 111
     c48:	c1 f0       	breq	.+48     	; 0xc7a <vfprintf+0x28e>
     c4a:	18 f4       	brcc	.+6      	; 0xc52 <vfprintf+0x266>
     c4c:	88 35       	cpi	r24, 0x58	; 88
     c4e:	79 f0       	breq	.+30     	; 0xc6e <vfprintf+0x282>
     c50:	b5 c0       	rjmp	.+362    	; 0xdbc <vfprintf+0x3d0>
     c52:	80 37       	cpi	r24, 0x70	; 112
     c54:	19 f0       	breq	.+6      	; 0xc5c <vfprintf+0x270>
     c56:	88 37       	cpi	r24, 0x78	; 120
     c58:	21 f0       	breq	.+8      	; 0xc62 <vfprintf+0x276>
     c5a:	b0 c0       	rjmp	.+352    	; 0xdbc <vfprintf+0x3d0>
     c5c:	e9 2f       	mov	r30, r25
     c5e:	e0 61       	ori	r30, 0x10	; 16
     c60:	be 2e       	mov	r11, r30
     c62:	b4 fe       	sbrs	r11, 4
     c64:	0d c0       	rjmp	.+26     	; 0xc80 <vfprintf+0x294>
     c66:	fb 2d       	mov	r31, r11
     c68:	f4 60       	ori	r31, 0x04	; 4
     c6a:	bf 2e       	mov	r11, r31
     c6c:	09 c0       	rjmp	.+18     	; 0xc80 <vfprintf+0x294>
     c6e:	34 fe       	sbrs	r3, 4
     c70:	0a c0       	rjmp	.+20     	; 0xc86 <vfprintf+0x29a>
     c72:	29 2f       	mov	r18, r25
     c74:	26 60       	ori	r18, 0x06	; 6
     c76:	b2 2e       	mov	r11, r18
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x29a>
     c7a:	28 e0       	ldi	r18, 0x08	; 8
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	05 c0       	rjmp	.+10     	; 0xc8a <vfprintf+0x29e>
     c80:	20 e1       	ldi	r18, 0x10	; 16
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	02 c0       	rjmp	.+4      	; 0xc8a <vfprintf+0x29e>
     c86:	20 e1       	ldi	r18, 0x10	; 16
     c88:	32 e0       	ldi	r19, 0x02	; 2
     c8a:	f8 01       	movw	r30, r16
     c8c:	b7 fe       	sbrs	r11, 7
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <vfprintf+0x2b2>
     c90:	60 81       	ld	r22, Z
     c92:	71 81       	ldd	r23, Z+1	; 0x01
     c94:	82 81       	ldd	r24, Z+2	; 0x02
     c96:	93 81       	ldd	r25, Z+3	; 0x03
     c98:	0c 5f       	subi	r16, 0xFC	; 252
     c9a:	1f 4f       	sbci	r17, 0xFF	; 255
     c9c:	06 c0       	rjmp	.+12     	; 0xcaa <vfprintf+0x2be>
     c9e:	60 81       	ld	r22, Z
     ca0:	71 81       	ldd	r23, Z+1	; 0x01
     ca2:	80 e0       	ldi	r24, 0x00	; 0
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 5f       	subi	r16, 0xFE	; 254
     ca8:	1f 4f       	sbci	r17, 0xFF	; 255
     caa:	a3 01       	movw	r20, r6
     cac:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__ultoa_invert>
     cb0:	88 2e       	mov	r8, r24
     cb2:	86 18       	sub	r8, r6
     cb4:	fb 2d       	mov	r31, r11
     cb6:	ff 77       	andi	r31, 0x7F	; 127
     cb8:	3f 2e       	mov	r3, r31
     cba:	36 fe       	sbrs	r3, 6
     cbc:	0d c0       	rjmp	.+26     	; 0xcd8 <vfprintf+0x2ec>
     cbe:	23 2d       	mov	r18, r3
     cc0:	2e 7f       	andi	r18, 0xFE	; 254
     cc2:	a2 2e       	mov	r10, r18
     cc4:	89 14       	cp	r8, r9
     cc6:	58 f4       	brcc	.+22     	; 0xcde <vfprintf+0x2f2>
     cc8:	34 fe       	sbrs	r3, 4
     cca:	0b c0       	rjmp	.+22     	; 0xce2 <vfprintf+0x2f6>
     ccc:	32 fc       	sbrc	r3, 2
     cce:	09 c0       	rjmp	.+18     	; 0xce2 <vfprintf+0x2f6>
     cd0:	83 2d       	mov	r24, r3
     cd2:	8e 7e       	andi	r24, 0xEE	; 238
     cd4:	a8 2e       	mov	r10, r24
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <vfprintf+0x2f6>
     cd8:	b8 2c       	mov	r11, r8
     cda:	a3 2c       	mov	r10, r3
     cdc:	03 c0       	rjmp	.+6      	; 0xce4 <vfprintf+0x2f8>
     cde:	b8 2c       	mov	r11, r8
     ce0:	01 c0       	rjmp	.+2      	; 0xce4 <vfprintf+0x2f8>
     ce2:	b9 2c       	mov	r11, r9
     ce4:	a4 fe       	sbrs	r10, 4
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <vfprintf+0x31a>
     ce8:	fe 01       	movw	r30, r28
     cea:	e8 0d       	add	r30, r8
     cec:	f1 1d       	adc	r31, r1
     cee:	80 81       	ld	r24, Z
     cf0:	80 33       	cpi	r24, 0x30	; 48
     cf2:	21 f4       	brne	.+8      	; 0xcfc <vfprintf+0x310>
     cf4:	9a 2d       	mov	r25, r10
     cf6:	99 7e       	andi	r25, 0xE9	; 233
     cf8:	a9 2e       	mov	r10, r25
     cfa:	09 c0       	rjmp	.+18     	; 0xd0e <vfprintf+0x322>
     cfc:	a2 fe       	sbrs	r10, 2
     cfe:	06 c0       	rjmp	.+12     	; 0xd0c <vfprintf+0x320>
     d00:	b3 94       	inc	r11
     d02:	b3 94       	inc	r11
     d04:	04 c0       	rjmp	.+8      	; 0xd0e <vfprintf+0x322>
     d06:	8a 2d       	mov	r24, r10
     d08:	86 78       	andi	r24, 0x86	; 134
     d0a:	09 f0       	breq	.+2      	; 0xd0e <vfprintf+0x322>
     d0c:	b3 94       	inc	r11
     d0e:	a3 fc       	sbrc	r10, 3
     d10:	11 c0       	rjmp	.+34     	; 0xd34 <vfprintf+0x348>
     d12:	a0 fe       	sbrs	r10, 0
     d14:	06 c0       	rjmp	.+12     	; 0xd22 <vfprintf+0x336>
     d16:	b2 14       	cp	r11, r2
     d18:	88 f4       	brcc	.+34     	; 0xd3c <vfprintf+0x350>
     d1a:	28 0c       	add	r2, r8
     d1c:	92 2c       	mov	r9, r2
     d1e:	9b 18       	sub	r9, r11
     d20:	0e c0       	rjmp	.+28     	; 0xd3e <vfprintf+0x352>
     d22:	b2 14       	cp	r11, r2
     d24:	60 f4       	brcc	.+24     	; 0xd3e <vfprintf+0x352>
     d26:	b6 01       	movw	r22, r12
     d28:	80 e2       	ldi	r24, 0x20	; 32
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     d30:	b3 94       	inc	r11
     d32:	f7 cf       	rjmp	.-18     	; 0xd22 <vfprintf+0x336>
     d34:	b2 14       	cp	r11, r2
     d36:	18 f4       	brcc	.+6      	; 0xd3e <vfprintf+0x352>
     d38:	2b 18       	sub	r2, r11
     d3a:	02 c0       	rjmp	.+4      	; 0xd40 <vfprintf+0x354>
     d3c:	98 2c       	mov	r9, r8
     d3e:	21 2c       	mov	r2, r1
     d40:	a4 fe       	sbrs	r10, 4
     d42:	10 c0       	rjmp	.+32     	; 0xd64 <vfprintf+0x378>
     d44:	b6 01       	movw	r22, r12
     d46:	80 e3       	ldi	r24, 0x30	; 48
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     d4e:	a2 fe       	sbrs	r10, 2
     d50:	17 c0       	rjmp	.+46     	; 0xd80 <vfprintf+0x394>
     d52:	a1 fc       	sbrc	r10, 1
     d54:	03 c0       	rjmp	.+6      	; 0xd5c <vfprintf+0x370>
     d56:	88 e7       	ldi	r24, 0x78	; 120
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <vfprintf+0x374>
     d5c:	88 e5       	ldi	r24, 0x58	; 88
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	b6 01       	movw	r22, r12
     d62:	0c c0       	rjmp	.+24     	; 0xd7c <vfprintf+0x390>
     d64:	8a 2d       	mov	r24, r10
     d66:	86 78       	andi	r24, 0x86	; 134
     d68:	59 f0       	breq	.+22     	; 0xd80 <vfprintf+0x394>
     d6a:	a1 fe       	sbrs	r10, 1
     d6c:	02 c0       	rjmp	.+4      	; 0xd72 <vfprintf+0x386>
     d6e:	8b e2       	ldi	r24, 0x2B	; 43
     d70:	01 c0       	rjmp	.+2      	; 0xd74 <vfprintf+0x388>
     d72:	80 e2       	ldi	r24, 0x20	; 32
     d74:	a7 fc       	sbrc	r10, 7
     d76:	8d e2       	ldi	r24, 0x2D	; 45
     d78:	b6 01       	movw	r22, r12
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     d80:	89 14       	cp	r8, r9
     d82:	38 f4       	brcc	.+14     	; 0xd92 <vfprintf+0x3a6>
     d84:	b6 01       	movw	r22, r12
     d86:	80 e3       	ldi	r24, 0x30	; 48
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     d8e:	9a 94       	dec	r9
     d90:	f7 cf       	rjmp	.-18     	; 0xd80 <vfprintf+0x394>
     d92:	8a 94       	dec	r8
     d94:	f3 01       	movw	r30, r6
     d96:	e8 0d       	add	r30, r8
     d98:	f1 1d       	adc	r31, r1
     d9a:	80 81       	ld	r24, Z
     d9c:	b6 01       	movw	r22, r12
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     da4:	81 10       	cpse	r8, r1
     da6:	f5 cf       	rjmp	.-22     	; 0xd92 <vfprintf+0x3a6>
     da8:	22 20       	and	r2, r2
     daa:	09 f4       	brne	.+2      	; 0xdae <vfprintf+0x3c2>
     dac:	42 ce       	rjmp	.-892    	; 0xa32 <vfprintf+0x46>
     dae:	b6 01       	movw	r22, r12
     db0:	80 e2       	ldi	r24, 0x20	; 32
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	0e 94 34 04 	call	0x868	; 0x868 <fputc>
     db8:	2a 94       	dec	r2
     dba:	f6 cf       	rjmp	.-20     	; 0xda8 <vfprintf+0x3bc>
     dbc:	f6 01       	movw	r30, r12
     dbe:	86 81       	ldd	r24, Z+6	; 0x06
     dc0:	97 81       	ldd	r25, Z+7	; 0x07
     dc2:	02 c0       	rjmp	.+4      	; 0xdc8 <vfprintf+0x3dc>
     dc4:	8f ef       	ldi	r24, 0xFF	; 255
     dc6:	9f ef       	ldi	r25, 0xFF	; 255
     dc8:	2b 96       	adiw	r28, 0x0b	; 11
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	de bf       	out	0x3e, r29	; 62
     dce:	df 91       	pop	r29
     dd0:	cf 91       	pop	r28
     dd2:	1f 91       	pop	r17
     dd4:	0f 91       	pop	r16
     dd6:	ff 90       	pop	r15
     dd8:	ef 90       	pop	r14
     dda:	df 90       	pop	r13
     ddc:	cf 90       	pop	r12
     dde:	bf 90       	pop	r11
     de0:	af 90       	pop	r10
     de2:	9f 90       	pop	r9
     de4:	8f 90       	pop	r8
     de6:	7f 90       	pop	r7
     de8:	6f 90       	pop	r6
     dea:	5f 90       	pop	r5
     dec:	4f 90       	pop	r4
     dee:	3f 90       	pop	r3
     df0:	2f 90       	pop	r2
     df2:	08 95       	ret

00000df4 <strnlen_P>:
     df4:	fc 01       	movw	r30, r24
     df6:	05 90       	lpm	r0, Z+
     df8:	61 50       	subi	r22, 0x01	; 1
     dfa:	70 40       	sbci	r23, 0x00	; 0
     dfc:	01 10       	cpse	r0, r1
     dfe:	d8 f7       	brcc	.-10     	; 0xdf6 <strnlen_P+0x2>
     e00:	80 95       	com	r24
     e02:	90 95       	com	r25
     e04:	8e 0f       	add	r24, r30
     e06:	9f 1f       	adc	r25, r31
     e08:	08 95       	ret

00000e0a <strnlen>:
     e0a:	fc 01       	movw	r30, r24
     e0c:	61 50       	subi	r22, 0x01	; 1
     e0e:	70 40       	sbci	r23, 0x00	; 0
     e10:	01 90       	ld	r0, Z+
     e12:	01 10       	cpse	r0, r1
     e14:	d8 f7       	brcc	.-10     	; 0xe0c <strnlen+0x2>
     e16:	80 95       	com	r24
     e18:	90 95       	com	r25
     e1a:	8e 0f       	add	r24, r30
     e1c:	9f 1f       	adc	r25, r31
     e1e:	08 95       	ret

00000e20 <fgetc>:
     e20:	cf 93       	push	r28
     e22:	df 93       	push	r29
     e24:	ec 01       	movw	r28, r24
     e26:	2b 81       	ldd	r18, Y+3	; 0x03
     e28:	20 ff       	sbrs	r18, 0
     e2a:	33 c0       	rjmp	.+102    	; 0xe92 <fgetc+0x72>
     e2c:	26 ff       	sbrs	r18, 6
     e2e:	0a c0       	rjmp	.+20     	; 0xe44 <fgetc+0x24>
     e30:	2f 7b       	andi	r18, 0xBF	; 191
     e32:	2b 83       	std	Y+3, r18	; 0x03
     e34:	8e 81       	ldd	r24, Y+6	; 0x06
     e36:	9f 81       	ldd	r25, Y+7	; 0x07
     e38:	01 96       	adiw	r24, 0x01	; 1
     e3a:	8e 83       	std	Y+6, r24	; 0x06
     e3c:	9f 83       	std	Y+7, r25	; 0x07
     e3e:	8a 81       	ldd	r24, Y+2	; 0x02
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	29 c0       	rjmp	.+82     	; 0xe96 <fgetc+0x76>
     e44:	22 ff       	sbrs	r18, 2
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <fgetc+0x46>
     e48:	e8 81       	ld	r30, Y
     e4a:	f9 81       	ldd	r31, Y+1	; 0x01
     e4c:	80 81       	ld	r24, Z
     e4e:	08 2e       	mov	r0, r24
     e50:	00 0c       	add	r0, r0
     e52:	99 0b       	sbc	r25, r25
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	19 f4       	brne	.+6      	; 0xe5e <fgetc+0x3e>
     e58:	20 62       	ori	r18, 0x20	; 32
     e5a:	2b 83       	std	Y+3, r18	; 0x03
     e5c:	1a c0       	rjmp	.+52     	; 0xe92 <fgetc+0x72>
     e5e:	31 96       	adiw	r30, 0x01	; 1
     e60:	e8 83       	st	Y, r30
     e62:	f9 83       	std	Y+1, r31	; 0x01
     e64:	0e c0       	rjmp	.+28     	; 0xe82 <fgetc+0x62>
     e66:	ea 85       	ldd	r30, Y+10	; 0x0a
     e68:	fb 85       	ldd	r31, Y+11	; 0x0b
     e6a:	09 95       	icall
     e6c:	97 ff       	sbrs	r25, 7
     e6e:	09 c0       	rjmp	.+18     	; 0xe82 <fgetc+0x62>
     e70:	2b 81       	ldd	r18, Y+3	; 0x03
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	11 f0       	breq	.+4      	; 0xe7a <fgetc+0x5a>
     e76:	80 e2       	ldi	r24, 0x20	; 32
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <fgetc+0x5c>
     e7a:	80 e1       	ldi	r24, 0x10	; 16
     e7c:	82 2b       	or	r24, r18
     e7e:	8b 83       	std	Y+3, r24	; 0x03
     e80:	08 c0       	rjmp	.+16     	; 0xe92 <fgetc+0x72>
     e82:	2e 81       	ldd	r18, Y+6	; 0x06
     e84:	3f 81       	ldd	r19, Y+7	; 0x07
     e86:	2f 5f       	subi	r18, 0xFF	; 255
     e88:	3f 4f       	sbci	r19, 0xFF	; 255
     e8a:	2e 83       	std	Y+6, r18	; 0x06
     e8c:	3f 83       	std	Y+7, r19	; 0x07
     e8e:	99 27       	eor	r25, r25
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <fgetc+0x76>
     e92:	8f ef       	ldi	r24, 0xFF	; 255
     e94:	9f ef       	ldi	r25, 0xFF	; 255
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret

00000e9c <__ultoa_invert>:
     e9c:	fa 01       	movw	r30, r20
     e9e:	aa 27       	eor	r26, r26
     ea0:	28 30       	cpi	r18, 0x08	; 8
     ea2:	51 f1       	breq	.+84     	; 0xef8 <__ultoa_invert+0x5c>
     ea4:	20 31       	cpi	r18, 0x10	; 16
     ea6:	81 f1       	breq	.+96     	; 0xf08 <__ultoa_invert+0x6c>
     ea8:	e8 94       	clt
     eaa:	6f 93       	push	r22
     eac:	6e 7f       	andi	r22, 0xFE	; 254
     eae:	6e 5f       	subi	r22, 0xFE	; 254
     eb0:	7f 4f       	sbci	r23, 0xFF	; 255
     eb2:	8f 4f       	sbci	r24, 0xFF	; 255
     eb4:	9f 4f       	sbci	r25, 0xFF	; 255
     eb6:	af 4f       	sbci	r26, 0xFF	; 255
     eb8:	b1 e0       	ldi	r27, 0x01	; 1
     eba:	3e d0       	rcall	.+124    	; 0xf38 <__ultoa_invert+0x9c>
     ebc:	b4 e0       	ldi	r27, 0x04	; 4
     ebe:	3c d0       	rcall	.+120    	; 0xf38 <__ultoa_invert+0x9c>
     ec0:	67 0f       	add	r22, r23
     ec2:	78 1f       	adc	r23, r24
     ec4:	89 1f       	adc	r24, r25
     ec6:	9a 1f       	adc	r25, r26
     ec8:	a1 1d       	adc	r26, r1
     eca:	68 0f       	add	r22, r24
     ecc:	79 1f       	adc	r23, r25
     ece:	8a 1f       	adc	r24, r26
     ed0:	91 1d       	adc	r25, r1
     ed2:	a1 1d       	adc	r26, r1
     ed4:	6a 0f       	add	r22, r26
     ed6:	71 1d       	adc	r23, r1
     ed8:	81 1d       	adc	r24, r1
     eda:	91 1d       	adc	r25, r1
     edc:	a1 1d       	adc	r26, r1
     ede:	20 d0       	rcall	.+64     	; 0xf20 <__ultoa_invert+0x84>
     ee0:	09 f4       	brne	.+2      	; 0xee4 <__ultoa_invert+0x48>
     ee2:	68 94       	set
     ee4:	3f 91       	pop	r19
     ee6:	2a e0       	ldi	r18, 0x0A	; 10
     ee8:	26 9f       	mul	r18, r22
     eea:	11 24       	eor	r1, r1
     eec:	30 19       	sub	r19, r0
     eee:	30 5d       	subi	r19, 0xD0	; 208
     ef0:	31 93       	st	Z+, r19
     ef2:	de f6       	brtc	.-74     	; 0xeaa <__ultoa_invert+0xe>
     ef4:	cf 01       	movw	r24, r30
     ef6:	08 95       	ret
     ef8:	46 2f       	mov	r20, r22
     efa:	47 70       	andi	r20, 0x07	; 7
     efc:	40 5d       	subi	r20, 0xD0	; 208
     efe:	41 93       	st	Z+, r20
     f00:	b3 e0       	ldi	r27, 0x03	; 3
     f02:	0f d0       	rcall	.+30     	; 0xf22 <__ultoa_invert+0x86>
     f04:	c9 f7       	brne	.-14     	; 0xef8 <__ultoa_invert+0x5c>
     f06:	f6 cf       	rjmp	.-20     	; 0xef4 <__ultoa_invert+0x58>
     f08:	46 2f       	mov	r20, r22
     f0a:	4f 70       	andi	r20, 0x0F	; 15
     f0c:	40 5d       	subi	r20, 0xD0	; 208
     f0e:	4a 33       	cpi	r20, 0x3A	; 58
     f10:	18 f0       	brcs	.+6      	; 0xf18 <__ultoa_invert+0x7c>
     f12:	49 5d       	subi	r20, 0xD9	; 217
     f14:	31 fd       	sbrc	r19, 1
     f16:	40 52       	subi	r20, 0x20	; 32
     f18:	41 93       	st	Z+, r20
     f1a:	02 d0       	rcall	.+4      	; 0xf20 <__ultoa_invert+0x84>
     f1c:	a9 f7       	brne	.-22     	; 0xf08 <__ultoa_invert+0x6c>
     f1e:	ea cf       	rjmp	.-44     	; 0xef4 <__ultoa_invert+0x58>
     f20:	b4 e0       	ldi	r27, 0x04	; 4
     f22:	a6 95       	lsr	r26
     f24:	97 95       	ror	r25
     f26:	87 95       	ror	r24
     f28:	77 95       	ror	r23
     f2a:	67 95       	ror	r22
     f2c:	ba 95       	dec	r27
     f2e:	c9 f7       	brne	.-14     	; 0xf22 <__ultoa_invert+0x86>
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	61 05       	cpc	r22, r1
     f34:	71 05       	cpc	r23, r1
     f36:	08 95       	ret
     f38:	9b 01       	movw	r18, r22
     f3a:	ac 01       	movw	r20, r24
     f3c:	0a 2e       	mov	r0, r26
     f3e:	06 94       	lsr	r0
     f40:	57 95       	ror	r21
     f42:	47 95       	ror	r20
     f44:	37 95       	ror	r19
     f46:	27 95       	ror	r18
     f48:	ba 95       	dec	r27
     f4a:	c9 f7       	brne	.-14     	; 0xf3e <__ultoa_invert+0xa2>
     f4c:	62 0f       	add	r22, r18
     f4e:	73 1f       	adc	r23, r19
     f50:	84 1f       	adc	r24, r20
     f52:	95 1f       	adc	r25, r21
     f54:	a0 1d       	adc	r26, r0
     f56:	08 95       	ret

00000f58 <eeprom_write_block>:
     f58:	54 2f       	mov	r21, r20
     f5a:	2f ef       	ldi	r18, 0xFF	; 255
     f5c:	35 e1       	ldi	r19, 0x15	; 21
     f5e:	24 1b       	sub	r18, r20
     f60:	31 09       	sbc	r19, r1
     f62:	26 17       	cp	r18, r22
     f64:	37 07       	cpc	r19, r23
     f66:	10 f4       	brcc	.+4      	; 0xf6c <eeprom_write_block+0x14>
     f68:	0e 94 39 08 	call	0x1072	; 0x1072 <abort>
     f6c:	20 91 02 10 	lds	r18, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     f70:	21 fd       	sbrc	r18, 1
     f72:	fc cf       	rjmp	.-8      	; 0xf6c <eeprom_write_block+0x14>
     f74:	33 e1       	ldi	r19, 0x13	; 19
     f76:	2d e9       	ldi	r18, 0x9D	; 157
     f78:	24 bf       	out	0x34, r18	; 52
     f7a:	30 93 00 10 	sts	0x1000, r19	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     f7e:	28 2f       	mov	r18, r24
     f80:	db 01       	movw	r26, r22
     f82:	bc 5e       	subi	r27, 0xEC	; 236
     f84:	fc 01       	movw	r30, r24
     f86:	8e 2f       	mov	r24, r30
     f88:	82 1b       	sub	r24, r18
     f8a:	85 17       	cp	r24, r21
     f8c:	38 f4       	brcc	.+14     	; 0xf9c <eeprom_write_block+0x44>
     f8e:	80 91 02 10 	lds	r24, 0x1002	; 0x801002 <__TEXT_REGION_LENGTH__+0x7e1002>
     f92:	81 fd       	sbrc	r24, 1
     f94:	fc cf       	rjmp	.-8      	; 0xf8e <eeprom_write_block+0x36>
     f96:	81 91       	ld	r24, Z+
     f98:	8d 93       	st	X+, r24
     f9a:	f5 cf       	rjmp	.-22     	; 0xf86 <eeprom_write_block+0x2e>
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	8d e9       	ldi	r24, 0x9D	; 157
     fa0:	84 bf       	out	0x34, r24	; 52
     fa2:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <__TEXT_REGION_LENGTH__+0x7e1000>
     fa6:	08 95       	ret

00000fa8 <eeprom_read_block>:
     fa8:	60 50       	subi	r22, 0x00	; 0
     faa:	7c 4e       	sbci	r23, 0xEC	; 236
     fac:	0c 94 3e 08 	jmp	0x107c	; 0x107c <memcpy>

00000fb0 <eeprom_read_byte>:
     fb0:	03 d0       	rcall	.+6      	; 0xfb8 <eeprom_mapen>
     fb2:	80 81       	ld	r24, Z
     fb4:	99 27       	eor	r25, r25
     fb6:	08 95       	ret

00000fb8 <eeprom_mapen>:
     fb8:	fc 01       	movw	r30, r24
     fba:	e0 50       	subi	r30, 0x00	; 0
     fbc:	fc 4e       	sbci	r31, 0xEC	; 236
     fbe:	08 95       	ret

00000fc0 <eeprom_write_byte>:
     fc0:	26 2f       	mov	r18, r22

00000fc2 <eeprom_write_r18>:
     fc2:	af 93       	push	r26
     fc4:	bf 93       	push	r27
     fc6:	e0 e0       	ldi	r30, 0x00	; 0
     fc8:	f0 e1       	ldi	r31, 0x10	; 16
     fca:	32 81       	ldd	r19, Z+2	; 0x02
     fcc:	31 fd       	sbrc	r19, 1
     fce:	fd cf       	rjmp	.-6      	; 0xfca <eeprom_write_r18+0x8>
     fd0:	3d e9       	ldi	r19, 0x9D	; 157
     fd2:	34 bf       	out	0x34, r19	; 52
     fd4:	33 e1       	ldi	r19, 0x13	; 19
     fd6:	30 83       	st	Z, r19
     fd8:	dc 01       	movw	r26, r24
     fda:	a0 50       	subi	r26, 0x00	; 0
     fdc:	bc 4e       	sbci	r27, 0xEC	; 236
     fde:	2c 93       	st	X, r18
     fe0:	3d e9       	ldi	r19, 0x9D	; 157
     fe2:	34 bf       	out	0x34, r19	; 52
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	20 83       	st	Z, r18
     fe8:	01 96       	adiw	r24, 0x01	; 1
     fea:	bf 91       	pop	r27
     fec:	af 91       	pop	r26
     fee:	08 95       	ret

00000ff0 <__divmodsi4>:
     ff0:	05 2e       	mov	r0, r21
     ff2:	97 fb       	bst	r25, 7
     ff4:	1e f4       	brtc	.+6      	; 0xffc <__divmodsi4+0xc>
     ff6:	00 94       	com	r0
     ff8:	0e 94 0f 08 	call	0x101e	; 0x101e <__negsi2>
     ffc:	57 fd       	sbrc	r21, 7
     ffe:	07 d0       	rcall	.+14     	; 0x100e <__divmodsi4_neg2>
    1000:	0e 94 65 03 	call	0x6ca	; 0x6ca <__udivmodsi4>
    1004:	07 fc       	sbrc	r0, 7
    1006:	03 d0       	rcall	.+6      	; 0x100e <__divmodsi4_neg2>
    1008:	4e f4       	brtc	.+18     	; 0x101c <__divmodsi4_exit>
    100a:	0c 94 0f 08 	jmp	0x101e	; 0x101e <__negsi2>

0000100e <__divmodsi4_neg2>:
    100e:	50 95       	com	r21
    1010:	40 95       	com	r20
    1012:	30 95       	com	r19
    1014:	21 95       	neg	r18
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	4f 4f       	sbci	r20, 0xFF	; 255
    101a:	5f 4f       	sbci	r21, 0xFF	; 255

0000101c <__divmodsi4_exit>:
    101c:	08 95       	ret

0000101e <__negsi2>:
    101e:	90 95       	com	r25
    1020:	80 95       	com	r24
    1022:	70 95       	com	r23
    1024:	61 95       	neg	r22
    1026:	7f 4f       	sbci	r23, 0xFF	; 255
    1028:	8f 4f       	sbci	r24, 0xFF	; 255
    102a:	9f 4f       	sbci	r25, 0xFF	; 255
    102c:	08 95       	ret

0000102e <__muluhisi3>:
    102e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__umulhisi3>
    1032:	a5 9f       	mul	r26, r21
    1034:	90 0d       	add	r25, r0
    1036:	b4 9f       	mul	r27, r20
    1038:	90 0d       	add	r25, r0
    103a:	a4 9f       	mul	r26, r20
    103c:	80 0d       	add	r24, r0
    103e:	91 1d       	adc	r25, r1
    1040:	11 24       	eor	r1, r1
    1042:	08 95       	ret

00001044 <__mulshisi3>:
    1044:	b7 ff       	sbrs	r27, 7
    1046:	0c 94 17 08 	jmp	0x102e	; 0x102e <__muluhisi3>

0000104a <__mulohisi3>:
    104a:	0e 94 17 08 	call	0x102e	; 0x102e <__muluhisi3>
    104e:	82 1b       	sub	r24, r18
    1050:	93 0b       	sbc	r25, r19
    1052:	08 95       	ret

00001054 <__umulhisi3>:
    1054:	a2 9f       	mul	r26, r18
    1056:	b0 01       	movw	r22, r0
    1058:	b3 9f       	mul	r27, r19
    105a:	c0 01       	movw	r24, r0
    105c:	a3 9f       	mul	r26, r19
    105e:	70 0d       	add	r23, r0
    1060:	81 1d       	adc	r24, r1
    1062:	11 24       	eor	r1, r1
    1064:	91 1d       	adc	r25, r1
    1066:	b2 9f       	mul	r27, r18
    1068:	70 0d       	add	r23, r0
    106a:	81 1d       	adc	r24, r1
    106c:	11 24       	eor	r1, r1
    106e:	91 1d       	adc	r25, r1
    1070:	08 95       	ret

00001072 <abort>:
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	f8 94       	cli
    1078:	0c 94 47 08 	jmp	0x108e	; 0x108e <_exit>

0000107c <memcpy>:
    107c:	fb 01       	movw	r30, r22
    107e:	dc 01       	movw	r26, r24
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <memcpy+0xa>
    1082:	01 90       	ld	r0, Z+
    1084:	0d 92       	st	X+, r0
    1086:	41 50       	subi	r20, 0x01	; 1
    1088:	50 40       	sbci	r21, 0x00	; 0
    108a:	d8 f7       	brcc	.-10     	; 0x1082 <memcpy+0x6>
    108c:	08 95       	ret

0000108e <_exit>:
    108e:	f8 94       	cli

00001090 <__stop_program>:
    1090:	ff cf       	rjmp	.-2      	; 0x1090 <__stop_program>
