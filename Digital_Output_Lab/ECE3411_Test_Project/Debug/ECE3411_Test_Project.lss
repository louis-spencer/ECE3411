
ECE3411_Test_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001d0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031df  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e48  00000000  00000000  0000349b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000451  00000000  00000000  000062e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00006734  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000016ee  00000000  00000000  00006768  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000163  00000000  00000000  00007e56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00007fb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <main>
 104:	0c 94 e6 00 	jmp	0x1cc	; 0x1cc <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <blink_led_cycle>:
#include <avr/io.h>
#include <util/delay.h>

void blink_led_cycle(char n) {
	// 2Hz for 2 seconds
	for (int i = 0; i < 4; i++) {
 10c:	40 e0       	ldi	r20, 0x00	; 0
 10e:	50 e0       	ldi	r21, 0x00	; 0
 110:	23 c0       	rjmp	.+70     	; 0x158 <blink_led_cycle+0x4c>
		VPORTD.OUT |= (1 << n);
 112:	9d b1       	in	r25, 0x0d	; 13
 114:	21 e0       	ldi	r18, 0x01	; 1
 116:	30 e0       	ldi	r19, 0x00	; 0
 118:	08 2e       	mov	r0, r24
 11a:	02 c0       	rjmp	.+4      	; 0x120 <blink_led_cycle+0x14>
 11c:	22 0f       	add	r18, r18
 11e:	33 1f       	adc	r19, r19
 120:	0a 94       	dec	r0
 122:	e2 f7       	brpl	.-8      	; 0x11c <blink_led_cycle+0x10>
 124:	92 2b       	or	r25, r18
 126:	9d b9       	out	0x0d, r25	; 13
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 128:	6f e3       	ldi	r22, 0x3F	; 63
 12a:	7d e0       	ldi	r23, 0x0D	; 13
 12c:	93 e0       	ldi	r25, 0x03	; 3
 12e:	61 50       	subi	r22, 0x01	; 1
 130:	70 40       	sbci	r23, 0x00	; 0
 132:	90 40       	sbci	r25, 0x00	; 0
 134:	e1 f7       	brne	.-8      	; 0x12e <blink_led_cycle+0x22>
 136:	00 c0       	rjmp	.+0      	; 0x138 <blink_led_cycle+0x2c>
 138:	00 00       	nop
		_delay_ms(250);
		VPORTD.OUT &= ~(1 << n);
 13a:	9d b1       	in	r25, 0x0d	; 13
 13c:	20 95       	com	r18
 13e:	29 23       	and	r18, r25
 140:	2d b9       	out	0x0d, r18	; 13
 142:	2f e3       	ldi	r18, 0x3F	; 63
 144:	3d e0       	ldi	r19, 0x0D	; 13
 146:	63 e0       	ldi	r22, 0x03	; 3
 148:	21 50       	subi	r18, 0x01	; 1
 14a:	30 40       	sbci	r19, 0x00	; 0
 14c:	60 40       	sbci	r22, 0x00	; 0
 14e:	e1 f7       	brne	.-8      	; 0x148 <blink_led_cycle+0x3c>
 150:	00 c0       	rjmp	.+0      	; 0x152 <blink_led_cycle+0x46>
 152:	00 00       	nop
#include <avr/io.h>
#include <util/delay.h>

void blink_led_cycle(char n) {
	// 2Hz for 2 seconds
	for (int i = 0; i < 4; i++) {
 154:	4f 5f       	subi	r20, 0xFF	; 255
 156:	5f 4f       	sbci	r21, 0xFF	; 255
 158:	44 30       	cpi	r20, 0x04	; 4
 15a:	51 05       	cpc	r21, r1
 15c:	d4 f2       	brlt	.-76     	; 0x112 <blink_led_cycle+0x6>
 15e:	40 e0       	ldi	r20, 0x00	; 0
 160:	50 e0       	ldi	r21, 0x00	; 0
 162:	23 c0       	rjmp	.+70     	; 0x1aa <blink_led_cycle+0x9e>
		VPORTD.OUT &= ~(1 << n);
		_delay_ms(250);
	}
	// 
	for (int i = 0; i < 8; i++) {
		VPORTD.OUT |= (1 << n);
 164:	9d b1       	in	r25, 0x0d	; 13
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	08 2e       	mov	r0, r24
 16c:	02 c0       	rjmp	.+4      	; 0x172 <blink_led_cycle+0x66>
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	0a 94       	dec	r0
 174:	e2 f7       	brpl	.-8      	; 0x16e <blink_led_cycle+0x62>
 176:	92 2b       	or	r25, r18
 178:	9d b9       	out	0x0d, r25	; 13
 17a:	7f e9       	ldi	r23, 0x9F	; 159
 17c:	96 e8       	ldi	r25, 0x86	; 134
 17e:	61 e0       	ldi	r22, 0x01	; 1
 180:	71 50       	subi	r23, 0x01	; 1
 182:	90 40       	sbci	r25, 0x00	; 0
 184:	60 40       	sbci	r22, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <blink_led_cycle+0x74>
 188:	00 c0       	rjmp	.+0      	; 0x18a <blink_led_cycle+0x7e>
 18a:	00 00       	nop
		_delay_ms(125);
		VPORTD.OUT &= ~(1 << n);
 18c:	9d b1       	in	r25, 0x0d	; 13
 18e:	20 95       	com	r18
 190:	29 23       	and	r18, r25
 192:	2d b9       	out	0x0d, r18	; 13
 194:	7f e9       	ldi	r23, 0x9F	; 159
 196:	96 e8       	ldi	r25, 0x86	; 134
 198:	21 e0       	ldi	r18, 0x01	; 1
 19a:	71 50       	subi	r23, 0x01	; 1
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	20 40       	sbci	r18, 0x00	; 0
 1a0:	e1 f7       	brne	.-8      	; 0x19a <blink_led_cycle+0x8e>
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <blink_led_cycle+0x98>
 1a4:	00 00       	nop
		_delay_ms(250);
		VPORTD.OUT &= ~(1 << n);
		_delay_ms(250);
	}
	// 
	for (int i = 0; i < 8; i++) {
 1a6:	4f 5f       	subi	r20, 0xFF	; 255
 1a8:	5f 4f       	sbci	r21, 0xFF	; 255
 1aa:	48 30       	cpi	r20, 0x08	; 8
 1ac:	51 05       	cpc	r21, r1
 1ae:	d4 f2       	brlt	.-76     	; 0x164 <blink_led_cycle+0x58>
		VPORTD.OUT |= (1 << n);
		_delay_ms(125);
		VPORTD.OUT &= ~(1 << n);
		_delay_ms(125);
	}
}
 1b0:	08 95       	ret

000001b2 <main>:

int main(void)
{
	VPORTD.DIR = 0xff;
 1b2:	8f ef       	ldi	r24, 0xFF	; 255
 1b4:	8c b9       	out	0x0c, r24	; 12
	VPORTD.OUT = 0x00;
 1b6:	1d b8       	out	0x0d, r1	; 13
	
	char pd_n = 0;
 1b8:	c0 e0       	ldi	r28, 0x00	; 0
 1ba:	01 c0       	rjmp	.+2      	; 0x1be <main+0xc>
	
	while (1) {
		
		blink_led_cycle(pd_n);
		pd_n += 1;
		if (pd_n >= 8) pd_n = 0;
 1bc:	c0 e0       	ldi	r28, 0x00	; 0
	
	//PORTB.DIRSET = PIN3_bm;
	
	while (1) {
		
		blink_led_cycle(pd_n);
 1be:	8c 2f       	mov	r24, r28
 1c0:	0e 94 86 00 	call	0x10c	; 0x10c <blink_led_cycle>
		pd_n += 1;
 1c4:	cf 5f       	subi	r28, 0xFF	; 255
		if (pd_n >= 8) pd_n = 0;
 1c6:	c8 30       	cpi	r28, 0x08	; 8
 1c8:	c8 f7       	brcc	.-14     	; 0x1bc <main+0xa>
 1ca:	f9 cf       	rjmp	.-14     	; 0x1be <main+0xc>

000001cc <_exit>:
 1cc:	f8 94       	cli

000001ce <__stop_program>:
 1ce:	ff cf       	rjmp	.-2      	; 0x1ce <__stop_program>
