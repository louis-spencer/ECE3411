
SPI_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000c  00804000  000003b2  00000446  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  0080400c  0080400c  00000452  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000452  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000484  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004ed7  00000000  00000000  00000604  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003170  00000000  00000000  000054db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b0b  00000000  00000000  0000864b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00009158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000252d  00000000  00000000  00009454  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d1d  00000000  00000000  0000b981  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  0000c69e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
   c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  24:	0c 94 ab 01 	jmp	0x356	; 0x356 <__vector_9>
  28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  d8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
  f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
 100:	10 e4       	ldi	r17, 0x40	; 64
 102:	a0 e0       	ldi	r26, 0x00	; 0
 104:	b0 e4       	ldi	r27, 0x40	; 64
 106:	e2 eb       	ldi	r30, 0xB2	; 178
 108:	f3 e0       	ldi	r31, 0x03	; 3
 10a:	00 e0       	ldi	r16, 0x00	; 0
 10c:	0b bf       	out	0x3b, r16	; 59
 10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
 110:	07 90       	elpm	r0, Z+
 112:	0d 92       	st	X+, r0
 114:	ac 30       	cpi	r26, 0x0C	; 12
 116:	b1 07       	cpc	r27, r17
 118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
 11a:	20 e4       	ldi	r18, 0x40	; 64
 11c:	ac e0       	ldi	r26, 0x0C	; 12
 11e:	b0 e4       	ldi	r27, 0x40	; 64
 120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
 122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
 124:	ae 30       	cpi	r26, 0x0E	; 14
 126:	b2 07       	cpc	r27, r18
 128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
 12a:	0e 94 92 01 	call	0x324	; 0x324 <main>
 12e:	0c 94 d7 01 	jmp	0x3ae	; 0x3ae <_exit>

00000132 <__bad_interrupt>:
 132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <TWI_Stop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f9 e0       	ldi	r31, 0x09	; 9
 13a:	84 81       	ldd	r24, Z+4	; 0x04
 13c:	83 60       	ori	r24, 0x03	; 3
 13e:	84 83       	std	Z+4, r24	; 0x04
 140:	08 95       	ret

00000142 <TWI_Address>:
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	d8 2f       	mov	r29, r24
 148:	c6 2f       	mov	r28, r22
 14a:	8d 2f       	mov	r24, r29
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	8c 2b       	or	r24, r28
 154:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
 158:	c1 11       	cpse	r28, r1
 15a:	02 c0       	rjmp	.+4      	; 0x160 <TWI_Address+0x1e>
 15c:	26 e0       	ldi	r18, 0x06	; 6
 15e:	01 c0       	rjmp	.+2      	; 0x162 <TWI_Address+0x20>
 160:	27 e0       	ldi	r18, 0x07	; 7
 162:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 2e       	mov	r0, r18
 16a:	02 c0       	rjmp	.+4      	; 0x170 <TWI_Address+0x2e>
 16c:	95 95       	asr	r25
 16e:	87 95       	ror	r24
 170:	0a 94       	dec	r0
 172:	e2 f7       	brpl	.-8      	; 0x16c <TWI_Address+0x2a>
 174:	80 ff       	sbrs	r24, 0
 176:	f5 cf       	rjmp	.-22     	; 0x162 <TWI_Address+0x20>
 178:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 17c:	84 fd       	sbrc	r24, 4
 17e:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_Stop>
 182:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 186:	8c 70       	andi	r24, 0x0C	; 12
 188:	01 f7       	brne	.-64     	; 0x14a <TWI_Address+0x8>
 18a:	df 91       	pop	r29
 18c:	cf 91       	pop	r28
 18e:	08 95       	ret

00000190 <TWI_TXData>:
 190:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
 194:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 198:	86 ff       	sbrs	r24, 6
 19a:	fc cf       	rjmp	.-8      	; 0x194 <TWI_TXData+0x4>
 19c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
 1a0:	8c 70       	andi	r24, 0x0C	; 12
 1a2:	19 f0       	breq	.+6      	; 0x1aa <TWI_TXData+0x1a>
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	08 95       	ret
 1aa:	80 e0       	ldi	r24, 0x00	; 0
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	08 95       	ret

000001b0 <TWI_2TXData>:
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
 1b6:	c6 2f       	mov	r28, r22
 1b8:	14 2f       	mov	r17, r20
 1ba:	60 e0       	ldi	r22, 0x00	; 0
 1bc:	0e 94 a1 00 	call	0x142	; 0x142 <TWI_Address>
 1c0:	8c 2f       	mov	r24, r28
 1c2:	0e 94 c8 00 	call	0x190	; 0x190 <TWI_TXData>
 1c6:	ec 01       	movw	r28, r24
 1c8:	81 2f       	mov	r24, r17
 1ca:	0e 94 c8 00 	call	0x190	; 0x190 <TWI_TXData>
 1ce:	c8 2b       	or	r28, r24
 1d0:	d9 2b       	or	r29, r25
 1d2:	0e 94 9b 00 	call	0x136	; 0x136 <TWI_Stop>
 1d6:	ce 01       	movw	r24, r28
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	1f 91       	pop	r17
 1de:	08 95       	ret

000001e0 <TWI_Host_Init>:
 1e0:	e0 e0       	ldi	r30, 0x00	; 0
 1e2:	f9 e0       	ldi	r31, 0x09	; 9
 1e4:	83 e2       	ldi	r24, 0x23	; 35
 1e6:	86 83       	std	Z+6, r24	; 0x06
 1e8:	83 81       	ldd	r24, Z+3	; 0x03
 1ea:	81 60       	ori	r24, 0x01	; 1
 1ec:	83 83       	std	Z+3, r24	; 0x03
 1ee:	85 81       	ldd	r24, Z+5	; 0x05
 1f0:	81 60       	ori	r24, 0x01	; 1
 1f2:	85 83       	std	Z+5, r24	; 0x05
 1f4:	08 95       	ret

000001f6 <LCDsendCommand>:
 1f6:	48 2f       	mov	r20, r24
 1f8:	60 e8       	ldi	r22, 0x80	; 128
 1fa:	8e e3       	ldi	r24, 0x3E	; 62
 1fc:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 200:	08 95       	ret

00000202 <LCDsendData>:
 202:	48 2f       	mov	r20, r24
 204:	60 e4       	ldi	r22, 0x40	; 64
 206:	8e e3       	ldi	r24, 0x3E	; 62
 208:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 20c:	08 95       	ret

0000020e <LCDinitialize>:
 20e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <TWI_Host_Init>
 212:	40 e0       	ldi	r20, 0x00	; 0
 214:	6f e2       	ldi	r22, 0x2F	; 47
 216:	8b e6       	ldi	r24, 0x6B	; 107
 218:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 21c:	87 ec       	ldi	r24, 0xC7	; 199
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	01 97       	sbiw	r24, 0x01	; 1
 222:	f1 f7       	brne	.-4      	; 0x220 <LCDinitialize+0x12>
 224:	00 c0       	rjmp	.+0      	; 0x226 <LCDinitialize+0x18>
 226:	00 00       	nop
 228:	40 e2       	ldi	r20, 0x20	; 32
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	8b e6       	ldi	r24, 0x6B	; 107
 22e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 232:	87 ec       	ldi	r24, 0xC7	; 199
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	01 97       	sbiw	r24, 0x01	; 1
 238:	f1 f7       	brne	.-4      	; 0x236 <LCDinitialize+0x28>
 23a:	00 c0       	rjmp	.+0      	; 0x23c <LCDinitialize+0x2e>
 23c:	00 00       	nop
 23e:	4f ef       	ldi	r20, 0xFF	; 255
 240:	64 e0       	ldi	r22, 0x04	; 4
 242:	8b e6       	ldi	r24, 0x6B	; 107
 244:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 248:	87 ec       	ldi	r24, 0xC7	; 199
 24a:	90 e0       	ldi	r25, 0x00	; 0
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <LCDinitialize+0x3e>
 250:	00 c0       	rjmp	.+0      	; 0x252 <LCDinitialize+0x44>
 252:	00 00       	nop
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	67 e0       	ldi	r22, 0x07	; 7
 258:	8b e6       	ldi	r24, 0x6B	; 107
 25a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <TWI_2TXData>
 25e:	8f e5       	ldi	r24, 0x5F	; 95
 260:	9a ee       	ldi	r25, 0xEA	; 234
 262:	01 97       	sbiw	r24, 0x01	; 1
 264:	f1 f7       	brne	.-4      	; 0x262 <LCDinitialize+0x54>
 266:	00 c0       	rjmp	.+0      	; 0x268 <LCDinitialize+0x5a>
 268:	00 00       	nop
 26a:	8c e0       	ldi	r24, 0x0C	; 12
 26c:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendCommand>
 270:	95 e3       	ldi	r25, 0x35	; 53
 272:	9a 95       	dec	r25
 274:	f1 f7       	brne	.-4      	; 0x272 <LCDinitialize+0x64>
 276:	00 00       	nop
 278:	88 e3       	ldi	r24, 0x38	; 56
 27a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendCommand>
 27e:	85 e3       	ldi	r24, 0x35	; 53
 280:	8a 95       	dec	r24
 282:	f1 f7       	brne	.-4      	; 0x280 <LCDinitialize+0x72>
 284:	00 00       	nop
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendCommand>
 28c:	8f e3       	ldi	r24, 0x3F	; 63
 28e:	9f e1       	ldi	r25, 0x1F	; 31
 290:	01 97       	sbiw	r24, 0x01	; 1
 292:	f1 f7       	brne	.-4      	; 0x290 <LCDinitialize+0x82>
 294:	00 c0       	rjmp	.+0      	; 0x296 <LCDinitialize+0x88>
 296:	00 00       	nop
 298:	86 e0       	ldi	r24, 0x06	; 6
 29a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendCommand>
 29e:	08 95       	ret

000002a0 <LCDdataWrite>:
 2a0:	0e 94 01 01 	call	0x202	; 0x202 <LCDsendData>
 2a4:	08 95       	ret

000002a6 <LCDclr>:
 2a6:	81 e0       	ldi	r24, 0x01	; 1
 2a8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <LCDsendCommand>
 2ac:	8f e3       	ldi	r24, 0x3F	; 63
 2ae:	9f e1       	ldi	r25, 0x1F	; 31
 2b0:	01 97       	sbiw	r24, 0x01	; 1
 2b2:	f1 f7       	brne	.-4      	; 0x2b0 <LCDclr+0xa>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <LCDclr+0x10>
 2b6:	00 00       	nop
 2b8:	08 95       	ret

000002ba <LCDstring>:
void LCDhome(void) {
	LCDsendCommand(0x02);
	_delay_ms(2);
}

void LCDstring(char* str) {
 2ba:	0f 93       	push	r16
 2bc:	1f 93       	push	r17
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	8c 01       	movw	r16, r24
	int i = 0;
 2c4:	c0 e0       	ldi	r28, 0x00	; 0
 2c6:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0') {
 2c8:	07 c0       	rjmp	.+14     	; 0x2d8 <LCDstring+0x1e>
		LCDdataWrite(str[i]);
 2ca:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LCDdataWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ce:	85 ee       	ldi	r24, 0xE5	; 229
 2d0:	8a 95       	dec	r24
 2d2:	f1 f7       	brne	.-4      	; 0x2d0 <LCDstring+0x16>
 2d4:	00 00       	nop
		_delay_us(43);
		i++;
 2d6:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
}

void LCDstring(char* str) {
	int i = 0;
	while (str[i] != '\0') {
 2d8:	f8 01       	movw	r30, r16
 2da:	ec 0f       	add	r30, r28
 2dc:	fd 1f       	adc	r31, r29
 2de:	80 81       	ld	r24, Z
 2e0:	81 11       	cpse	r24, r1
 2e2:	f3 cf       	rjmp	.-26     	; 0x2ca <LCDstring+0x10>
		LCDdataWrite(str[i]);
		_delay_us(43);
		i++;
	}
}
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	1f 91       	pop	r17
 2ea:	0f 91       	pop	r16
 2ec:	08 95       	ret

000002ee <init_clock>:
float read_voltage_ADC0(uint16_t ain) {
	if (ain == ADC_MUXPOS_AIN8_gc || ain == ADC_MUXPOS_AIN7_gc) ADC0.MUXPOS = ain;
	float voltage = (float)(ADC0.RES)/4096 * 3.30;
	ADC0.COMMAND = ADC_STCONV_bm;
	return voltage;
}
 2ee:	88 ed       	ldi	r24, 0xD8	; 216
 2f0:	84 bf       	out	0x34, r24	; 52
 2f2:	e0 e6       	ldi	r30, 0x60	; 96
 2f4:	f0 e0       	ldi	r31, 0x00	; 0
 2f6:	95 e0       	ldi	r25, 0x05	; 5
 2f8:	90 a3       	std	Z+32, r25	; 0x20
 2fa:	84 bf       	out	0x34, r24	; 52
 2fc:	83 e0       	ldi	r24, 0x03	; 3
 2fe:	80 83       	st	Z, r24
 300:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
 304:	84 ff       	sbrs	r24, 4
 306:	fc cf       	rjmp	.-8      	; 0x300 <init_clock+0x12>
 308:	08 95       	ret

0000030a <init_TCA0>:

void init_TCA0(void) {
	// initialize timer A0 with period of 1ms
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
 30a:	e0 e0       	ldi	r30, 0x00	; 0
 30c:	fa e0       	ldi	r31, 0x0A	; 10
 30e:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.PER = 249;
 310:	89 ef       	ldi	r24, 0xF9	; 249
 312:	90 e0       	ldi	r25, 0x00	; 0
 314:	86 a3       	std	Z+38, r24	; 0x26
 316:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
 318:	81 e0       	ldi	r24, 0x01	; 1
 31a:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm);
 31c:	80 81       	ld	r24, Z
 31e:	8b 60       	ori	r24, 0x0B	; 11
 320:	80 83       	st	Z, r24
 322:	08 95       	ret

00000324 <main>:

int main(void)
{
    /* Replace with your application code */
	
	init_clock();
 324:	0e 94 77 01 	call	0x2ee	; 0x2ee <init_clock>
	init_TCA0();
 328:	0e 94 85 01 	call	0x30a	; 0x30a <init_TCA0>
	//init_ADC0();
	//init_AC0();
	LCDinitialize();
 32c:	0e 94 07 01 	call	0x20e	; 0x20e <LCDinitialize>
	
	sei();
 330:	78 94       	sei
    while (1) 
    {
		if (millis >= 100) {
 332:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <__data_end>
 336:	90 91 0d 40 	lds	r25, 0x400D	; 0x80400d <__data_end+0x1>
 33a:	84 36       	cpi	r24, 0x64	; 100
 33c:	91 05       	cpc	r25, r1
 33e:	c8 f3       	brcs	.-14     	; 0x332 <main+0xe>
			millis = 0;
 340:	10 92 0c 40 	sts	0x400C, r1	; 0x80400c <__data_end>
 344:	10 92 0d 40 	sts	0x400D, r1	; 0x80400d <__data_end+0x1>
			LCDclr();
 348:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LCDclr>
			LCDstring("hello world");
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	90 e4       	ldi	r25, 0x40	; 64
 350:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LCDstring>
 354:	ee cf       	rjmp	.-36     	; 0x332 <main+0xe>

00000356 <__vector_9>:
		}
    }
}

ISR(TCA0_OVF_vect) {
 356:	1f 92       	push	r1
 358:	0f 92       	push	r0
 35a:	0f b6       	in	r0, 0x3f	; 63
 35c:	0f 92       	push	r0
 35e:	11 24       	eor	r1, r1
 360:	0b b6       	in	r0, 0x3b	; 59
 362:	0f 92       	push	r0
 364:	2f 93       	push	r18
 366:	8f 93       	push	r24
 368:	9f 93       	push	r25
 36a:	ef 93       	push	r30
 36c:	ff 93       	push	r31
	if (millis < UINT16_MAX) millis++;
 36e:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <__data_end>
 372:	90 91 0d 40 	lds	r25, 0x400D	; 0x80400d <__data_end+0x1>
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	49 f0       	breq	.+18     	; 0x38c <__vector_9+0x36>
 37a:	80 91 0c 40 	lds	r24, 0x400C	; 0x80400c <__data_end>
 37e:	90 91 0d 40 	lds	r25, 0x400D	; 0x80400d <__data_end+0x1>
 382:	01 96       	adiw	r24, 0x01	; 1
 384:	80 93 0c 40 	sts	0x400C, r24	; 0x80400c <__data_end>
 388:	90 93 0d 40 	sts	0x400D, r25	; 0x80400d <__data_end+0x1>
	TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
 38c:	e0 e0       	ldi	r30, 0x00	; 0
 38e:	fa e0       	ldi	r31, 0x0A	; 10
 390:	83 85       	ldd	r24, Z+11	; 0x0b
 392:	81 60       	ori	r24, 0x01	; 1
 394:	83 87       	std	Z+11, r24	; 0x0b
}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	9f 91       	pop	r25
 39c:	8f 91       	pop	r24
 39e:	2f 91       	pop	r18
 3a0:	0f 90       	pop	r0
 3a2:	0b be       	out	0x3b, r0	; 59
 3a4:	0f 90       	pop	r0
 3a6:	0f be       	out	0x3f, r0	; 63
 3a8:	0f 90       	pop	r0
 3aa:	1f 90       	pop	r1
 3ac:	18 95       	reti

000003ae <_exit>:
 3ae:	f8 94       	cli

000003b0 <__stop_program>:
 3b0:	ff cf       	rjmp	.-2      	; 0x3b0 <__stop_program>
