
SPI_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000062  00804000  00001a06  00001a9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001a06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000062  00804062  00804062  00001afc  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001afc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001b58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c8  00000000  00000000  00001b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00005cc6  00000000  00000000  00001d60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003519  00000000  00000000  00007a26  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001179  00000000  00000000  0000af3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  0000c0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002732  00000000  00000000  0000c55c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000014b8  00000000  00000000  0000ec8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001b8  00000000  00000000  00010146  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 17 04 	jmp	0x82e	; 0x82e <__vector_9>
      28:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      2c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      68:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      b0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      b4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      b8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      bc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      c0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      c4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      c8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      cc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      d0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      d4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      d8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      dc:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      e0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      e4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      e8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ec:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      f0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>

000000f4 <__trampolines_end>:
      f4:	00 40       	sbci	r16, 0x00	; 0
      f6:	7a 10       	cpse	r7, r10
      f8:	f3 5a       	subi	r31, 0xA3	; 163
      fa:	00 a0       	ldd	r0, Z+32	; 0x20
      fc:	72 4e       	sbci	r23, 0xE2	; 226
      fe:	18 09       	sbc	r17, r8
     100:	00 10       	cpse	r0, r0
     102:	a5 d4       	rcall	.+2378   	; 0xa4e <uart_getchar+0xcc>
     104:	e8 00       	.word	0x00e8	; ????
     106:	00 e8       	ldi	r16, 0x80	; 128
     108:	76 48       	sbci	r23, 0x86	; 134
     10a:	17 00       	.word	0x0017	; ????
     10c:	00 e4       	ldi	r16, 0x40	; 64
     10e:	0b 54       	subi	r16, 0x4B	; 75
     110:	02 00       	.word	0x0002	; ????
     112:	00 ca       	rjmp	.-3072   	; 0xfffff514 <__eeprom_end+0xff7ef514>
     114:	9a 3b       	cpi	r25, 0xBA	; 186
     116:	00 00       	nop
     118:	00 e1       	ldi	r16, 0x10	; 16
     11a:	f5 05       	cpc	r31, r5
     11c:	00 00       	nop
     11e:	80 96       	adiw	r24, 0x20	; 32
     120:	98 00       	.word	0x0098	; ????
     122:	00 00       	nop
     124:	40 42       	sbci	r20, 0x20	; 32
     126:	0f 00       	.word	0x000f	; ????
     128:	00 00       	nop
     12a:	a0 86       	std	Z+8, r10	; 0x08
     12c:	01 00       	.word	0x0001	; ????
     12e:	00 00       	nop
     130:	10 27       	eor	r17, r16
     132:	00 00       	nop
     134:	00 00       	nop
     136:	e8 03       	fmulsu	r22, r16
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	64 00       	.word	0x0064	; ????
     13e:	00 00       	nop
     140:	00 00       	nop
     142:	0a 00       	.word	0x000a	; ????
     144:	00 00       	nop
     146:	00 00       	nop
     148:	01 00       	.word	0x0001	; ????
     14a:	00 00       	nop
     14c:	00 00       	nop
     14e:	2c 76       	andi	r18, 0x6C	; 108
     150:	d8 88       	ldd	r13, Y+16	; 0x10
     152:	dc 67       	ori	r29, 0x7C	; 124
     154:	4f 08       	sbc	r4, r15
     156:	23 df       	rcall	.-442    	; 0xffffff9e <__eeprom_end+0xff7eff9e>
     158:	c1 df       	rcall	.-126    	; 0xdc <__SREG__+0x9d>
     15a:	ae 59       	subi	r26, 0x9E	; 158
     15c:	e1 b1       	in	r30, 0x01	; 1
     15e:	b7 96       	adiw	r30, 0x27	; 39
     160:	e5 e3       	ldi	r30, 0x35	; 53
     162:	e4 53       	subi	r30, 0x34	; 52
     164:	c6 3a       	cpi	r28, 0xA6	; 166
     166:	e6 51       	subi	r30, 0x16	; 22
     168:	99 76       	andi	r25, 0x69	; 105
     16a:	96 e8       	ldi	r25, 0x86	; 134
     16c:	e6 c2       	rjmp	.+1484   	; 0x73a <main+0xd2>
     16e:	84 26       	eor	r8, r20
     170:	eb 89       	ldd	r30, Y+19	; 0x13
     172:	8c 9b       	sbis	0x11, 4	; 17
     174:	62 ed       	ldi	r22, 0xD2	; 210
     176:	40 7c       	andi	r20, 0xC0	; 192
     178:	6f fc       	.word	0xfc6f	; ????
     17a:	ef bc       	out	0x2f, r14	; 47
     17c:	9c 9f       	mul	r25, r28
     17e:	40 f2       	brcs	.-112    	; 0x110 <__trampolines_end+0x1c>
     180:	ba a5       	ldd	r27, Y+42	; 0x2a
     182:	6f a5       	ldd	r22, Y+47	; 0x2f
     184:	f4 90       	lpm	r15, Z
     186:	05 5a       	subi	r16, 0xA5	; 165
     188:	2a f7       	brpl	.-54     	; 0x154 <__trampolines_end+0x60>
     18a:	5c 93       	st	X, r21
     18c:	6b 6c       	ori	r22, 0xCB	; 203
     18e:	f9 67       	ori	r31, 0x79	; 121
     190:	6d c1       	rjmp	.+730    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     192:	1b fc       	.word	0xfc1b	; ????
     194:	e0 e4       	ldi	r30, 0x40	; 64
     196:	0d 47       	sbci	r16, 0x7D	; 125
     198:	fe f5       	brtc	.+126    	; 0x218 <__do_clear_bss+0x4>
     19a:	20 e6       	ldi	r18, 0x60	; 96
     19c:	b5 00       	.word	0x00b5	; ????
     19e:	d0 ed       	ldi	r29, 0xD0	; 208
     1a0:	90 2e       	mov	r9, r16
     1a2:	03 00       	.word	0x0003	; ????
     1a4:	94 35       	cpi	r25, 0x54	; 84
     1a6:	77 05       	cpc	r23, r7
     1a8:	00 80       	ld	r0, Z
     1aa:	84 1e       	adc	r8, r20
     1ac:	08 00       	.word	0x0008	; ????
     1ae:	00 20       	and	r0, r0
     1b0:	4e 0a       	sbc	r4, r30
     1b2:	00 00       	nop
     1b4:	00 c8       	rjmp	.-4096   	; 0xfffff1b6 <__eeprom_end+0xff7ef1b6>
     1b6:	0c 33       	cpi	r16, 0x3C	; 60
     1b8:	33 33       	cpi	r19, 0x33	; 51
     1ba:	33 0f       	add	r19, r19
     1bc:	98 6e       	ori	r25, 0xE8	; 232
     1be:	12 83       	std	Z+2, r17	; 0x02
     1c0:	11 41       	sbci	r17, 0x11	; 17
     1c2:	ef 8d       	ldd	r30, Y+31	; 0x1f
     1c4:	21 14       	cp	r2, r1
     1c6:	89 3b       	cpi	r24, 0xB9	; 185
     1c8:	e6 55       	subi	r30, 0x56	; 86
     1ca:	16 cf       	rjmp	.-468    	; 0xfffffff8 <__eeprom_end+0xff7efff8>
     1cc:	fe e6       	ldi	r31, 0x6E	; 110
     1ce:	db 18       	sub	r13, r11
     1d0:	d1 84       	ldd	r13, Z+9	; 0x09
     1d2:	4b 38       	cpi	r20, 0x8B	; 139
     1d4:	1b f7       	brvc	.-58     	; 0x19c <__trampolines_end+0xa8>
     1d6:	7c 1d       	adc	r23, r12
     1d8:	90 1d       	adc	r25, r0
     1da:	a4 bb       	out	0x14, r26	; 20
     1dc:	e4 24       	eor	r14, r4
     1de:	20 32       	cpi	r18, 0x20	; 32
     1e0:	84 72       	andi	r24, 0x24	; 36
     1e2:	5e 22       	and	r5, r30
     1e4:	81 00       	.word	0x0081	; ????
     1e6:	c9 f1       	breq	.+114    	; 0x25a <TWI_Address+0x1e>
     1e8:	24 ec       	ldi	r18, 0xC4	; 196
     1ea:	a1 e5       	ldi	r26, 0x51	; 81
     1ec:	3d 27       	eor	r19, r29

000001ee <__ctors_end>:
     1ee:	11 24       	eor	r1, r1
     1f0:	1f be       	out	0x3f, r1	; 63
     1f2:	cf ef       	ldi	r28, 0xFF	; 255
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	df e7       	ldi	r29, 0x7F	; 127
     1f8:	de bf       	out	0x3e, r29	; 62

000001fa <__do_copy_data>:
     1fa:	10 e4       	ldi	r17, 0x40	; 64
     1fc:	a0 e0       	ldi	r26, 0x00	; 0
     1fe:	b0 e4       	ldi	r27, 0x40	; 64
     200:	e6 e0       	ldi	r30, 0x06	; 6
     202:	fa e1       	ldi	r31, 0x1A	; 26
     204:	00 e0       	ldi	r16, 0x00	; 0
     206:	0b bf       	out	0x3b, r16	; 59
     208:	02 c0       	rjmp	.+4      	; 0x20e <__EEPROM_REGION_LENGTH__+0xe>
     20a:	07 90       	elpm	r0, Z+
     20c:	0d 92       	st	X+, r0
     20e:	a2 36       	cpi	r26, 0x62	; 98
     210:	b1 07       	cpc	r27, r17
     212:	d9 f7       	brne	.-10     	; 0x20a <__EEPROM_REGION_LENGTH__+0xa>

00000214 <__do_clear_bss>:
     214:	20 e4       	ldi	r18, 0x40	; 64
     216:	a2 e6       	ldi	r26, 0x62	; 98
     218:	b0 e4       	ldi	r27, 0x40	; 64
     21a:	01 c0       	rjmp	.+2      	; 0x21e <.do_clear_bss_start>

0000021c <.do_clear_bss_loop>:
     21c:	1d 92       	st	X+, r1

0000021e <.do_clear_bss_start>:
     21e:	a4 3c       	cpi	r26, 0xC4	; 196
     220:	b2 07       	cpc	r27, r18
     222:	e1 f7       	brne	.-8      	; 0x21c <.do_clear_bss_loop>
     224:	0e 94 34 03 	call	0x668	; 0x668 <main>
     228:	0c 94 01 0d 	jmp	0x1a02	; 0x1a02 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <TWI_Stop>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     230:	e0 e0       	ldi	r30, 0x00	; 0
     232:	f9 e0       	ldi	r31, 0x09	; 9
     234:	84 81       	ldd	r24, Z+4	; 0x04
     236:	83 60       	ori	r24, 0x03	; 3
     238:	84 83       	std	Z+4, r24	; 0x04
     23a:	08 95       	ret

0000023c <TWI_Address>:
     23c:	cf 93       	push	r28
     23e:	df 93       	push	r29
     240:	d8 2f       	mov	r29, r24
     242:	c6 2f       	mov	r28, r22
     244:	8d 2f       	mov	r24, r29
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	88 0f       	add	r24, r24
     24a:	99 1f       	adc	r25, r25
     24c:	8c 2b       	or	r24, r28
     24e:	80 93 07 09 	sts	0x0907, r24	; 0x800907 <__TEXT_REGION_LENGTH__+0x7e0907>
     252:	c1 11       	cpse	r28, r1
     254:	02 c0       	rjmp	.+4      	; 0x25a <TWI_Address+0x1e>
     256:	26 e0       	ldi	r18, 0x06	; 6
     258:	01 c0       	rjmp	.+2      	; 0x25c <TWI_Address+0x20>
     25a:	27 e0       	ldi	r18, 0x07	; 7
     25c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	02 2e       	mov	r0, r18
     264:	02 c0       	rjmp	.+4      	; 0x26a <TWI_Address+0x2e>
     266:	95 95       	asr	r25
     268:	87 95       	ror	r24
     26a:	0a 94       	dec	r0
     26c:	e2 f7       	brpl	.-8      	; 0x266 <TWI_Address+0x2a>
     26e:	80 ff       	sbrs	r24, 0
     270:	f5 cf       	rjmp	.-22     	; 0x25c <TWI_Address+0x20>
     272:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     276:	84 fd       	sbrc	r24, 4
     278:	0e 94 18 01 	call	0x230	; 0x230 <TWI_Stop>
     27c:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     280:	8c 70       	andi	r24, 0x0C	; 12
     282:	01 f7       	brne	.-64     	; 0x244 <TWI_Address+0x8>
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	08 95       	ret

0000028a <TWI_TXData>:
     28a:	80 93 08 09 	sts	0x0908, r24	; 0x800908 <__TEXT_REGION_LENGTH__+0x7e0908>
     28e:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     292:	86 ff       	sbrs	r24, 6
     294:	fc cf       	rjmp	.-8      	; 0x28e <TWI_TXData+0x4>
     296:	80 91 05 09 	lds	r24, 0x0905	; 0x800905 <__TEXT_REGION_LENGTH__+0x7e0905>
     29a:	8c 70       	andi	r24, 0x0C	; 12
     29c:	19 f0       	breq	.+6      	; 0x2a4 <TWI_TXData+0x1a>
     29e:	8f ef       	ldi	r24, 0xFF	; 255
     2a0:	9f ef       	ldi	r25, 0xFF	; 255
     2a2:	08 95       	ret
     2a4:	80 e0       	ldi	r24, 0x00	; 0
     2a6:	90 e0       	ldi	r25, 0x00	; 0
     2a8:	08 95       	ret

000002aa <TWI_2TXData>:
     2aa:	1f 93       	push	r17
     2ac:	cf 93       	push	r28
     2ae:	df 93       	push	r29
     2b0:	c6 2f       	mov	r28, r22
     2b2:	14 2f       	mov	r17, r20
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	0e 94 1e 01 	call	0x23c	; 0x23c <TWI_Address>
     2ba:	8c 2f       	mov	r24, r28
     2bc:	0e 94 45 01 	call	0x28a	; 0x28a <TWI_TXData>
     2c0:	ec 01       	movw	r28, r24
     2c2:	81 2f       	mov	r24, r17
     2c4:	0e 94 45 01 	call	0x28a	; 0x28a <TWI_TXData>
     2c8:	c8 2b       	or	r28, r24
     2ca:	d9 2b       	or	r29, r25
     2cc:	0e 94 18 01 	call	0x230	; 0x230 <TWI_Stop>
     2d0:	ce 01       	movw	r24, r28
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	1f 91       	pop	r17
     2d8:	08 95       	ret

000002da <TWI_Host_Init>:
     2da:	e0 e0       	ldi	r30, 0x00	; 0
     2dc:	f9 e0       	ldi	r31, 0x09	; 9
     2de:	83 e2       	ldi	r24, 0x23	; 35
     2e0:	86 83       	std	Z+6, r24	; 0x06
     2e2:	83 81       	ldd	r24, Z+3	; 0x03
     2e4:	81 60       	ori	r24, 0x01	; 1
     2e6:	83 83       	std	Z+3, r24	; 0x03
     2e8:	85 81       	ldd	r24, Z+5	; 0x05
     2ea:	81 60       	ori	r24, 0x01	; 1
     2ec:	85 83       	std	Z+5, r24	; 0x05
     2ee:	08 95       	ret

000002f0 <LCDsendCommand>:
     2f0:	48 2f       	mov	r20, r24
     2f2:	60 e8       	ldi	r22, 0x80	; 128
     2f4:	8e e3       	ldi	r24, 0x3E	; 62
     2f6:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     2fa:	08 95       	ret

000002fc <LCDsendData>:
     2fc:	48 2f       	mov	r20, r24
     2fe:	60 e4       	ldi	r22, 0x40	; 64
     300:	8e e3       	ldi	r24, 0x3E	; 62
     302:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     306:	08 95       	ret

00000308 <LCDinitialize>:
     308:	0e 94 6d 01 	call	0x2da	; 0x2da <TWI_Host_Init>
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	6f e2       	ldi	r22, 0x2F	; 47
     310:	8b e6       	ldi	r24, 0x6B	; 107
     312:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     316:	87 ec       	ldi	r24, 0xC7	; 199
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	f1 f7       	brne	.-4      	; 0x31a <LCDinitialize+0x12>
     31e:	00 c0       	rjmp	.+0      	; 0x320 <LCDinitialize+0x18>
     320:	00 00       	nop
     322:	40 e2       	ldi	r20, 0x20	; 32
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	8b e6       	ldi	r24, 0x6B	; 107
     328:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     32c:	87 ec       	ldi	r24, 0xC7	; 199
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	01 97       	sbiw	r24, 0x01	; 1
     332:	f1 f7       	brne	.-4      	; 0x330 <LCDinitialize+0x28>
     334:	00 c0       	rjmp	.+0      	; 0x336 <LCDinitialize+0x2e>
     336:	00 00       	nop
     338:	4f ef       	ldi	r20, 0xFF	; 255
     33a:	64 e0       	ldi	r22, 0x04	; 4
     33c:	8b e6       	ldi	r24, 0x6B	; 107
     33e:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     342:	87 ec       	ldi	r24, 0xC7	; 199
     344:	90 e0       	ldi	r25, 0x00	; 0
     346:	01 97       	sbiw	r24, 0x01	; 1
     348:	f1 f7       	brne	.-4      	; 0x346 <LCDinitialize+0x3e>
     34a:	00 c0       	rjmp	.+0      	; 0x34c <LCDinitialize+0x44>
     34c:	00 00       	nop
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	67 e0       	ldi	r22, 0x07	; 7
     352:	8b e6       	ldi	r24, 0x6B	; 107
     354:	0e 94 55 01 	call	0x2aa	; 0x2aa <TWI_2TXData>
     358:	8f e5       	ldi	r24, 0x5F	; 95
     35a:	9a ee       	ldi	r25, 0xEA	; 234
     35c:	01 97       	sbiw	r24, 0x01	; 1
     35e:	f1 f7       	brne	.-4      	; 0x35c <LCDinitialize+0x54>
     360:	00 c0       	rjmp	.+0      	; 0x362 <LCDinitialize+0x5a>
     362:	00 00       	nop
     364:	8c e0       	ldi	r24, 0x0C	; 12
     366:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     36a:	95 e3       	ldi	r25, 0x35	; 53
     36c:	9a 95       	dec	r25
     36e:	f1 f7       	brne	.-4      	; 0x36c <LCDinitialize+0x64>
     370:	00 00       	nop
     372:	88 e3       	ldi	r24, 0x38	; 56
     374:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     378:	85 e3       	ldi	r24, 0x35	; 53
     37a:	8a 95       	dec	r24
     37c:	f1 f7       	brne	.-4      	; 0x37a <LCDinitialize+0x72>
     37e:	00 00       	nop
     380:	81 e0       	ldi	r24, 0x01	; 1
     382:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     386:	8f e3       	ldi	r24, 0x3F	; 63
     388:	9f e1       	ldi	r25, 0x1F	; 31
     38a:	01 97       	sbiw	r24, 0x01	; 1
     38c:	f1 f7       	brne	.-4      	; 0x38a <LCDinitialize+0x82>
     38e:	00 c0       	rjmp	.+0      	; 0x390 <LCDinitialize+0x88>
     390:	00 00       	nop
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     398:	08 95       	ret

0000039a <LCDdataWrite>:
     39a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <LCDsendData>
     39e:	08 95       	ret

000003a0 <LCDclr>:
     3a0:	81 e0       	ldi	r24, 0x01	; 1
     3a2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     3a6:	8f e3       	ldi	r24, 0x3F	; 63
     3a8:	9f e1       	ldi	r25, 0x1F	; 31
     3aa:	01 97       	sbiw	r24, 0x01	; 1
     3ac:	f1 f7       	brne	.-4      	; 0x3aa <LCDclr+0xa>
     3ae:	00 c0       	rjmp	.+0      	; 0x3b0 <LCDclr+0x10>
     3b0:	00 00       	nop
     3b2:	08 95       	ret

000003b4 <LCDstring>:
void LCDhome(void) {
	LCDsendCommand(0x02);
	_delay_ms(2);
}

void LCDstring(char* str) {
     3b4:	0f 93       	push	r16
     3b6:	1f 93       	push	r17
     3b8:	cf 93       	push	r28
     3ba:	df 93       	push	r29
     3bc:	8c 01       	movw	r16, r24
	int i = 0;
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
	while (str[i] != '\0') {
     3c2:	07 c0       	rjmp	.+14     	; 0x3d2 <LCDstring+0x1e>
		LCDdataWrite(str[i]);
     3c4:	0e 94 cd 01 	call	0x39a	; 0x39a <LCDdataWrite>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3c8:	85 ee       	ldi	r24, 0xE5	; 229
     3ca:	8a 95       	dec	r24
     3cc:	f1 f7       	brne	.-4      	; 0x3ca <LCDstring+0x16>
     3ce:	00 00       	nop
		_delay_us(43);
		i++;
     3d0:	21 96       	adiw	r28, 0x01	; 1
	_delay_ms(2);
}

void LCDstring(char* str) {
	int i = 0;
	while (str[i] != '\0') {
     3d2:	f8 01       	movw	r30, r16
     3d4:	ec 0f       	add	r30, r28
     3d6:	fd 1f       	adc	r31, r29
     3d8:	80 81       	ld	r24, Z
     3da:	81 11       	cpse	r24, r1
     3dc:	f3 cf       	rjmp	.-26     	; 0x3c4 <LCDstring+0x10>
		LCDdataWrite(str[i]);
		_delay_us(43);
		i++;
	}
}
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	1f 91       	pop	r17
     3e4:	0f 91       	pop	r16
     3e6:	08 95       	ret

000003e8 <LCDgotoXY>:

void LCDgotoXY(uint8_t x, uint8_t y) {
	if (y == 0) x |= 0x80;
     3e8:	61 11       	cpse	r22, r1
     3ea:	02 c0       	rjmp	.+4      	; 0x3f0 <LCDgotoXY+0x8>
     3ec:	80 68       	ori	r24, 0x80	; 128
     3ee:	01 c0       	rjmp	.+2      	; 0x3f2 <LCDgotoXY+0xa>
	else x |= 0xc0;
     3f0:	80 6c       	ori	r24, 0xC0	; 192
	LCDsendCommand(x);
     3f2:	0e 94 78 01 	call	0x2f0	; 0x2f0 <LCDsendCommand>
     3f6:	08 95       	ret

000003f8 <printf_reg8>:

uint8_t SPI_Master_Transceiver(uint8_t cData) {
	SPI0.DATA = cData; // start tx - SS pulled down by hardware
	loop_until_bit_is_set(SPI0.INTFLAGS, SPI_IF_bp); // wait for tx complete
	return SPI0.DATA; // return rx data
}
     3f8:	0f 93       	push	r16
     3fa:	1f 93       	push	r17
     3fc:	cf 93       	push	r28
     3fe:	df 93       	push	r29
     400:	80 ff       	sbrs	r24, 0
     402:	03 c0       	rjmp	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
     404:	d1 e3       	ldi	r29, 0x31	; 49
     406:	10 e0       	ldi	r17, 0x00	; 0
     408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40a:	d0 e3       	ldi	r29, 0x30	; 48
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	81 ff       	sbrs	r24, 1
     410:	03 c0       	rjmp	.+6      	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
     412:	b1 e3       	ldi	r27, 0x31	; 49
     414:	c0 e0       	ldi	r28, 0x00	; 0
     416:	02 c0       	rjmp	.+4      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     418:	b0 e3       	ldi	r27, 0x30	; 48
     41a:	c0 e0       	ldi	r28, 0x00	; 0
     41c:	82 ff       	sbrs	r24, 2
     41e:	03 c0       	rjmp	.+6      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     420:	f1 e3       	ldi	r31, 0x31	; 49
     422:	a0 e0       	ldi	r26, 0x00	; 0
     424:	02 c0       	rjmp	.+4      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     426:	f0 e3       	ldi	r31, 0x30	; 48
     428:	a0 e0       	ldi	r26, 0x00	; 0
     42a:	83 ff       	sbrs	r24, 3
     42c:	03 c0       	rjmp	.+6      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     42e:	71 e3       	ldi	r23, 0x31	; 49
     430:	e0 e0       	ldi	r30, 0x00	; 0
     432:	02 c0       	rjmp	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     434:	70 e3       	ldi	r23, 0x30	; 48
     436:	e0 e0       	ldi	r30, 0x00	; 0
     438:	84 ff       	sbrs	r24, 4
     43a:	03 c0       	rjmp	.+6      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     43c:	51 e3       	ldi	r21, 0x31	; 49
     43e:	60 e0       	ldi	r22, 0x00	; 0
     440:	02 c0       	rjmp	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	50 e3       	ldi	r21, 0x30	; 48
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	85 ff       	sbrs	r24, 5
     448:	03 c0       	rjmp	.+6      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     44a:	31 e3       	ldi	r19, 0x31	; 49
     44c:	40 e0       	ldi	r20, 0x00	; 0
     44e:	02 c0       	rjmp	.+4      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     450:	30 e3       	ldi	r19, 0x30	; 48
     452:	40 e0       	ldi	r20, 0x00	; 0
     454:	86 ff       	sbrs	r24, 6
     456:	03 c0       	rjmp	.+6      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
     458:	91 e3       	ldi	r25, 0x31	; 49
     45a:	20 e0       	ldi	r18, 0x00	; 0
     45c:	02 c0       	rjmp	.+4      	; 0x462 <__LOCK_REGION_LENGTH__+0x62>
     45e:	90 e3       	ldi	r25, 0x30	; 48
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	88 23       	and	r24, r24
     464:	1c f4       	brge	.+6      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     466:	81 e3       	ldi	r24, 0x31	; 49
     468:	00 e0       	ldi	r16, 0x00	; 0
     46a:	02 c0       	rjmp	.+4      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     46c:	80 e3       	ldi	r24, 0x30	; 48
     46e:	00 e0       	ldi	r16, 0x00	; 0
     470:	1f 93       	push	r17
     472:	df 93       	push	r29
     474:	cf 93       	push	r28
     476:	bf 93       	push	r27
     478:	af 93       	push	r26
     47a:	ff 93       	push	r31
     47c:	ef 93       	push	r30
     47e:	7f 93       	push	r23
     480:	6f 93       	push	r22
     482:	5f 93       	push	r21
     484:	4f 93       	push	r20
     486:	3f 93       	push	r19
     488:	2f 93       	push	r18
     48a:	9f 93       	push	r25
     48c:	0f 93       	push	r16
     48e:	8f 93       	push	r24
     490:	82 e1       	ldi	r24, 0x12	; 18
     492:	90 e4       	ldi	r25, 0x40	; 64
     494:	9f 93       	push	r25
     496:	8f 93       	push	r24
     498:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
     49c:	8d b7       	in	r24, 0x3d	; 61
     49e:	9e b7       	in	r25, 0x3e	; 62
     4a0:	42 96       	adiw	r24, 0x12	; 18
     4a2:	8d bf       	out	0x3d, r24	; 61
     4a4:	9e bf       	out	0x3e, r25	; 62
     4a6:	df 91       	pop	r29
     4a8:	cf 91       	pop	r28
     4aa:	1f 91       	pop	r17
     4ac:	0f 91       	pop	r16
     4ae:	08 95       	ret

000004b0 <init_clock>:
     4b0:	88 ed       	ldi	r24, 0xD8	; 216
     4b2:	84 bf       	out	0x34, r24	; 52
     4b4:	e0 e6       	ldi	r30, 0x60	; 96
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	95 e0       	ldi	r25, 0x05	; 5
     4ba:	90 a3       	std	Z+32, r25	; 0x20
     4bc:	84 bf       	out	0x34, r24	; 52
     4be:	83 e0       	ldi	r24, 0x03	; 3
     4c0:	80 83       	st	Z, r24
     4c2:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <__TEXT_REGION_LENGTH__+0x7e0065>
     4c6:	84 ff       	sbrs	r24, 4
     4c8:	fc cf       	rjmp	.-8      	; 0x4c2 <init_clock+0x12>
     4ca:	08 95       	ret

000004cc <SPI_Master_init>:
     4cc:	80 ed       	ldi	r24, 0xD0	; 208
     4ce:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7e0400>
     4d2:	e0 e4       	ldi	r30, 0x40	; 64
     4d4:	f9 e0       	ldi	r31, 0x09	; 9
     4d6:	87 e2       	ldi	r24, 0x27	; 39
     4d8:	80 83       	st	Z, r24
     4da:	81 81       	ldd	r24, Z+1	; 0x01
     4dc:	84 60       	ori	r24, 0x04	; 4
     4de:	81 83       	std	Z+1, r24	; 0x01
     4e0:	08 95       	ret

000004e2 <SPI_MCP4131_RTX>:

uint8_t SPI_MCP4131_RTX(uint8_t addr, uint8_t cmd, uint16_t data) {
	// combine fields into 16bit frame
	uint16_t tx_data = (addr << 12) | (cmd << 10) | data;
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	98 2f       	mov	r25, r24
     4e6:	88 27       	eor	r24, r24
     4e8:	92 95       	swap	r25
     4ea:	90 7f       	andi	r25, 0xF0	; 240
     4ec:	70 e0       	ldi	r23, 0x00	; 0
     4ee:	76 2f       	mov	r23, r22
     4f0:	66 27       	eor	r22, r22
     4f2:	77 0f       	add	r23, r23
     4f4:	77 0f       	add	r23, r23
     4f6:	86 2b       	or	r24, r22
     4f8:	97 2b       	or	r25, r23
     4fa:	48 2b       	or	r20, r24
     4fc:	59 2b       	or	r21, r25
	// divide frame into two cmd bytes
	uint8_t pck1 = (tx_data >> 8);
	uint8_t pck2 = (tx_data & 0x00ff);
	
	// pull CS pin low
	SPI_PORT.OUTCLR |= SPI_SS;
     4fe:	e0 e0       	ldi	r30, 0x00	; 0
     500:	f4 e0       	ldi	r31, 0x04	; 4
     502:	86 81       	ldd	r24, Z+6	; 0x06
     504:	80 68       	ori	r24, 0x80	; 128
     506:	86 83       	std	Z+6, r24	; 0x06
	SPI0.DATA = pck1;
     508:	50 93 44 09 	sts	0x0944, r21	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	loop_until_bit_is_set(SPI0.INTFLAGS, SPI_IF_bp);
     50c:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
     510:	88 23       	and	r24, r24
     512:	e4 f7       	brge	.-8      	; 0x50c <SPI_MCP4131_RTX+0x2a>
	SPI0.DATA = pck2;
     514:	40 93 44 09 	sts	0x0944, r20	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
	loop_until_bit_is_set(SPI0.INTFLAGS, SPI_IF_bp);
     518:	80 91 43 09 	lds	r24, 0x0943	; 0x800943 <__TEXT_REGION_LENGTH__+0x7e0943>
     51c:	88 23       	and	r24, r24
     51e:	e4 f7       	brge	.-8      	; 0x518 <SPI_MCP4131_RTX+0x36>
	// set CS pin high
	SPI_PORT.OUTSET |= SPI_SS;
     520:	e0 e0       	ldi	r30, 0x00	; 0
     522:	f4 e0       	ldi	r31, 0x04	; 4
     524:	85 81       	ldd	r24, Z+5	; 0x05
     526:	80 68       	ori	r24, 0x80	; 128
     528:	85 83       	std	Z+5, r24	; 0x05
	
	return SPI0.DATA;
     52a:	80 91 44 09 	lds	r24, 0x0944	; 0x800944 <__TEXT_REGION_LENGTH__+0x7e0944>
}
     52e:	08 95       	ret

00000530 <init_AC0>:

//---------------------Analog Comparator (AC0)---------------------
void init_AC0(void) {
	AC0.CTRLA = AC_ENABLE_bm;
     530:	e0 e8       	ldi	r30, 0x80	; 128
     532:	f6 e0       	ldi	r31, 0x06	; 6
     534:	81 e0       	ldi	r24, 0x01	; 1
     536:	80 83       	st	Z, r24
	// compare pins PE0 (0, AINP1) and PD7 (0, AINN2)
	AC0.MUXCTRL = (1 << AC_MUXPOS_gp) | (2 << AC_MUXNEG_gp);
     538:	8a e0       	ldi	r24, 0x0A	; 10
     53a:	82 83       	std	Z+2, r24	; 0x02
     53c:	08 95       	ret

0000053e <read_AC0>:
}

uint16_t read_AC0(void) {
	// returns 0 if V_digital > V_analog
	// returns 1 if V_digital < V_analog
	return !(AC0.STATUS & AC_CMPSTATE_bm);
     53e:	80 91 87 06 	lds	r24, 0x0687	; 0x800687 <__TEXT_REGION_LENGTH__+0x7e0687>
     542:	82 95       	swap	r24
     544:	8f 70       	andi	r24, 0x0F	; 15
     546:	91 e0       	ldi	r25, 0x01	; 1
     548:	89 27       	eor	r24, r25
}
     54a:	81 70       	andi	r24, 0x01	; 1
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	08 95       	ret

00000550 <init_ADC0>:

//---------------------Analog-Digital Converter (ADC0)---------------------
void init_ADC0(void) {
	ADC0.MUXPOS = ADC_MUXPOS_AIN8_gc;
     550:	e0 e0       	ldi	r30, 0x00	; 0
     552:	f6 e0       	ldi	r31, 0x06	; 6
     554:	88 e0       	ldi	r24, 0x08	; 8
     556:	80 87       	std	Z+8, r24	; 0x08
	ADC0.CTRLC = ADC_PRESC_DIV16_gc;
     558:	84 e0       	ldi	r24, 0x04	; 4
     55a:	82 83       	std	Z+2, r24	; 0x02
	ADC0.CTRLD = ADC_INITDLY_DLY16_gc;
     55c:	80 e2       	ldi	r24, 0x20	; 32
     55e:	83 83       	std	Z+3, r24	; 0x03
	VREF.ADC0REF = VREF_REFSEL_VDD_gc;
     560:	85 e0       	ldi	r24, 0x05	; 5
     562:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	ADC0.CTRLA = ADC_ENABLE_bm;
     566:	91 e0       	ldi	r25, 0x01	; 1
     568:	90 83       	st	Z, r25
	ADC0.CTRLA &= ~ADC_LEFTADJ_bm;
     56a:	80 81       	ld	r24, Z
     56c:	8f 7e       	andi	r24, 0xEF	; 239
     56e:	80 83       	st	Z, r24
	ADC0.COMMAND = ADC_STCONV_bm;
     570:	92 87       	std	Z+10, r25	; 0x0a
	loop_until_bit_is_clear(ADC0.COMMAND, ADC_STCONV_bp);
     572:	80 91 0a 06 	lds	r24, 0x060A	; 0x80060a <__TEXT_REGION_LENGTH__+0x7e060a>
     576:	80 fd       	sbrc	r24, 0
     578:	fc cf       	rjmp	.-8      	; 0x572 <init_ADC0+0x22>
}
     57a:	08 95       	ret

0000057c <read_voltage_ADC0>:

float read_voltage_ADC0(uint8_t ain) {
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
	// AIN8 is PE0, AIN7 is PD7
	// AIN8 is analog pot, AIN7 is digital pot
	if (ain == ADC_MUXPOS_AIN8_gc || ain == ADC_MUXPOS_AIN7_gc) ADC0.MUXPOS = ain;
     580:	99 ef       	ldi	r25, 0xF9	; 249
     582:	98 0f       	add	r25, r24
     584:	92 30       	cpi	r25, 0x02	; 2
     586:	10 f4       	brcc	.+4      	; 0x58c <read_voltage_ADC0+0x10>
     588:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x7e0608>
	float voltage = (float)(ADC0.RES)/4096 * 3.30;
     58c:	c0 e0       	ldi	r28, 0x00	; 0
     58e:	d6 e0       	ldi	r29, 0x06	; 6
     590:	68 89       	ldd	r22, Y+16	; 0x10
     592:	79 89       	ldd	r23, Y+17	; 0x11
     594:	80 e0       	ldi	r24, 0x00	; 0
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 12 06 	call	0xc24	; 0xc24 <__floatunsisf>
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	40 e8       	ldi	r20, 0x80	; 128
     5a2:	59 e3       	ldi	r21, 0x39	; 57
     5a4:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__mulsf3>
     5a8:	23 e3       	ldi	r18, 0x33	; 51
     5aa:	33 e3       	ldi	r19, 0x33	; 51
     5ac:	43 e5       	ldi	r20, 0x53	; 83
     5ae:	50 e4       	ldi	r21, 0x40	; 64
     5b0:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__mulsf3>
	ADC0.COMMAND = ADC_STCONV_bm;
     5b4:	21 e0       	ldi	r18, 0x01	; 1
     5b6:	2a 87       	std	Y+10, r18	; 0x0a
	return voltage;
}
     5b8:	df 91       	pop	r29
     5ba:	cf 91       	pop	r28
     5bc:	08 95       	ret

000005be <read_voltage_DigitalPot>:

float read_voltage_DigitalPot(void) {
	return read_voltage_ADC0(ADC_MUXPOS_AIN8_gc);
     5be:	88 e0       	ldi	r24, 0x08	; 8
     5c0:	0e 94 be 02 	call	0x57c	; 0x57c <read_voltage_ADC0>
}
     5c4:	08 95       	ret

000005c6 <read_voltage_AnalogPot>:

float read_voltage_AnalogPot(void) {
	return read_voltage_ADC0(ADC_MUXPOS_AIN7_gc);
     5c6:	87 e0       	ldi	r24, 0x07	; 7
     5c8:	0e 94 be 02 	call	0x57c	; 0x57c <read_voltage_ADC0>
}
     5cc:	08 95       	ret

000005ce <init_TCA0>:

//---------------------Timer A0 (TCA0)---------------------
void init_TCA0(void) {
	// initialize timer A0 with period of 1ms
	TCA0.SINGLE.CTRLB = TCA_SINGLE_WGMODE_NORMAL_gc;
     5ce:	e0 e0       	ldi	r30, 0x00	; 0
     5d0:	fa e0       	ldi	r31, 0x0A	; 10
     5d2:	11 82       	std	Z+1, r1	; 0x01
	TCA0.SINGLE.PER = 249;
     5d4:	89 ef       	ldi	r24, 0xF9	; 249
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	86 a3       	std	Z+38, r24	; 0x26
     5da:	97 a3       	std	Z+39, r25	; 0x27
	TCA0.SINGLE.INTCTRL = TCA_SINGLE_OVF_bm;
     5dc:	81 e0       	ldi	r24, 0x01	; 1
     5de:	82 87       	std	Z+10, r24	; 0x0a
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm);
     5e0:	80 81       	ld	r24, Z
     5e2:	8b 60       	ori	r24, 0x0B	; 11
     5e4:	80 83       	st	Z, r24
     5e6:	08 95       	ret

000005e8 <binary_search>:
}

//---------------------Binary Search Function---------------------
void binary_search(void) {
     5e8:	cf 92       	push	r12
     5ea:	df 92       	push	r13
     5ec:	ef 92       	push	r14
     5ee:	ff 92       	push	r15
     5f0:	0f 93       	push	r16
     5f2:	1f 93       	push	r17
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
	uint16_t upper_bound = DIGIPOT_MAX;
	uint16_t lower_bound = DIGIPOT_MIN;
	uint16_t mid = 0x40;
	
	for (int i = 0; i < 9; i++) {
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	10 e0       	ldi	r17, 0x00	; 0

//---------------------Binary Search Function---------------------
void binary_search(void) {
	uint16_t upper_bound = DIGIPOT_MAX;
	uint16_t lower_bound = DIGIPOT_MIN;
	uint16_t mid = 0x40;
     5fc:	c0 e4       	ldi	r28, 0x40	; 64
     5fe:	d0 e0       	ldi	r29, 0x00	; 0
}

//---------------------Binary Search Function---------------------
void binary_search(void) {
	uint16_t upper_bound = DIGIPOT_MAX;
	uint16_t lower_bound = DIGIPOT_MIN;
     600:	e1 2c       	mov	r14, r1
     602:	f1 2c       	mov	r15, r1
	TCA0.SINGLE.CTRLA |= (TCA_SINGLE_CLKSEL_DIV64_gc | TCA_SINGLE_ENABLE_bm);
}

//---------------------Binary Search Function---------------------
void binary_search(void) {
	uint16_t upper_bound = DIGIPOT_MAX;
     604:	68 94       	set
     606:	cc 24       	eor	r12, r12
     608:	c7 f8       	bld	r12, 7
     60a:	d1 2c       	mov	r13, r1
	uint16_t lower_bound = DIGIPOT_MIN;
	uint16_t mid = 0x40;
	
	for (int i = 0; i < 9; i++) {
     60c:	21 c0       	rjmp	.+66     	; 0x650 <binary_search+0x68>
		(void)SPI_MCP4131_RTX(0x00, 0x00, mid);
     60e:	ae 01       	movw	r20, r28
     610:	60 e0       	ldi	r22, 0x00	; 0
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_MCP4131_RTX>
			
		if (read_AC0()) {
     618:	0e 94 9f 02 	call	0x53e	; 0x53e <read_AC0>
     61c:	89 2b       	or	r24, r25
     61e:	29 f0       	breq	.+10     	; 0x62a <binary_search+0x42>
			// if digital < analog
			upper_bound = mid + 0x01;
     620:	6e 01       	movw	r12, r28
     622:	8f ef       	ldi	r24, 0xFF	; 255
     624:	c8 1a       	sub	r12, r24
     626:	d8 0a       	sbc	r13, r24
     628:	0a c0       	rjmp	.+20     	; 0x63e <binary_search+0x56>
				
		} else {
			// if digital > analog
			lower_bound = mid > 0x01 ? mid - 0x01 : 0x00;
     62a:	c2 30       	cpi	r28, 0x02	; 2
     62c:	d1 05       	cpc	r29, r1
     62e:	28 f0       	brcs	.+10     	; 0x63a <binary_search+0x52>
     630:	7e 01       	movw	r14, r28
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	e8 1a       	sub	r14, r24
     636:	f1 08       	sbc	r15, r1
     638:	02 c0       	rjmp	.+4      	; 0x63e <binary_search+0x56>
     63a:	e1 2c       	mov	r14, r1
     63c:	f1 2c       	mov	r15, r1
		}
			
		mid = lower_bound + ((upper_bound - lower_bound) / 2);
     63e:	e6 01       	movw	r28, r12
     640:	ce 19       	sub	r28, r14
     642:	df 09       	sbc	r29, r15
     644:	d6 95       	lsr	r29
     646:	c7 95       	ror	r28
     648:	ce 0d       	add	r28, r14
     64a:	df 1d       	adc	r29, r15
void binary_search(void) {
	uint16_t upper_bound = DIGIPOT_MAX;
	uint16_t lower_bound = DIGIPOT_MIN;
	uint16_t mid = 0x40;
	
	for (int i = 0; i < 9; i++) {
     64c:	0f 5f       	subi	r16, 0xFF	; 255
     64e:	1f 4f       	sbci	r17, 0xFF	; 255
     650:	09 30       	cpi	r16, 0x09	; 9
     652:	11 05       	cpc	r17, r1
     654:	e4 f2       	brlt	.-72     	; 0x60e <binary_search+0x26>
			lower_bound = mid > 0x01 ? mid - 0x01 : 0x00;
		}
			
		mid = lower_bound + ((upper_bound - lower_bound) / 2);
	}
}
     656:	df 91       	pop	r29
     658:	cf 91       	pop	r28
     65a:	1f 91       	pop	r17
     65c:	0f 91       	pop	r16
     65e:	ff 90       	pop	r15
     660:	ef 90       	pop	r14
     662:	df 90       	pop	r13
     664:	cf 90       	pop	r12
     666:	08 95       	ret

00000668 <main>:
float V_delta = 0.005;
float V_analog = 0.00;
float V_digital = 0.00;

int main(void)
{
     668:	cf 93       	push	r28
     66a:	df 93       	push	r29
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	26 97       	sbiw	r28, 0x06	; 6
     672:	cd bf       	out	0x3d, r28	; 61
     674:	de bf       	out	0x3e, r29	; 62
    /* Replace with your application code */
	// ^ shut up
	
	// initialize everything
	init_clock();
     676:	0e 94 58 02 	call	0x4b0	; 0x4b0 <init_clock>
	init_TCA0();
     67a:	0e 94 e7 02 	call	0x5ce	; 0x5ce <init_TCA0>
	init_ADC0();
     67e:	0e 94 a8 02 	call	0x550	; 0x550 <init_ADC0>
	init_AC0();
     682:	0e 94 98 02 	call	0x530	; 0x530 <init_AC0>
	SPI_Master_init();
     686:	0e 94 66 02 	call	0x4cc	; 0x4cc <SPI_Master_init>
	
	LCDinitialize();
     68a:	0e 94 84 01 	call	0x308	; 0x308 <LCDinitialize>
	uart_init(3, 9600, NULL);
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	40 e8       	ldi	r20, 0x80	; 128
     694:	55 e2       	ldi	r21, 0x25	; 37
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	70 e0       	ldi	r23, 0x00	; 0
     69a:	83 e0       	ldi	r24, 0x03	; 3
     69c:	0e 94 84 05 	call	0xb08	; 0xb08 <uart_init>
	
	sei();
     6a0:	78 94       	sei
	// enable interrupts and check init worked
	printf("init done\n");
     6a2:	83 e2       	ldi	r24, 0x23	; 35
     6a4:	90 e4       	ldi	r25, 0x40	; 64
     6a6:	0e 94 d4 07 	call	0xfa8	; 0xfa8 <puts>
    while (1) 
    {
		if (millis >= 500) {
     6aa:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <millis>
     6ae:	90 91 6b 40 	lds	r25, 0x406B	; 0x80406b <millis+0x1>
     6b2:	84 3f       	cpi	r24, 0xF4	; 244
     6b4:	91 40       	sbci	r25, 0x01	; 1
     6b6:	c8 f3       	brcs	.-14     	; 0x6aa <main+0x42>
			millis = 0;
     6b8:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <millis>
     6bc:	10 92 6b 40 	sts	0x406B, r1	; 0x80406b <millis+0x1>
			LCDclr();
     6c0:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCDclr>

			// get the voltage from the analog pot
			V_analog = read_voltage_AnalogPot();
     6c4:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <read_voltage_AnalogPot>
     6c8:	60 93 66 40 	sts	0x4066, r22	; 0x804066 <V_analog>
     6cc:	70 93 67 40 	sts	0x4067, r23	; 0x804067 <V_analog+0x1>
     6d0:	80 93 68 40 	sts	0x4068, r24	; 0x804068 <V_analog+0x2>
     6d4:	90 93 69 40 	sts	0x4069, r25	; 0x804069 <V_analog+0x3>
			V_delta = V_analog;
     6d8:	60 93 00 40 	sts	0x4000, r22	; 0x804000 <__DATA_REGION_ORIGIN__>
     6dc:	70 93 01 40 	sts	0x4001, r23	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     6e0:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     6e4:	90 93 03 40 	sts	0x4003, r25	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
			char strbuf[6];
			dtostrf(V_analog, 2, 4, strbuf);
     6e8:	9e 01       	movw	r18, r28
     6ea:	2f 5f       	subi	r18, 0xFF	; 255
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	79 01       	movw	r14, r18
     6f0:	89 01       	movw	r16, r18
     6f2:	24 e0       	ldi	r18, 0x04	; 4
     6f4:	42 e0       	ldi	r20, 0x02	; 2
     6f6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <dtostrf>
			printf("VA:%s\t|\t", strbuf);	
     6fa:	ff 92       	push	r15
     6fc:	ef 92       	push	r14
     6fe:	8d e2       	ldi	r24, 0x2D	; 45
     700:	90 e4       	ldi	r25, 0x40	; 64
     702:	9f 93       	push	r25
     704:	8f 93       	push	r24
     706:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			
			LCDstring("A_Pot: ");
     70a:	86 e3       	ldi	r24, 0x36	; 54
     70c:	90 e4       	ldi	r25, 0x40	; 64
     70e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
			LCDstring(strbuf);
     712:	c7 01       	movw	r24, r14
     714:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
			LCDstring("V");
     718:	8e e3       	ldi	r24, 0x3E	; 62
     71a:	90 e4       	ldi	r25, 0x40	; 64
     71c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
						

			printf("MID: ");
     720:	80 e4       	ldi	r24, 0x40	; 64
     722:	90 e4       	ldi	r25, 0x40	; 64
     724:	9f 93       	push	r25
     726:	8f 93       	push	r24
     728:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			uint16_t spi_mid = SPI_MCP4131_RTX(0x00, 0b11, 0xff);
     72c:	4f ef       	ldi	r20, 0xFF	; 255
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	63 e0       	ldi	r22, 0x03	; 3
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	0e 94 71 02 	call	0x4e2	; 0x4e2 <SPI_MCP4131_RTX>
     738:	d8 2e       	mov	r13, r24
			printf_reg8(spi_mid >> 8);
     73a:	80 e0       	ldi	r24, 0x00	; 0
     73c:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <printf_reg8>
			printf_reg8((uint8_t)(spi_mid & 0x00ff));
     740:	8d 2d       	mov	r24, r13
     742:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <printf_reg8>
			printf("\t|\t");
     746:	0f 2e       	mov	r0, r31
     748:	f2 e3       	ldi	r31, 0x32	; 50
     74a:	cf 2e       	mov	r12, r31
     74c:	f0 e4       	ldi	r31, 0x40	; 64
     74e:	df 2e       	mov	r13, r31
     750:	f0 2d       	mov	r31, r0
     752:	df 92       	push	r13
     754:	cf 92       	push	r12
     756:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			
			
			V_digital = read_voltage_DigitalPot();
     75a:	0e 94 df 02 	call	0x5be	; 0x5be <read_voltage_DigitalPot>
     75e:	60 93 62 40 	sts	0x4062, r22	; 0x804062 <__data_end>
     762:	70 93 63 40 	sts	0x4063, r23	; 0x804063 <__data_end+0x1>
     766:	80 93 64 40 	sts	0x4064, r24	; 0x804064 <__data_end+0x2>
     76a:	90 93 65 40 	sts	0x4065, r25	; 0x804065 <__data_end+0x3>
			dtostrf(V_digital, 2, 4, strbuf);
     76e:	24 e0       	ldi	r18, 0x04	; 4
     770:	42 e0       	ldi	r20, 0x02	; 2
     772:	0e 94 58 07 	call	0xeb0	; 0xeb0 <dtostrf>
			printf("VD:%s", strbuf);
     776:	ff 92       	push	r15
     778:	ef 92       	push	r14
     77a:	86 e4       	ldi	r24, 0x46	; 70
     77c:	90 e4       	ldi	r25, 0x40	; 64
     77e:	9f 93       	push	r25
     780:	8f 93       	push	r24
     782:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			printf("\t|\t");
     786:	df 92       	push	r13
     788:	cf 92       	push	r12
     78a:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			
			LCDgotoXY(0, 1);
     78e:	61 e0       	ldi	r22, 0x01	; 1
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <LCDgotoXY>
			LCDstring("D_Pot: ");
     796:	8c e4       	ldi	r24, 0x4C	; 76
     798:	90 e4       	ldi	r25, 0x40	; 64
     79a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
			LCDstring(strbuf);
     79e:	c7 01       	movw	r24, r14
     7a0:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
			LCDstring("V");
     7a4:	8e e3       	ldi	r24, 0x3E	; 62
     7a6:	90 e4       	ldi	r25, 0x40	; 64
     7a8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <LCDstring>
			
			
			V_delta -= V_digital;
     7ac:	20 91 62 40 	lds	r18, 0x4062	; 0x804062 <__data_end>
     7b0:	30 91 63 40 	lds	r19, 0x4063	; 0x804063 <__data_end+0x1>
     7b4:	40 91 64 40 	lds	r20, 0x4064	; 0x804064 <__data_end+0x2>
     7b8:	50 91 65 40 	lds	r21, 0x4065	; 0x804065 <__data_end+0x3>
     7bc:	60 91 00 40 	lds	r22, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     7c0:	70 91 01 40 	lds	r23, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     7c4:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     7c8:	90 91 03 40 	lds	r25, 0x4003	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
     7cc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <__subsf3>
			V_delta = fabs(V_delta);
     7d0:	9f 77       	andi	r25, 0x7F	; 127
     7d2:	60 93 00 40 	sts	0x4000, r22	; 0x804000 <__DATA_REGION_ORIGIN__>
     7d6:	70 93 01 40 	sts	0x4001, r23	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     7da:	80 93 02 40 	sts	0x4002, r24	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     7de:	90 93 03 40 	sts	0x4003, r25	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
			
			dtostrf(V_delta, 2, 4, strbuf);
     7e2:	24 e0       	ldi	r18, 0x04	; 4
     7e4:	42 e0       	ldi	r20, 0x02	; 2
     7e6:	0e 94 58 07 	call	0xeb0	; 0xeb0 <dtostrf>
			printf("dV:%s", strbuf);
     7ea:	ff 92       	push	r15
     7ec:	ef 92       	push	r14
     7ee:	84 e5       	ldi	r24, 0x54	; 84
     7f0:	90 e4       	ldi	r25, 0x40	; 64
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	0e 94 ba 07 	call	0xf74	; 0xf74 <printf>
			printf("\n");
     7fa:	8a e0       	ldi	r24, 0x0A	; 10
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 ce 07 	call	0xf9c	; 0xf9c <putchar>
			
			if (V_delta > 0.02) {
     802:	60 91 00 40 	lds	r22, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     806:	70 91 01 40 	lds	r23, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     80a:	80 91 02 40 	lds	r24, 0x4002	; 0x804002 <__DATA_REGION_ORIGIN__+0x2>
     80e:	90 91 03 40 	lds	r25, 0x4003	; 0x804003 <__DATA_REGION_ORIGIN__+0x3>
     812:	cd bf       	out	0x3d, r28	; 61
     814:	de bf       	out	0x3e, r29	; 62
     816:	2a e0       	ldi	r18, 0x0A	; 10
     818:	37 ed       	ldi	r19, 0xD7	; 215
     81a:	43 ea       	ldi	r20, 0xA3	; 163
     81c:	5c e3       	ldi	r21, 0x3C	; 60
     81e:	0e 94 a0 06 	call	0xd40	; 0xd40 <__gesf2>
     822:	18 16       	cp	r1, r24
     824:	0c f0       	brlt	.+2      	; 0x828 <main+0x1c0>
     826:	41 cf       	rjmp	.-382    	; 0x6aa <main+0x42>
				binary_search();
     828:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <binary_search>
     82c:	3e cf       	rjmp	.-388    	; 0x6aa <main+0x42>

0000082e <__vector_9>:
			}
		}
    }
}

ISR(TCA0_OVF_vect) {
     82e:	1f 92       	push	r1
     830:	0f 92       	push	r0
     832:	0f b6       	in	r0, 0x3f	; 63
     834:	0f 92       	push	r0
     836:	11 24       	eor	r1, r1
     838:	0b b6       	in	r0, 0x3b	; 59
     83a:	0f 92       	push	r0
     83c:	2f 93       	push	r18
     83e:	8f 93       	push	r24
     840:	9f 93       	push	r25
     842:	ef 93       	push	r30
     844:	ff 93       	push	r31
	if (millis < UINT16_MAX) millis++;
     846:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <millis>
     84a:	90 91 6b 40 	lds	r25, 0x406B	; 0x80406b <millis+0x1>
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	49 f0       	breq	.+18     	; 0x864 <__vector_9+0x36>
     852:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <millis>
     856:	90 91 6b 40 	lds	r25, 0x406B	; 0x80406b <millis+0x1>
     85a:	01 96       	adiw	r24, 0x01	; 1
     85c:	80 93 6a 40 	sts	0x406A, r24	; 0x80406a <millis>
     860:	90 93 6b 40 	sts	0x406B, r25	; 0x80406b <millis+0x1>
	TCA0.SINGLE.INTFLAGS |= TCA_SINGLE_OVF_bm;
     864:	e0 e0       	ldi	r30, 0x00	; 0
     866:	fa e0       	ldi	r31, 0x0A	; 10
     868:	83 85       	ldd	r24, Z+11	; 0x0b
     86a:	81 60       	ori	r24, 0x01	; 1
     86c:	83 87       	std	Z+11, r24	; 0x0b
}
     86e:	ff 91       	pop	r31
     870:	ef 91       	pop	r30
     872:	9f 91       	pop	r25
     874:	8f 91       	pop	r24
     876:	2f 91       	pop	r18
     878:	0f 90       	pop	r0
     87a:	0b be       	out	0x3b, r0	; 59
     87c:	0f 90       	pop	r0
     87e:	0f be       	out	0x3f, r0	; 63
     880:	0f 90       	pop	r0
     882:	1f 90       	pop	r1
     884:	18 95       	reti

00000886 <usart_init>:
#include "uart.h"

#define SMPL 16

void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
    USART_t* usart;

    if (usartnum == 0) {
     88a:	81 11       	cpse	r24, r1
     88c:	06 c0       	rjmp	.+12     	; 0x89a <usart_init+0x14>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
     894:	c0 e0       	ldi	r28, 0x00	; 0
     896:	d8 e0       	ldi	r29, 0x08	; 8
     898:	19 c0       	rjmp	.+50     	; 0x8cc <usart_init+0x46>
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
     89a:	81 30       	cpi	r24, 0x01	; 1
     89c:	29 f4       	brne	.+10     	; 0x8a8 <usart_init+0x22>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
     89e:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        usart = &USART0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
     8a2:	c0 e2       	ldi	r28, 0x20	; 32
     8a4:	d8 e0       	ldi	r29, 0x08	; 8
     8a6:	12 c0       	rjmp	.+36     	; 0x8cc <usart_init+0x46>
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
     8a8:	82 30       	cpi	r24, 0x02	; 2
     8aa:	31 f4       	brne	.+12     	; 0x8b8 <usart_init+0x32>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
     8ac:	81 e0       	ldi	r24, 0x01	; 1
     8ae:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        usart = &USART1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
     8b2:	c0 e4       	ldi	r28, 0x40	; 64
     8b4:	d8 e0       	ldi	r29, 0x08	; 8
     8b6:	0a c0       	rjmp	.+20     	; 0x8cc <usart_init+0x46>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	31 f4       	brne	.+12     	; 0x8c8 <usart_init+0x42>
        usart = &USART3;
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
     8bc:	81 e0       	ldi	r24, 0x01	; 1
     8be:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        usart = &USART2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
    else if (usartnum == 3) {
        usart = &USART3;
     8c2:	c0 e6       	ldi	r28, 0x60	; 96
     8c4:	d8 e0       	ldi	r29, 0x08	; 8
     8c6:	02 c0       	rjmp	.+4      	; 0x8cc <usart_init+0x46>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    } 
    else {
        usart = NULL;
     8c8:	c0 e0       	ldi	r28, 0x00	; 0
     8ca:	d0 e0       	ldi	r29, 0x00	; 0
    }

    // set BAUD and CTRLB registers
	// make sure to cast the BAUD to uint16_t before assigning
	usart->BAUD = (uint16_t)( (64 * F_CPU) / (SMPL * baud_rate) );
     8cc:	db 01       	movw	r26, r22
     8ce:	ca 01       	movw	r24, r20
     8d0:	88 0f       	add	r24, r24
     8d2:	99 1f       	adc	r25, r25
     8d4:	aa 1f       	adc	r26, r26
     8d6:	bb 1f       	adc	r27, r27
     8d8:	88 0f       	add	r24, r24
     8da:	99 1f       	adc	r25, r25
     8dc:	aa 1f       	adc	r26, r26
     8de:	bb 1f       	adc	r27, r27
     8e0:	9c 01       	movw	r18, r24
     8e2:	ad 01       	movw	r20, r26
     8e4:	22 0f       	add	r18, r18
     8e6:	33 1f       	adc	r19, r19
     8e8:	44 1f       	adc	r20, r20
     8ea:	55 1f       	adc	r21, r21
     8ec:	22 0f       	add	r18, r18
     8ee:	33 1f       	adc	r19, r19
     8f0:	44 1f       	adc	r20, r20
     8f2:	55 1f       	adc	r21, r21
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	89 e0       	ldi	r24, 0x09	; 9
     8fa:	9d e3       	ldi	r25, 0x3D	; 61
     8fc:	0e 94 36 07 	call	0xe6c	; 0xe6c <__udivmodsi4>
     900:	28 87       	std	Y+8, r18	; 0x08
     902:	39 87       	std	Y+9, r19	; 0x09
	usart->CTRLB |= USART_RXEN_bm | USART_TXEN_bm;
     904:	8e 81       	ldd	r24, Y+6	; 0x06
     906:	80 6c       	ori	r24, 0xC0	; 192
     908:	8e 83       	std	Y+6, r24	; 0x06
    return usart;
}
     90a:	ce 01       	movw	r24, r28
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <usart_transmit_data>:

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    // TODO send data
	usart->TXDATAL = c;
     912:	fc 01       	movw	r30, r24
     914:	62 83       	std	Z+2, r22	; 0x02
     916:	08 95       	ret

00000918 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
     918:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until UART is ready to transmit
	while ( !(usart->STATUS & USART_DREIF_bm) );
     91a:	94 81       	ldd	r25, Z+4	; 0x04
     91c:	95 ff       	sbrs	r25, 5
     91e:	fd cf       	rjmp	.-6      	; 0x91a <usart_wait_until_transmit_ready+0x2>
}
     920:	08 95       	ret

00000922 <usart_receive_data>:

int usart_receive_data(void* ptr)
{
     922:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    // TODO wait until data has arrived and then return the data
	while ( !(usart->STATUS & USART_RXCIF_bm) );
     924:	94 81       	ldd	r25, Z+4	; 0x04
     926:	99 23       	and	r25, r25
     928:	ec f7       	brge	.-6      	; 0x924 <usart_receive_data+0x2>
	return (usart->RXDATAL);
     92a:	80 81       	ld	r24, Z
     92c:	90 e0       	ldi	r25, 0x00	; 0
     92e:	08 95       	ret

00000930 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	c8 2f       	mov	r28, r24
     938:	8b 01       	movw	r16, r22
	if (c == '\a') {
     93a:	87 30       	cpi	r24, 0x07	; 7
     93c:	69 f4       	brne	.+26     	; 0x958 <uart_putchar+0x28>
		fputs("*ring*\n", stderr);
     93e:	20 91 c2 40 	lds	r18, 0x40C2	; 0x8040c2 <__iob+0x4>
     942:	30 91 c3 40 	lds	r19, 0x40C3	; 0x8040c3 <__iob+0x5>
     946:	47 e0       	ldi	r20, 0x07	; 7
     948:	50 e0       	ldi	r21, 0x00	; 0
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	70 e0       	ldi	r23, 0x00	; 0
     94e:	8a e5       	ldi	r24, 0x5A	; 90
     950:	90 e4       	ldi	r25, 0x40	; 64
     952:	0e 94 78 07 	call	0xef0	; 0xef0 <fwrite>
		return 0;
     956:	0f c0       	rjmp	.+30     	; 0x976 <uart_putchar+0x46>
	}

	if (c == '\n') {
     958:	8a 30       	cpi	r24, 0x0A	; 10
     95a:	19 f4       	brne	.+6      	; 0x962 <uart_putchar+0x32>
		uart_putchar('\r', stream);
     95c:	8d e0       	ldi	r24, 0x0D	; 13
     95e:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
	}

	void* usart = fdev_get_udata(stream);
     962:	f8 01       	movw	r30, r16
     964:	04 85       	ldd	r16, Z+12	; 0x0c
     966:	15 85       	ldd	r17, Z+13	; 0x0d
	usart_wait_until_transmit_ready(usart);
     968:	c8 01       	movw	r24, r16
     96a:	0e 94 8c 04 	call	0x918	; 0x918 <usart_wait_until_transmit_ready>
	usart_transmit_data(usart, c);
     96e:	6c 2f       	mov	r22, r28
     970:	c8 01       	movw	r24, r16
     972:	0e 94 89 04 	call	0x912	; 0x912 <usart_transmit_data>

	return 0;
}
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	cf 91       	pop	r28
     97c:	1f 91       	pop	r17
     97e:	0f 91       	pop	r16
     980:	08 95       	ret

00000982 <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
	uint8_t c;
	char *cp, *cp2;
	static char b[RX_BUFSIZE];
	static char *rxp;

	if (rxp == 0) {
     98e:	20 91 bc 40 	lds	r18, 0x40BC	; 0x8040bc <rxp.1995>
     992:	30 91 bd 40 	lds	r19, 0x40BD	; 0x8040bd <rxp.1995+0x1>
     996:	23 2b       	or	r18, r19
     998:	09 f0       	breq	.+2      	; 0x99c <uart_getchar+0x1a>
     99a:	9a c0       	rjmp	.+308    	; 0xad0 <uart_getchar+0x14e>
     99c:	8c 01       	movw	r16, r24
     99e:	cc e6       	ldi	r28, 0x6C	; 108
     9a0:	d0 e4       	ldi	r29, 0x40	; 64
		for (cp = b;;) {
			void* usart = fdev_get_udata(stream);
			c = usart_receive_data(usart);
     9a2:	f8 01       	movw	r30, r16
     9a4:	84 85       	ldd	r24, Z+12	; 0x0c
     9a6:	95 85       	ldd	r25, Z+13	; 0x0d
     9a8:	0e 94 91 04 	call	0x922	; 0x922 <usart_receive_data>

			/* behaviour similar to Unix stty ICRNL */
			if (c == '\r')
     9ac:	8d 30       	cpi	r24, 0x0D	; 13
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <uart_getchar+0x30>
				c = '\n';
     9b0:	8a e0       	ldi	r24, 0x0A	; 10
			if (c == '\n') {
     9b2:	8a 30       	cpi	r24, 0x0A	; 10
     9b4:	59 f4       	brne	.+22     	; 0x9cc <uart_getchar+0x4a>
			    *cp = c;
     9b6:	88 83       	st	Y, r24
				uart_putchar(c, stream);
     9b8:	b8 01       	movw	r22, r16
     9ba:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
			    rxp = b;
     9be:	8c e6       	ldi	r24, 0x6C	; 108
     9c0:	90 e4       	ldi	r25, 0x40	; 64
     9c2:	80 93 bc 40 	sts	0x40BC, r24	; 0x8040bc <rxp.1995>
     9c6:	90 93 bd 40 	sts	0x40BD, r25	; 0x8040bd <rxp.1995+0x1>
				break;
     9ca:	82 c0       	rjmp	.+260    	; 0xad0 <uart_getchar+0x14e>
			}
			else if (c == '\t')
     9cc:	89 30       	cpi	r24, 0x09	; 9
     9ce:	09 f4       	brne	.+2      	; 0x9d2 <uart_getchar+0x50>
				c = ' ';
     9d0:	80 e2       	ldi	r24, 0x20	; 32

			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     9d2:	90 ee       	ldi	r25, 0xE0	; 224
     9d4:	98 0f       	add	r25, r24
     9d6:	9f 35       	cpi	r25, 0x5F	; 95
     9d8:	10 f0       	brcs	.+4      	; 0x9de <uart_getchar+0x5c>
     9da:	80 3a       	cpi	r24, 0xA0	; 160
     9dc:	98 f0       	brcs	.+38     	; 0xa04 <uart_getchar+0x82>
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
     9de:	f0 e4       	ldi	r31, 0x40	; 64
     9e0:	cb 3b       	cpi	r28, 0xBB	; 187
     9e2:	df 07       	cpc	r29, r31
     9e4:	29 f4       	brne	.+10     	; 0x9f0 <uart_getchar+0x6e>
					uart_putchar('\a', stream);
     9e6:	b8 01       	movw	r22, r16
     9e8:	87 e0       	ldi	r24, 0x07	; 7
     9ea:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
     9ee:	d9 cf       	rjmp	.-78     	; 0x9a2 <uart_getchar+0x20>
				else {
					*cp++ = c;
     9f0:	7e 01       	movw	r14, r28
     9f2:	9f ef       	ldi	r25, 0xFF	; 255
     9f4:	e9 1a       	sub	r14, r25
     9f6:	f9 0a       	sbc	r15, r25
     9f8:	88 83       	st	Y, r24
					uart_putchar(c, stream);
     9fa:	b8 01       	movw	r22, r16
     9fc:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
			if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
				c >= (uint8_t)'\xa0') {
			    if (cp == b + RX_BUFSIZE - 1)
					uart_putchar('\a', stream);
				else {
					*cp++ = c;
     a00:	e7 01       	movw	r28, r14
					uart_putchar(c, stream);
				}
			    continue;
     a02:	cf cf       	rjmp	.-98     	; 0x9a2 <uart_getchar+0x20>
			}

			switch (c) {
     a04:	82 31       	cpi	r24, 0x12	; 18
     a06:	19 f1       	breq	.+70     	; 0xa4e <uart_getchar+0xcc>
     a08:	30 f4       	brcc	.+12     	; 0xa16 <uart_getchar+0x94>
     a0a:	83 30       	cpi	r24, 0x03	; 3
     a0c:	09 f4       	brne	.+2      	; 0xa10 <uart_getchar+0x8e>
     a0e:	73 c0       	rjmp	.+230    	; 0xaf6 <uart_getchar+0x174>
     a10:	88 30       	cpi	r24, 0x08	; 8
     a12:	49 f0       	breq	.+18     	; 0xa26 <uart_getchar+0xa4>
     a14:	c6 cf       	rjmp	.-116    	; 0x9a2 <uart_getchar+0x20>
     a16:	87 31       	cpi	r24, 0x17	; 23
     a18:	09 f4       	brne	.+2      	; 0xa1c <uart_getchar+0x9a>
     a1a:	4e c0       	rjmp	.+156    	; 0xab8 <uart_getchar+0x136>
     a1c:	8f 37       	cpi	r24, 0x7F	; 127
     a1e:	19 f0       	breq	.+6      	; 0xa26 <uart_getchar+0xa4>
     a20:	85 31       	cpi	r24, 0x15	; 21
     a22:	b9 f1       	breq	.+110    	; 0xa92 <uart_getchar+0x110>
     a24:	be cf       	rjmp	.-132    	; 0x9a2 <uart_getchar+0x20>
				case 'c' & 0x1f:
				    return -1;

				case '\b':
				case '\x7f':
				    if (cp > b) {
     a26:	e0 e4       	ldi	r30, 0x40	; 64
     a28:	cc 36       	cpi	r28, 0x6C	; 108
     a2a:	de 07       	cpc	r29, r30
     a2c:	09 f0       	breq	.+2      	; 0xa30 <uart_getchar+0xae>
     a2e:	08 f4       	brcc	.+2      	; 0xa32 <uart_getchar+0xb0>
     a30:	b8 cf       	rjmp	.-144    	; 0x9a2 <uart_getchar+0x20>
						uart_putchar('\b', stream);
     a32:	b8 01       	movw	r22, r16
     a34:	88 e0       	ldi	r24, 0x08	; 8
     a36:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar(' ', stream);
     a3a:	b8 01       	movw	r22, r16
     a3c:	80 e2       	ldi	r24, 0x20	; 32
     a3e:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar('\b', stream);
     a42:	b8 01       	movw	r22, r16
     a44:	88 e0       	ldi	r24, 0x08	; 8
     a46:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						cp--;
     a4a:	21 97       	sbiw	r28, 0x01	; 1
     a4c:	aa cf       	rjmp	.-172    	; 0x9a2 <uart_getchar+0x20>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
     a4e:	b8 01       	movw	r22, r16
     a50:	8d e0       	ldi	r24, 0x0D	; 13
     a52:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
					for (cp2 = b; cp2 < cp; cp2++)
     a56:	0f 2e       	mov	r0, r31
     a58:	fc e6       	ldi	r31, 0x6C	; 108
     a5a:	ef 2e       	mov	r14, r31
     a5c:	f0 e4       	ldi	r31, 0x40	; 64
     a5e:	ff 2e       	mov	r15, r31
     a60:	f0 2d       	mov	r31, r0
     a62:	06 c0       	rjmp	.+12     	; 0xa70 <uart_getchar+0xee>
						uart_putchar(*cp2, stream);
     a64:	b8 01       	movw	r22, r16
     a66:	f7 01       	movw	r30, r14
     a68:	81 91       	ld	r24, Z+
     a6a:	7f 01       	movw	r14, r30
     a6c:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
					}
					break;

				case 'r' & 0x1f:
					uart_putchar('\r', stream);
					for (cp2 = b; cp2 < cp; cp2++)
     a70:	ec 16       	cp	r14, r28
     a72:	fd 06       	cpc	r15, r29
     a74:	b8 f3       	brcs	.-18     	; 0xa64 <uart_getchar+0xe2>
     a76:	95 cf       	rjmp	.-214    	; 0x9a2 <uart_getchar+0x20>
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
						uart_putchar('\b', stream);
     a78:	b8 01       	movw	r22, r16
     a7a:	88 e0       	ldi	r24, 0x08	; 8
     a7c:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar(' ', stream);
     a80:	b8 01       	movw	r22, r16
     a82:	80 e2       	ldi	r24, 0x20	; 32
     a84:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar('\b', stream);
     a88:	b8 01       	movw	r22, r16
     a8a:	88 e0       	ldi	r24, 0x08	; 8
     a8c:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						cp--;
     a90:	21 97       	sbiw	r28, 0x01	; 1
					for (cp2 = b; cp2 < cp; cp2++)
						uart_putchar(*cp2, stream);
					break;

				case 'u' & 0x1f:
					while (cp > b) {
     a92:	f0 e4       	ldi	r31, 0x40	; 64
     a94:	cc 36       	cpi	r28, 0x6C	; 108
     a96:	df 07       	cpc	r29, r31
     a98:	09 f0       	breq	.+2      	; 0xa9c <uart_getchar+0x11a>
     a9a:	70 f7       	brcc	.-36     	; 0xa78 <uart_getchar+0xf6>
     a9c:	82 cf       	rjmp	.-252    	; 0x9a2 <uart_getchar+0x20>
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
						uart_putchar('\b', stream);
     a9e:	b8 01       	movw	r22, r16
     aa0:	88 e0       	ldi	r24, 0x08	; 8
     aa2:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar(' ', stream);
     aa6:	b8 01       	movw	r22, r16
     aa8:	80 e2       	ldi	r24, 0x20	; 32
     aaa:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						uart_putchar('\b', stream);
     aae:	b8 01       	movw	r22, r16
     ab0:	88 e0       	ldi	r24, 0x08	; 8
     ab2:	0e 94 98 04 	call	0x930	; 0x930 <uart_putchar>
						cp--;
     ab6:	21 97       	sbiw	r28, 0x01	; 1
						cp--;
					}
					break;

				case 'w' & 0x1f:
					while (cp > b && cp[-1] != ' ') {
     ab8:	80 e4       	ldi	r24, 0x40	; 64
     aba:	cc 36       	cpi	r28, 0x6C	; 108
     abc:	d8 07       	cpc	r29, r24
     abe:	09 f0       	breq	.+2      	; 0xac2 <uart_getchar+0x140>
     ac0:	08 f4       	brcc	.+2      	; 0xac4 <uart_getchar+0x142>
     ac2:	6f cf       	rjmp	.-290    	; 0x9a2 <uart_getchar+0x20>
     ac4:	fe 01       	movw	r30, r28
     ac6:	31 97       	sbiw	r30, 0x01	; 1
     ac8:	80 81       	ld	r24, Z
     aca:	80 32       	cpi	r24, 0x20	; 32
     acc:	41 f7       	brne	.-48     	; 0xa9e <uart_getchar+0x11c>
     ace:	69 cf       	rjmp	.-302    	; 0x9a2 <uart_getchar+0x20>
					break;
			}
		}
	}

	c = *rxp++;
     ad0:	e0 91 bc 40 	lds	r30, 0x40BC	; 0x8040bc <rxp.1995>
     ad4:	f0 91 bd 40 	lds	r31, 0x40BD	; 0x8040bd <rxp.1995+0x1>
     ad8:	cf 01       	movw	r24, r30
     ada:	01 96       	adiw	r24, 0x01	; 1
     adc:	80 93 bc 40 	sts	0x40BC, r24	; 0x8040bc <rxp.1995>
     ae0:	90 93 bd 40 	sts	0x40BD, r25	; 0x8040bd <rxp.1995+0x1>
     ae4:	80 81       	ld	r24, Z
	if (c == '\n')
     ae6:	8a 30       	cpi	r24, 0x0A	; 10
     ae8:	21 f4       	brne	.+8      	; 0xaf2 <uart_getchar+0x170>
		rxp = 0;
     aea:	10 92 bc 40 	sts	0x40BC, r1	; 0x8040bc <rxp.1995>
     aee:	10 92 bd 40 	sts	0x40BD, r1	; 0x8040bd <rxp.1995+0x1>

	return c;
     af2:	90 e0       	ldi	r25, 0x00	; 0
     af4:	02 c0       	rjmp	.+4      	; 0xafa <uart_getchar+0x178>
			    continue;
			}

			switch (c) {
				case 'c' & 0x1f:
				    return -1;
     af6:	8f ef       	ldi	r24, 0xFF	; 255
     af8:	9f ef       	ldi	r25, 0xFF	; 255
	c = *rxp++;
	if (c == '\n')
		rxp = 0;

	return c;
}
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	1f 91       	pop	r17
     b00:	0f 91       	pop	r16
     b02:	ff 90       	pop	r15
     b04:	ef 90       	pop	r14
     b06:	08 95       	ret

00000b08 <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	e9 01       	movw	r28, r18
	if (stream) {
     b0e:	20 97       	sbiw	r28, 0x00	; 0
     b10:	49 f0       	breq	.+18     	; 0xb24 <uart_init+0x1c>
		*stream = uartFile;
     b12:	9e e0       	ldi	r25, 0x0E	; 14
     b14:	e4 e0       	ldi	r30, 0x04	; 4
     b16:	f0 e4       	ldi	r31, 0x40	; 64
     b18:	d9 01       	movw	r26, r18
     b1a:	01 90       	ld	r0, Z+
     b1c:	0d 92       	st	X+, r0
     b1e:	9a 95       	dec	r25
     b20:	e1 f7       	brne	.-8      	; 0xb1a <uart_init+0x12>
     b22:	0b c0       	rjmp	.+22     	; 0xb3a <uart_init+0x32>
	} else {
		stdout = &uartFile;
     b24:	ee eb       	ldi	r30, 0xBE	; 190
     b26:	f0 e4       	ldi	r31, 0x40	; 64
     b28:	24 e0       	ldi	r18, 0x04	; 4
     b2a:	30 e4       	ldi	r19, 0x40	; 64
     b2c:	22 83       	std	Z+2, r18	; 0x02
     b2e:	33 83       	std	Z+3, r19	; 0x03
		stdin = &uartFile;
     b30:	20 83       	st	Z, r18
     b32:	31 83       	std	Z+1, r19	; 0x01
		stderr = &uartFile;
     b34:	24 83       	std	Z+4, r18	; 0x04
     b36:	35 83       	std	Z+5, r19	; 0x05
		stream = &uartFile;
     b38:	e9 01       	movw	r28, r18
	}

	void* usart = usart_init(usartnum, baud_rate);
     b3a:	0e 94 43 04 	call	0x886	; 0x886 <usart_init>
	fdev_set_udata(stream, usart);
     b3e:	8c 87       	std	Y+12, r24	; 0x0c
     b40:	9d 87       	std	Y+13, r25	; 0x0d
	  
	return stream;
}
     b42:	ce 01       	movw	r24, r28
     b44:	df 91       	pop	r29
     b46:	cf 91       	pop	r28
     b48:	08 95       	ret

00000b4a <__subsf3>:
     b4a:	50 58       	subi	r21, 0x80	; 128

00000b4c <__addsf3>:
     b4c:	bb 27       	eor	r27, r27
     b4e:	aa 27       	eor	r26, r26
     b50:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__addsf3x>
     b54:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_round>
     b58:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_pscA>
     b5c:	38 f0       	brcs	.+14     	; 0xb6c <__addsf3+0x20>
     b5e:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_pscB>
     b62:	20 f0       	brcs	.+8      	; 0xb6c <__addsf3+0x20>
     b64:	39 f4       	brne	.+14     	; 0xb74 <__addsf3+0x28>
     b66:	9f 3f       	cpi	r25, 0xFF	; 255
     b68:	19 f4       	brne	.+6      	; 0xb70 <__addsf3+0x24>
     b6a:	26 f4       	brtc	.+8      	; 0xb74 <__addsf3+0x28>
     b6c:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_nan>
     b70:	0e f4       	brtc	.+2      	; 0xb74 <__addsf3+0x28>
     b72:	e0 95       	com	r30
     b74:	e7 fb       	bst	r30, 7
     b76:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_inf>

00000b7a <__addsf3x>:
     b7a:	e9 2f       	mov	r30, r25
     b7c:	0e 94 77 06 	call	0xcee	; 0xcee <__fp_split3>
     b80:	58 f3       	brcs	.-42     	; 0xb58 <__addsf3+0xc>
     b82:	ba 17       	cp	r27, r26
     b84:	62 07       	cpc	r22, r18
     b86:	73 07       	cpc	r23, r19
     b88:	84 07       	cpc	r24, r20
     b8a:	95 07       	cpc	r25, r21
     b8c:	20 f0       	brcs	.+8      	; 0xb96 <__addsf3x+0x1c>
     b8e:	79 f4       	brne	.+30     	; 0xbae <__addsf3x+0x34>
     b90:	a6 f5       	brtc	.+104    	; 0xbfa <__addsf3x+0x80>
     b92:	0c 94 99 06 	jmp	0xd32	; 0xd32 <__fp_zero>
     b96:	0e f4       	brtc	.+2      	; 0xb9a <__addsf3x+0x20>
     b98:	e0 95       	com	r30
     b9a:	0b 2e       	mov	r0, r27
     b9c:	ba 2f       	mov	r27, r26
     b9e:	a0 2d       	mov	r26, r0
     ba0:	0b 01       	movw	r0, r22
     ba2:	b9 01       	movw	r22, r18
     ba4:	90 01       	movw	r18, r0
     ba6:	0c 01       	movw	r0, r24
     ba8:	ca 01       	movw	r24, r20
     baa:	a0 01       	movw	r20, r0
     bac:	11 24       	eor	r1, r1
     bae:	ff 27       	eor	r31, r31
     bb0:	59 1b       	sub	r21, r25
     bb2:	99 f0       	breq	.+38     	; 0xbda <__addsf3x+0x60>
     bb4:	59 3f       	cpi	r21, 0xF9	; 249
     bb6:	50 f4       	brcc	.+20     	; 0xbcc <__addsf3x+0x52>
     bb8:	50 3e       	cpi	r21, 0xE0	; 224
     bba:	68 f1       	brcs	.+90     	; 0xc16 <__addsf3x+0x9c>
     bbc:	1a 16       	cp	r1, r26
     bbe:	f0 40       	sbci	r31, 0x00	; 0
     bc0:	a2 2f       	mov	r26, r18
     bc2:	23 2f       	mov	r18, r19
     bc4:	34 2f       	mov	r19, r20
     bc6:	44 27       	eor	r20, r20
     bc8:	58 5f       	subi	r21, 0xF8	; 248
     bca:	f3 cf       	rjmp	.-26     	; 0xbb2 <__addsf3x+0x38>
     bcc:	46 95       	lsr	r20
     bce:	37 95       	ror	r19
     bd0:	27 95       	ror	r18
     bd2:	a7 95       	ror	r26
     bd4:	f0 40       	sbci	r31, 0x00	; 0
     bd6:	53 95       	inc	r21
     bd8:	c9 f7       	brne	.-14     	; 0xbcc <__addsf3x+0x52>
     bda:	7e f4       	brtc	.+30     	; 0xbfa <__addsf3x+0x80>
     bdc:	1f 16       	cp	r1, r31
     bde:	ba 0b       	sbc	r27, r26
     be0:	62 0b       	sbc	r22, r18
     be2:	73 0b       	sbc	r23, r19
     be4:	84 0b       	sbc	r24, r20
     be6:	ba f0       	brmi	.+46     	; 0xc16 <__addsf3x+0x9c>
     be8:	91 50       	subi	r25, 0x01	; 1
     bea:	a1 f0       	breq	.+40     	; 0xc14 <__addsf3x+0x9a>
     bec:	ff 0f       	add	r31, r31
     bee:	bb 1f       	adc	r27, r27
     bf0:	66 1f       	adc	r22, r22
     bf2:	77 1f       	adc	r23, r23
     bf4:	88 1f       	adc	r24, r24
     bf6:	c2 f7       	brpl	.-16     	; 0xbe8 <__addsf3x+0x6e>
     bf8:	0e c0       	rjmp	.+28     	; 0xc16 <__addsf3x+0x9c>
     bfa:	ba 0f       	add	r27, r26
     bfc:	62 1f       	adc	r22, r18
     bfe:	73 1f       	adc	r23, r19
     c00:	84 1f       	adc	r24, r20
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__addsf3x+0x9c>
     c04:	87 95       	ror	r24
     c06:	77 95       	ror	r23
     c08:	67 95       	ror	r22
     c0a:	b7 95       	ror	r27
     c0c:	f7 95       	ror	r31
     c0e:	9e 3f       	cpi	r25, 0xFE	; 254
     c10:	08 f0       	brcs	.+2      	; 0xc14 <__addsf3x+0x9a>
     c12:	b0 cf       	rjmp	.-160    	; 0xb74 <__addsf3+0x28>
     c14:	93 95       	inc	r25
     c16:	88 0f       	add	r24, r24
     c18:	08 f0       	brcs	.+2      	; 0xc1c <__addsf3x+0xa2>
     c1a:	99 27       	eor	r25, r25
     c1c:	ee 0f       	add	r30, r30
     c1e:	97 95       	ror	r25
     c20:	87 95       	ror	r24
     c22:	08 95       	ret

00000c24 <__floatunsisf>:
     c24:	e8 94       	clt
     c26:	09 c0       	rjmp	.+18     	; 0xc3a <__floatsisf+0x12>

00000c28 <__floatsisf>:
     c28:	97 fb       	bst	r25, 7
     c2a:	3e f4       	brtc	.+14     	; 0xc3a <__floatsisf+0x12>
     c2c:	90 95       	com	r25
     c2e:	80 95       	com	r24
     c30:	70 95       	com	r23
     c32:	61 95       	neg	r22
     c34:	7f 4f       	sbci	r23, 0xFF	; 255
     c36:	8f 4f       	sbci	r24, 0xFF	; 255
     c38:	9f 4f       	sbci	r25, 0xFF	; 255
     c3a:	99 23       	and	r25, r25
     c3c:	a9 f0       	breq	.+42     	; 0xc68 <__floatsisf+0x40>
     c3e:	f9 2f       	mov	r31, r25
     c40:	96 e9       	ldi	r25, 0x96	; 150
     c42:	bb 27       	eor	r27, r27
     c44:	93 95       	inc	r25
     c46:	f6 95       	lsr	r31
     c48:	87 95       	ror	r24
     c4a:	77 95       	ror	r23
     c4c:	67 95       	ror	r22
     c4e:	b7 95       	ror	r27
     c50:	f1 11       	cpse	r31, r1
     c52:	f8 cf       	rjmp	.-16     	; 0xc44 <__floatsisf+0x1c>
     c54:	fa f4       	brpl	.+62     	; 0xc94 <__floatsisf+0x6c>
     c56:	bb 0f       	add	r27, r27
     c58:	11 f4       	brne	.+4      	; 0xc5e <__floatsisf+0x36>
     c5a:	60 ff       	sbrs	r22, 0
     c5c:	1b c0       	rjmp	.+54     	; 0xc94 <__floatsisf+0x6c>
     c5e:	6f 5f       	subi	r22, 0xFF	; 255
     c60:	7f 4f       	sbci	r23, 0xFF	; 255
     c62:	8f 4f       	sbci	r24, 0xFF	; 255
     c64:	9f 4f       	sbci	r25, 0xFF	; 255
     c66:	16 c0       	rjmp	.+44     	; 0xc94 <__floatsisf+0x6c>
     c68:	88 23       	and	r24, r24
     c6a:	11 f0       	breq	.+4      	; 0xc70 <__floatsisf+0x48>
     c6c:	96 e9       	ldi	r25, 0x96	; 150
     c6e:	11 c0       	rjmp	.+34     	; 0xc92 <__floatsisf+0x6a>
     c70:	77 23       	and	r23, r23
     c72:	21 f0       	breq	.+8      	; 0xc7c <__floatsisf+0x54>
     c74:	9e e8       	ldi	r25, 0x8E	; 142
     c76:	87 2f       	mov	r24, r23
     c78:	76 2f       	mov	r23, r22
     c7a:	05 c0       	rjmp	.+10     	; 0xc86 <__floatsisf+0x5e>
     c7c:	66 23       	and	r22, r22
     c7e:	71 f0       	breq	.+28     	; 0xc9c <__floatsisf+0x74>
     c80:	96 e8       	ldi	r25, 0x86	; 134
     c82:	86 2f       	mov	r24, r22
     c84:	70 e0       	ldi	r23, 0x00	; 0
     c86:	60 e0       	ldi	r22, 0x00	; 0
     c88:	2a f0       	brmi	.+10     	; 0xc94 <__floatsisf+0x6c>
     c8a:	9a 95       	dec	r25
     c8c:	66 0f       	add	r22, r22
     c8e:	77 1f       	adc	r23, r23
     c90:	88 1f       	adc	r24, r24
     c92:	da f7       	brpl	.-10     	; 0xc8a <__floatsisf+0x62>
     c94:	88 0f       	add	r24, r24
     c96:	96 95       	lsr	r25
     c98:	87 95       	ror	r24
     c9a:	97 f9       	bld	r25, 7
     c9c:	08 95       	ret

00000c9e <__fp_inf>:
     c9e:	97 f9       	bld	r25, 7
     ca0:	9f 67       	ori	r25, 0x7F	; 127
     ca2:	80 e8       	ldi	r24, 0x80	; 128
     ca4:	70 e0       	ldi	r23, 0x00	; 0
     ca6:	60 e0       	ldi	r22, 0x00	; 0
     ca8:	08 95       	ret

00000caa <__fp_nan>:
     caa:	9f ef       	ldi	r25, 0xFF	; 255
     cac:	80 ec       	ldi	r24, 0xC0	; 192
     cae:	08 95       	ret

00000cb0 <__fp_pscA>:
     cb0:	00 24       	eor	r0, r0
     cb2:	0a 94       	dec	r0
     cb4:	16 16       	cp	r1, r22
     cb6:	17 06       	cpc	r1, r23
     cb8:	18 06       	cpc	r1, r24
     cba:	09 06       	cpc	r0, r25
     cbc:	08 95       	ret

00000cbe <__fp_pscB>:
     cbe:	00 24       	eor	r0, r0
     cc0:	0a 94       	dec	r0
     cc2:	12 16       	cp	r1, r18
     cc4:	13 06       	cpc	r1, r19
     cc6:	14 06       	cpc	r1, r20
     cc8:	05 06       	cpc	r0, r21
     cca:	08 95       	ret

00000ccc <__fp_round>:
     ccc:	09 2e       	mov	r0, r25
     cce:	03 94       	inc	r0
     cd0:	00 0c       	add	r0, r0
     cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0xc>
     cd4:	88 23       	and	r24, r24
     cd6:	52 f0       	brmi	.+20     	; 0xcec <__fp_round+0x20>
     cd8:	bb 0f       	add	r27, r27
     cda:	40 f4       	brcc	.+16     	; 0xcec <__fp_round+0x20>
     cdc:	bf 2b       	or	r27, r31
     cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0x18>
     ce0:	60 ff       	sbrs	r22, 0
     ce2:	04 c0       	rjmp	.+8      	; 0xcec <__fp_round+0x20>
     ce4:	6f 5f       	subi	r22, 0xFF	; 255
     ce6:	7f 4f       	sbci	r23, 0xFF	; 255
     ce8:	8f 4f       	sbci	r24, 0xFF	; 255
     cea:	9f 4f       	sbci	r25, 0xFF	; 255
     cec:	08 95       	ret

00000cee <__fp_split3>:
     cee:	57 fd       	sbrc	r21, 7
     cf0:	90 58       	subi	r25, 0x80	; 128
     cf2:	44 0f       	add	r20, r20
     cf4:	55 1f       	adc	r21, r21
     cf6:	59 f0       	breq	.+22     	; 0xd0e <__fp_splitA+0x10>
     cf8:	5f 3f       	cpi	r21, 0xFF	; 255
     cfa:	71 f0       	breq	.+28     	; 0xd18 <__fp_splitA+0x1a>
     cfc:	47 95       	ror	r20

00000cfe <__fp_splitA>:
     cfe:	88 0f       	add	r24, r24
     d00:	97 fb       	bst	r25, 7
     d02:	99 1f       	adc	r25, r25
     d04:	61 f0       	breq	.+24     	; 0xd1e <__fp_splitA+0x20>
     d06:	9f 3f       	cpi	r25, 0xFF	; 255
     d08:	79 f0       	breq	.+30     	; 0xd28 <__fp_splitA+0x2a>
     d0a:	87 95       	ror	r24
     d0c:	08 95       	ret
     d0e:	12 16       	cp	r1, r18
     d10:	13 06       	cpc	r1, r19
     d12:	14 06       	cpc	r1, r20
     d14:	55 1f       	adc	r21, r21
     d16:	f2 cf       	rjmp	.-28     	; 0xcfc <__fp_split3+0xe>
     d18:	46 95       	lsr	r20
     d1a:	f1 df       	rcall	.-30     	; 0xcfe <__fp_splitA>
     d1c:	08 c0       	rjmp	.+16     	; 0xd2e <__fp_splitA+0x30>
     d1e:	16 16       	cp	r1, r22
     d20:	17 06       	cpc	r1, r23
     d22:	18 06       	cpc	r1, r24
     d24:	99 1f       	adc	r25, r25
     d26:	f1 cf       	rjmp	.-30     	; 0xd0a <__fp_splitA+0xc>
     d28:	86 95       	lsr	r24
     d2a:	71 05       	cpc	r23, r1
     d2c:	61 05       	cpc	r22, r1
     d2e:	08 94       	sec
     d30:	08 95       	ret

00000d32 <__fp_zero>:
     d32:	e8 94       	clt

00000d34 <__fp_szero>:
     d34:	bb 27       	eor	r27, r27
     d36:	66 27       	eor	r22, r22
     d38:	77 27       	eor	r23, r23
     d3a:	cb 01       	movw	r24, r22
     d3c:	97 f9       	bld	r25, 7
     d3e:	08 95       	ret

00000d40 <__gesf2>:
     d40:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_cmp>
     d44:	08 f4       	brcc	.+2      	; 0xd48 <__gesf2+0x8>
     d46:	8f ef       	ldi	r24, 0xFF	; 255
     d48:	08 95       	ret

00000d4a <__mulsf3>:
     d4a:	0e 94 b8 06 	call	0xd70	; 0xd70 <__mulsf3x>
     d4e:	0c 94 66 06 	jmp	0xccc	; 0xccc <__fp_round>
     d52:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__fp_pscA>
     d56:	38 f0       	brcs	.+14     	; 0xd66 <__mulsf3+0x1c>
     d58:	0e 94 5f 06 	call	0xcbe	; 0xcbe <__fp_pscB>
     d5c:	20 f0       	brcs	.+8      	; 0xd66 <__mulsf3+0x1c>
     d5e:	95 23       	and	r25, r21
     d60:	11 f0       	breq	.+4      	; 0xd66 <__mulsf3+0x1c>
     d62:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_inf>
     d66:	0c 94 55 06 	jmp	0xcaa	; 0xcaa <__fp_nan>
     d6a:	11 24       	eor	r1, r1
     d6c:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_szero>

00000d70 <__mulsf3x>:
     d70:	0e 94 77 06 	call	0xcee	; 0xcee <__fp_split3>
     d74:	70 f3       	brcs	.-36     	; 0xd52 <__mulsf3+0x8>

00000d76 <__mulsf3_pse>:
     d76:	95 9f       	mul	r25, r21
     d78:	c1 f3       	breq	.-16     	; 0xd6a <__mulsf3+0x20>
     d7a:	95 0f       	add	r25, r21
     d7c:	50 e0       	ldi	r21, 0x00	; 0
     d7e:	55 1f       	adc	r21, r21
     d80:	62 9f       	mul	r22, r18
     d82:	f0 01       	movw	r30, r0
     d84:	72 9f       	mul	r23, r18
     d86:	bb 27       	eor	r27, r27
     d88:	f0 0d       	add	r31, r0
     d8a:	b1 1d       	adc	r27, r1
     d8c:	63 9f       	mul	r22, r19
     d8e:	aa 27       	eor	r26, r26
     d90:	f0 0d       	add	r31, r0
     d92:	b1 1d       	adc	r27, r1
     d94:	aa 1f       	adc	r26, r26
     d96:	64 9f       	mul	r22, r20
     d98:	66 27       	eor	r22, r22
     d9a:	b0 0d       	add	r27, r0
     d9c:	a1 1d       	adc	r26, r1
     d9e:	66 1f       	adc	r22, r22
     da0:	82 9f       	mul	r24, r18
     da2:	22 27       	eor	r18, r18
     da4:	b0 0d       	add	r27, r0
     da6:	a1 1d       	adc	r26, r1
     da8:	62 1f       	adc	r22, r18
     daa:	73 9f       	mul	r23, r19
     dac:	b0 0d       	add	r27, r0
     dae:	a1 1d       	adc	r26, r1
     db0:	62 1f       	adc	r22, r18
     db2:	83 9f       	mul	r24, r19
     db4:	a0 0d       	add	r26, r0
     db6:	61 1d       	adc	r22, r1
     db8:	22 1f       	adc	r18, r18
     dba:	74 9f       	mul	r23, r20
     dbc:	33 27       	eor	r19, r19
     dbe:	a0 0d       	add	r26, r0
     dc0:	61 1d       	adc	r22, r1
     dc2:	23 1f       	adc	r18, r19
     dc4:	84 9f       	mul	r24, r20
     dc6:	60 0d       	add	r22, r0
     dc8:	21 1d       	adc	r18, r1
     dca:	82 2f       	mov	r24, r18
     dcc:	76 2f       	mov	r23, r22
     dce:	6a 2f       	mov	r22, r26
     dd0:	11 24       	eor	r1, r1
     dd2:	9f 57       	subi	r25, 0x7F	; 127
     dd4:	50 40       	sbci	r21, 0x00	; 0
     dd6:	9a f0       	brmi	.+38     	; 0xdfe <__mulsf3_pse+0x88>
     dd8:	f1 f0       	breq	.+60     	; 0xe16 <__mulsf3_pse+0xa0>
     dda:	88 23       	and	r24, r24
     ddc:	4a f0       	brmi	.+18     	; 0xdf0 <__mulsf3_pse+0x7a>
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	bb 1f       	adc	r27, r27
     de4:	66 1f       	adc	r22, r22
     de6:	77 1f       	adc	r23, r23
     de8:	88 1f       	adc	r24, r24
     dea:	91 50       	subi	r25, 0x01	; 1
     dec:	50 40       	sbci	r21, 0x00	; 0
     dee:	a9 f7       	brne	.-22     	; 0xdda <__mulsf3_pse+0x64>
     df0:	9e 3f       	cpi	r25, 0xFE	; 254
     df2:	51 05       	cpc	r21, r1
     df4:	80 f0       	brcs	.+32     	; 0xe16 <__mulsf3_pse+0xa0>
     df6:	0c 94 4f 06 	jmp	0xc9e	; 0xc9e <__fp_inf>
     dfa:	0c 94 9a 06 	jmp	0xd34	; 0xd34 <__fp_szero>
     dfe:	5f 3f       	cpi	r21, 0xFF	; 255
     e00:	e4 f3       	brlt	.-8      	; 0xdfa <__mulsf3_pse+0x84>
     e02:	98 3e       	cpi	r25, 0xE8	; 232
     e04:	d4 f3       	brlt	.-12     	; 0xdfa <__mulsf3_pse+0x84>
     e06:	86 95       	lsr	r24
     e08:	77 95       	ror	r23
     e0a:	67 95       	ror	r22
     e0c:	b7 95       	ror	r27
     e0e:	f7 95       	ror	r31
     e10:	e7 95       	ror	r30
     e12:	9f 5f       	subi	r25, 0xFF	; 255
     e14:	c1 f7       	brne	.-16     	; 0xe06 <__mulsf3_pse+0x90>
     e16:	fe 2b       	or	r31, r30
     e18:	88 0f       	add	r24, r24
     e1a:	91 1d       	adc	r25, r1
     e1c:	96 95       	lsr	r25
     e1e:	87 95       	ror	r24
     e20:	97 f9       	bld	r25, 7
     e22:	08 95       	ret

00000e24 <__fp_cmp>:
     e24:	99 0f       	add	r25, r25
     e26:	00 08       	sbc	r0, r0
     e28:	55 0f       	add	r21, r21
     e2a:	aa 0b       	sbc	r26, r26
     e2c:	e0 e8       	ldi	r30, 0x80	; 128
     e2e:	fe ef       	ldi	r31, 0xFE	; 254
     e30:	16 16       	cp	r1, r22
     e32:	17 06       	cpc	r1, r23
     e34:	e8 07       	cpc	r30, r24
     e36:	f9 07       	cpc	r31, r25
     e38:	c0 f0       	brcs	.+48     	; 0xe6a <__fp_cmp+0x46>
     e3a:	12 16       	cp	r1, r18
     e3c:	13 06       	cpc	r1, r19
     e3e:	e4 07       	cpc	r30, r20
     e40:	f5 07       	cpc	r31, r21
     e42:	98 f0       	brcs	.+38     	; 0xe6a <__fp_cmp+0x46>
     e44:	62 1b       	sub	r22, r18
     e46:	73 0b       	sbc	r23, r19
     e48:	84 0b       	sbc	r24, r20
     e4a:	95 0b       	sbc	r25, r21
     e4c:	39 f4       	brne	.+14     	; 0xe5c <__fp_cmp+0x38>
     e4e:	0a 26       	eor	r0, r26
     e50:	61 f0       	breq	.+24     	; 0xe6a <__fp_cmp+0x46>
     e52:	23 2b       	or	r18, r19
     e54:	24 2b       	or	r18, r20
     e56:	25 2b       	or	r18, r21
     e58:	21 f4       	brne	.+8      	; 0xe62 <__fp_cmp+0x3e>
     e5a:	08 95       	ret
     e5c:	0a 26       	eor	r0, r26
     e5e:	09 f4       	brne	.+2      	; 0xe62 <__fp_cmp+0x3e>
     e60:	a1 40       	sbci	r26, 0x01	; 1
     e62:	a6 95       	lsr	r26
     e64:	8f ef       	ldi	r24, 0xFF	; 255
     e66:	81 1d       	adc	r24, r1
     e68:	81 1d       	adc	r24, r1
     e6a:	08 95       	ret

00000e6c <__udivmodsi4>:
     e6c:	a1 e2       	ldi	r26, 0x21	; 33
     e6e:	1a 2e       	mov	r1, r26
     e70:	aa 1b       	sub	r26, r26
     e72:	bb 1b       	sub	r27, r27
     e74:	fd 01       	movw	r30, r26
     e76:	0d c0       	rjmp	.+26     	; 0xe92 <__udivmodsi4_ep>

00000e78 <__udivmodsi4_loop>:
     e78:	aa 1f       	adc	r26, r26
     e7a:	bb 1f       	adc	r27, r27
     e7c:	ee 1f       	adc	r30, r30
     e7e:	ff 1f       	adc	r31, r31
     e80:	a2 17       	cp	r26, r18
     e82:	b3 07       	cpc	r27, r19
     e84:	e4 07       	cpc	r30, r20
     e86:	f5 07       	cpc	r31, r21
     e88:	20 f0       	brcs	.+8      	; 0xe92 <__udivmodsi4_ep>
     e8a:	a2 1b       	sub	r26, r18
     e8c:	b3 0b       	sbc	r27, r19
     e8e:	e4 0b       	sbc	r30, r20
     e90:	f5 0b       	sbc	r31, r21

00000e92 <__udivmodsi4_ep>:
     e92:	66 1f       	adc	r22, r22
     e94:	77 1f       	adc	r23, r23
     e96:	88 1f       	adc	r24, r24
     e98:	99 1f       	adc	r25, r25
     e9a:	1a 94       	dec	r1
     e9c:	69 f7       	brne	.-38     	; 0xe78 <__udivmodsi4_loop>
     e9e:	60 95       	com	r22
     ea0:	70 95       	com	r23
     ea2:	80 95       	com	r24
     ea4:	90 95       	com	r25
     ea6:	9b 01       	movw	r18, r22
     ea8:	ac 01       	movw	r20, r24
     eaa:	bd 01       	movw	r22, r26
     eac:	cf 01       	movw	r24, r30
     eae:	08 95       	ret

00000eb0 <dtostrf>:
     eb0:	ef 92       	push	r14
     eb2:	0f 93       	push	r16
     eb4:	1f 93       	push	r17
     eb6:	cf 93       	push	r28
     eb8:	df 93       	push	r29
     eba:	e8 01       	movw	r28, r16
     ebc:	47 fd       	sbrc	r20, 7
     ebe:	02 c0       	rjmp	.+4      	; 0xec4 <dtostrf+0x14>
     ec0:	34 e0       	ldi	r19, 0x04	; 4
     ec2:	01 c0       	rjmp	.+2      	; 0xec6 <dtostrf+0x16>
     ec4:	34 e1       	ldi	r19, 0x14	; 20
     ec6:	04 2e       	mov	r0, r20
     ec8:	00 0c       	add	r0, r0
     eca:	55 0b       	sbc	r21, r21
     ecc:	57 ff       	sbrs	r21, 7
     ece:	03 c0       	rjmp	.+6      	; 0xed6 <dtostrf+0x26>
     ed0:	51 95       	neg	r21
     ed2:	41 95       	neg	r20
     ed4:	51 09       	sbc	r21, r1
     ed6:	e3 2e       	mov	r14, r19
     ed8:	02 2f       	mov	r16, r18
     eda:	24 2f       	mov	r18, r20
     edc:	ae 01       	movw	r20, r28
     ede:	0e 94 08 0a 	call	0x1410	; 0x1410 <dtoa_prf>
     ee2:	ce 01       	movw	r24, r28
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <fwrite>:
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	cf 93       	push	r28
     f06:	df 93       	push	r29
     f08:	5b 01       	movw	r10, r22
     f0a:	4a 01       	movw	r8, r20
     f0c:	79 01       	movw	r14, r18
     f0e:	d9 01       	movw	r26, r18
     f10:	13 96       	adiw	r26, 0x03	; 3
     f12:	2c 91       	ld	r18, X
     f14:	21 ff       	sbrs	r18, 1
     f16:	1d c0       	rjmp	.+58     	; 0xf52 <fwrite+0x62>
     f18:	c0 e0       	ldi	r28, 0x00	; 0
     f1a:	d0 e0       	ldi	r29, 0x00	; 0
     f1c:	c8 15       	cp	r28, r8
     f1e:	d9 05       	cpc	r29, r9
     f20:	d9 f0       	breq	.+54     	; 0xf58 <fwrite+0x68>
     f22:	8c 01       	movw	r16, r24
     f24:	6c 01       	movw	r12, r24
     f26:	ca 0c       	add	r12, r10
     f28:	db 1c       	adc	r13, r11
     f2a:	c8 01       	movw	r24, r16
     f2c:	0c 15       	cp	r16, r12
     f2e:	1d 05       	cpc	r17, r13
     f30:	71 f0       	breq	.+28     	; 0xf4e <fwrite+0x5e>
     f32:	0f 5f       	subi	r16, 0xFF	; 255
     f34:	1f 4f       	sbci	r17, 0xFF	; 255
     f36:	d7 01       	movw	r26, r14
     f38:	18 96       	adiw	r26, 0x08	; 8
     f3a:	ed 91       	ld	r30, X+
     f3c:	fc 91       	ld	r31, X
     f3e:	19 97       	sbiw	r26, 0x09	; 9
     f40:	b7 01       	movw	r22, r14
     f42:	dc 01       	movw	r26, r24
     f44:	8c 91       	ld	r24, X
     f46:	09 95       	icall
     f48:	89 2b       	or	r24, r25
     f4a:	79 f3       	breq	.-34     	; 0xf2a <fwrite+0x3a>
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <fwrite+0x68>
     f4e:	21 96       	adiw	r28, 0x01	; 1
     f50:	e5 cf       	rjmp	.-54     	; 0xf1c <fwrite+0x2c>
     f52:	80 e0       	ldi	r24, 0x00	; 0
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	01 c0       	rjmp	.+2      	; 0xf5a <fwrite+0x6a>
     f58:	ce 01       	movw	r24, r28
     f5a:	df 91       	pop	r29
     f5c:	cf 91       	pop	r28
     f5e:	1f 91       	pop	r17
     f60:	0f 91       	pop	r16
     f62:	ff 90       	pop	r15
     f64:	ef 90       	pop	r14
     f66:	df 90       	pop	r13
     f68:	cf 90       	pop	r12
     f6a:	bf 90       	pop	r11
     f6c:	af 90       	pop	r10
     f6e:	9f 90       	pop	r9
     f70:	8f 90       	pop	r8
     f72:	08 95       	ret

00000f74 <printf>:
     f74:	cf 93       	push	r28
     f76:	df 93       	push	r29
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	ae 01       	movw	r20, r28
     f7e:	4b 5f       	subi	r20, 0xFB	; 251
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	fa 01       	movw	r30, r20
     f84:	61 91       	ld	r22, Z+
     f86:	71 91       	ld	r23, Z+
     f88:	af 01       	movw	r20, r30
     f8a:	80 91 c0 40 	lds	r24, 0x40C0	; 0x8040c0 <__iob+0x2>
     f8e:	90 91 c1 40 	lds	r25, 0x40C1	; 0x8040c1 <__iob+0x3>
     f92:	0e 94 04 08 	call	0x1008	; 0x1008 <vfprintf>
     f96:	df 91       	pop	r29
     f98:	cf 91       	pop	r28
     f9a:	08 95       	ret

00000f9c <putchar>:
     f9c:	60 91 c0 40 	lds	r22, 0x40C0	; 0x8040c0 <__iob+0x2>
     fa0:	70 91 c1 40 	lds	r23, 0x40C1	; 0x8040c1 <__iob+0x3>
     fa4:	0c 94 67 0c 	jmp	0x18ce	; 0x18ce <fputc>

00000fa8 <puts>:
     fa8:	0f 93       	push	r16
     faa:	1f 93       	push	r17
     fac:	cf 93       	push	r28
     fae:	df 93       	push	r29
     fb0:	e0 91 c0 40 	lds	r30, 0x40C0	; 0x8040c0 <__iob+0x2>
     fb4:	f0 91 c1 40 	lds	r31, 0x40C1	; 0x8040c1 <__iob+0x3>
     fb8:	23 81       	ldd	r18, Z+3	; 0x03
     fba:	21 ff       	sbrs	r18, 1
     fbc:	1b c0       	rjmp	.+54     	; 0xff4 <puts+0x4c>
     fbe:	8c 01       	movw	r16, r24
     fc0:	d0 e0       	ldi	r29, 0x00	; 0
     fc2:	c0 e0       	ldi	r28, 0x00	; 0
     fc4:	f8 01       	movw	r30, r16
     fc6:	81 91       	ld	r24, Z+
     fc8:	8f 01       	movw	r16, r30
     fca:	60 91 c0 40 	lds	r22, 0x40C0	; 0x8040c0 <__iob+0x2>
     fce:	70 91 c1 40 	lds	r23, 0x40C1	; 0x8040c1 <__iob+0x3>
     fd2:	db 01       	movw	r26, r22
     fd4:	18 96       	adiw	r26, 0x08	; 8
     fd6:	ed 91       	ld	r30, X+
     fd8:	fc 91       	ld	r31, X
     fda:	19 97       	sbiw	r26, 0x09	; 9
     fdc:	88 23       	and	r24, r24
     fde:	31 f0       	breq	.+12     	; 0xfec <puts+0x44>
     fe0:	09 95       	icall
     fe2:	89 2b       	or	r24, r25
     fe4:	79 f3       	breq	.-34     	; 0xfc4 <puts+0x1c>
     fe6:	df ef       	ldi	r29, 0xFF	; 255
     fe8:	cf ef       	ldi	r28, 0xFF	; 255
     fea:	ec cf       	rjmp	.-40     	; 0xfc4 <puts+0x1c>
     fec:	8a e0       	ldi	r24, 0x0A	; 10
     fee:	09 95       	icall
     ff0:	89 2b       	or	r24, r25
     ff2:	19 f0       	breq	.+6      	; 0xffa <puts+0x52>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <puts+0x56>
     ffa:	8d 2f       	mov	r24, r29
     ffc:	9c 2f       	mov	r25, r28
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	1f 91       	pop	r17
    1004:	0f 91       	pop	r16
    1006:	08 95       	ret

00001008 <vfprintf>:
    1008:	2f 92       	push	r2
    100a:	3f 92       	push	r3
    100c:	4f 92       	push	r4
    100e:	5f 92       	push	r5
    1010:	6f 92       	push	r6
    1012:	7f 92       	push	r7
    1014:	8f 92       	push	r8
    1016:	9f 92       	push	r9
    1018:	af 92       	push	r10
    101a:	bf 92       	push	r11
    101c:	cf 92       	push	r12
    101e:	df 92       	push	r13
    1020:	ef 92       	push	r14
    1022:	ff 92       	push	r15
    1024:	0f 93       	push	r16
    1026:	1f 93       	push	r17
    1028:	cf 93       	push	r28
    102a:	df 93       	push	r29
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	2b 97       	sbiw	r28, 0x0b	; 11
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	de bf       	out	0x3e, r29	; 62
    1036:	6c 01       	movw	r12, r24
    1038:	7b 01       	movw	r14, r22
    103a:	8a 01       	movw	r16, r20
    103c:	fc 01       	movw	r30, r24
    103e:	16 82       	std	Z+6, r1	; 0x06
    1040:	17 82       	std	Z+7, r1	; 0x07
    1042:	83 81       	ldd	r24, Z+3	; 0x03
    1044:	81 ff       	sbrs	r24, 1
    1046:	cc c1       	rjmp	.+920    	; 0x13e0 <vfprintf+0x3d8>
    1048:	ce 01       	movw	r24, r28
    104a:	01 96       	adiw	r24, 0x01	; 1
    104c:	3c 01       	movw	r6, r24
    104e:	f6 01       	movw	r30, r12
    1050:	93 81       	ldd	r25, Z+3	; 0x03
    1052:	f7 01       	movw	r30, r14
    1054:	93 fd       	sbrc	r25, 3
    1056:	85 91       	lpm	r24, Z+
    1058:	93 ff       	sbrs	r25, 3
    105a:	81 91       	ld	r24, Z+
    105c:	7f 01       	movw	r14, r30
    105e:	88 23       	and	r24, r24
    1060:	09 f4       	brne	.+2      	; 0x1064 <vfprintf+0x5c>
    1062:	ba c1       	rjmp	.+884    	; 0x13d8 <vfprintf+0x3d0>
    1064:	85 32       	cpi	r24, 0x25	; 37
    1066:	39 f4       	brne	.+14     	; 0x1076 <vfprintf+0x6e>
    1068:	93 fd       	sbrc	r25, 3
    106a:	85 91       	lpm	r24, Z+
    106c:	93 ff       	sbrs	r25, 3
    106e:	81 91       	ld	r24, Z+
    1070:	7f 01       	movw	r14, r30
    1072:	85 32       	cpi	r24, 0x25	; 37
    1074:	29 f4       	brne	.+10     	; 0x1080 <vfprintf+0x78>
    1076:	b6 01       	movw	r22, r12
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    107e:	e7 cf       	rjmp	.-50     	; 0x104e <vfprintf+0x46>
    1080:	91 2c       	mov	r9, r1
    1082:	21 2c       	mov	r2, r1
    1084:	31 2c       	mov	r3, r1
    1086:	ff e1       	ldi	r31, 0x1F	; 31
    1088:	f3 15       	cp	r31, r3
    108a:	d8 f0       	brcs	.+54     	; 0x10c2 <vfprintf+0xba>
    108c:	8b 32       	cpi	r24, 0x2B	; 43
    108e:	79 f0       	breq	.+30     	; 0x10ae <vfprintf+0xa6>
    1090:	38 f4       	brcc	.+14     	; 0x10a0 <vfprintf+0x98>
    1092:	80 32       	cpi	r24, 0x20	; 32
    1094:	79 f0       	breq	.+30     	; 0x10b4 <vfprintf+0xac>
    1096:	83 32       	cpi	r24, 0x23	; 35
    1098:	a1 f4       	brne	.+40     	; 0x10c2 <vfprintf+0xba>
    109a:	23 2d       	mov	r18, r3
    109c:	20 61       	ori	r18, 0x10	; 16
    109e:	1d c0       	rjmp	.+58     	; 0x10da <vfprintf+0xd2>
    10a0:	8d 32       	cpi	r24, 0x2D	; 45
    10a2:	61 f0       	breq	.+24     	; 0x10bc <vfprintf+0xb4>
    10a4:	80 33       	cpi	r24, 0x30	; 48
    10a6:	69 f4       	brne	.+26     	; 0x10c2 <vfprintf+0xba>
    10a8:	23 2d       	mov	r18, r3
    10aa:	21 60       	ori	r18, 0x01	; 1
    10ac:	16 c0       	rjmp	.+44     	; 0x10da <vfprintf+0xd2>
    10ae:	83 2d       	mov	r24, r3
    10b0:	82 60       	ori	r24, 0x02	; 2
    10b2:	38 2e       	mov	r3, r24
    10b4:	e3 2d       	mov	r30, r3
    10b6:	e4 60       	ori	r30, 0x04	; 4
    10b8:	3e 2e       	mov	r3, r30
    10ba:	2a c0       	rjmp	.+84     	; 0x1110 <vfprintf+0x108>
    10bc:	f3 2d       	mov	r31, r3
    10be:	f8 60       	ori	r31, 0x08	; 8
    10c0:	1d c0       	rjmp	.+58     	; 0x10fc <vfprintf+0xf4>
    10c2:	37 fc       	sbrc	r3, 7
    10c4:	2d c0       	rjmp	.+90     	; 0x1120 <vfprintf+0x118>
    10c6:	20 ed       	ldi	r18, 0xD0	; 208
    10c8:	28 0f       	add	r18, r24
    10ca:	2a 30       	cpi	r18, 0x0A	; 10
    10cc:	40 f0       	brcs	.+16     	; 0x10de <vfprintf+0xd6>
    10ce:	8e 32       	cpi	r24, 0x2E	; 46
    10d0:	b9 f4       	brne	.+46     	; 0x1100 <vfprintf+0xf8>
    10d2:	36 fc       	sbrc	r3, 6
    10d4:	81 c1       	rjmp	.+770    	; 0x13d8 <vfprintf+0x3d0>
    10d6:	23 2d       	mov	r18, r3
    10d8:	20 64       	ori	r18, 0x40	; 64
    10da:	32 2e       	mov	r3, r18
    10dc:	19 c0       	rjmp	.+50     	; 0x1110 <vfprintf+0x108>
    10de:	36 fe       	sbrs	r3, 6
    10e0:	06 c0       	rjmp	.+12     	; 0x10ee <vfprintf+0xe6>
    10e2:	8a e0       	ldi	r24, 0x0A	; 10
    10e4:	98 9e       	mul	r9, r24
    10e6:	20 0d       	add	r18, r0
    10e8:	11 24       	eor	r1, r1
    10ea:	92 2e       	mov	r9, r18
    10ec:	11 c0       	rjmp	.+34     	; 0x1110 <vfprintf+0x108>
    10ee:	ea e0       	ldi	r30, 0x0A	; 10
    10f0:	2e 9e       	mul	r2, r30
    10f2:	20 0d       	add	r18, r0
    10f4:	11 24       	eor	r1, r1
    10f6:	22 2e       	mov	r2, r18
    10f8:	f3 2d       	mov	r31, r3
    10fa:	f0 62       	ori	r31, 0x20	; 32
    10fc:	3f 2e       	mov	r3, r31
    10fe:	08 c0       	rjmp	.+16     	; 0x1110 <vfprintf+0x108>
    1100:	8c 36       	cpi	r24, 0x6C	; 108
    1102:	21 f4       	brne	.+8      	; 0x110c <vfprintf+0x104>
    1104:	83 2d       	mov	r24, r3
    1106:	80 68       	ori	r24, 0x80	; 128
    1108:	38 2e       	mov	r3, r24
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <vfprintf+0x108>
    110c:	88 36       	cpi	r24, 0x68	; 104
    110e:	41 f4       	brne	.+16     	; 0x1120 <vfprintf+0x118>
    1110:	f7 01       	movw	r30, r14
    1112:	93 fd       	sbrc	r25, 3
    1114:	85 91       	lpm	r24, Z+
    1116:	93 ff       	sbrs	r25, 3
    1118:	81 91       	ld	r24, Z+
    111a:	7f 01       	movw	r14, r30
    111c:	81 11       	cpse	r24, r1
    111e:	b3 cf       	rjmp	.-154    	; 0x1086 <vfprintf+0x7e>
    1120:	98 2f       	mov	r25, r24
    1122:	9f 7d       	andi	r25, 0xDF	; 223
    1124:	95 54       	subi	r25, 0x45	; 69
    1126:	93 30       	cpi	r25, 0x03	; 3
    1128:	28 f4       	brcc	.+10     	; 0x1134 <vfprintf+0x12c>
    112a:	0c 5f       	subi	r16, 0xFC	; 252
    112c:	1f 4f       	sbci	r17, 0xFF	; 255
    112e:	9f e3       	ldi	r25, 0x3F	; 63
    1130:	99 83       	std	Y+1, r25	; 0x01
    1132:	0d c0       	rjmp	.+26     	; 0x114e <vfprintf+0x146>
    1134:	83 36       	cpi	r24, 0x63	; 99
    1136:	31 f0       	breq	.+12     	; 0x1144 <vfprintf+0x13c>
    1138:	83 37       	cpi	r24, 0x73	; 115
    113a:	71 f0       	breq	.+28     	; 0x1158 <vfprintf+0x150>
    113c:	83 35       	cpi	r24, 0x53	; 83
    113e:	09 f0       	breq	.+2      	; 0x1142 <vfprintf+0x13a>
    1140:	59 c0       	rjmp	.+178    	; 0x11f4 <vfprintf+0x1ec>
    1142:	21 c0       	rjmp	.+66     	; 0x1186 <vfprintf+0x17e>
    1144:	f8 01       	movw	r30, r16
    1146:	80 81       	ld	r24, Z
    1148:	89 83       	std	Y+1, r24	; 0x01
    114a:	0e 5f       	subi	r16, 0xFE	; 254
    114c:	1f 4f       	sbci	r17, 0xFF	; 255
    114e:	88 24       	eor	r8, r8
    1150:	83 94       	inc	r8
    1152:	91 2c       	mov	r9, r1
    1154:	53 01       	movw	r10, r6
    1156:	13 c0       	rjmp	.+38     	; 0x117e <vfprintf+0x176>
    1158:	28 01       	movw	r4, r16
    115a:	f2 e0       	ldi	r31, 0x02	; 2
    115c:	4f 0e       	add	r4, r31
    115e:	51 1c       	adc	r5, r1
    1160:	f8 01       	movw	r30, r16
    1162:	a0 80       	ld	r10, Z
    1164:	b1 80       	ldd	r11, Z+1	; 0x01
    1166:	36 fe       	sbrs	r3, 6
    1168:	03 c0       	rjmp	.+6      	; 0x1170 <vfprintf+0x168>
    116a:	69 2d       	mov	r22, r9
    116c:	70 e0       	ldi	r23, 0x00	; 0
    116e:	02 c0       	rjmp	.+4      	; 0x1174 <vfprintf+0x16c>
    1170:	6f ef       	ldi	r22, 0xFF	; 255
    1172:	7f ef       	ldi	r23, 0xFF	; 255
    1174:	c5 01       	movw	r24, r10
    1176:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <strnlen>
    117a:	4c 01       	movw	r8, r24
    117c:	82 01       	movw	r16, r4
    117e:	f3 2d       	mov	r31, r3
    1180:	ff 77       	andi	r31, 0x7F	; 127
    1182:	3f 2e       	mov	r3, r31
    1184:	16 c0       	rjmp	.+44     	; 0x11b2 <vfprintf+0x1aa>
    1186:	28 01       	movw	r4, r16
    1188:	22 e0       	ldi	r18, 0x02	; 2
    118a:	42 0e       	add	r4, r18
    118c:	51 1c       	adc	r5, r1
    118e:	f8 01       	movw	r30, r16
    1190:	a0 80       	ld	r10, Z
    1192:	b1 80       	ldd	r11, Z+1	; 0x01
    1194:	36 fe       	sbrs	r3, 6
    1196:	03 c0       	rjmp	.+6      	; 0x119e <vfprintf+0x196>
    1198:	69 2d       	mov	r22, r9
    119a:	70 e0       	ldi	r23, 0x00	; 0
    119c:	02 c0       	rjmp	.+4      	; 0x11a2 <vfprintf+0x19a>
    119e:	6f ef       	ldi	r22, 0xFF	; 255
    11a0:	7f ef       	ldi	r23, 0xFF	; 255
    11a2:	c5 01       	movw	r24, r10
    11a4:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <strnlen_P>
    11a8:	4c 01       	movw	r8, r24
    11aa:	f3 2d       	mov	r31, r3
    11ac:	f0 68       	ori	r31, 0x80	; 128
    11ae:	3f 2e       	mov	r3, r31
    11b0:	82 01       	movw	r16, r4
    11b2:	33 fc       	sbrc	r3, 3
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <vfprintf+0x1e4>
    11b6:	82 2d       	mov	r24, r2
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	88 16       	cp	r8, r24
    11bc:	99 06       	cpc	r9, r25
    11be:	b0 f4       	brcc	.+44     	; 0x11ec <vfprintf+0x1e4>
    11c0:	b6 01       	movw	r22, r12
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    11ca:	2a 94       	dec	r2
    11cc:	f4 cf       	rjmp	.-24     	; 0x11b6 <vfprintf+0x1ae>
    11ce:	f5 01       	movw	r30, r10
    11d0:	37 fc       	sbrc	r3, 7
    11d2:	85 91       	lpm	r24, Z+
    11d4:	37 fe       	sbrs	r3, 7
    11d6:	81 91       	ld	r24, Z+
    11d8:	5f 01       	movw	r10, r30
    11da:	b6 01       	movw	r22, r12
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    11e2:	21 10       	cpse	r2, r1
    11e4:	2a 94       	dec	r2
    11e6:	21 e0       	ldi	r18, 0x01	; 1
    11e8:	82 1a       	sub	r8, r18
    11ea:	91 08       	sbc	r9, r1
    11ec:	81 14       	cp	r8, r1
    11ee:	91 04       	cpc	r9, r1
    11f0:	71 f7       	brne	.-36     	; 0x11ce <vfprintf+0x1c6>
    11f2:	e8 c0       	rjmp	.+464    	; 0x13c4 <vfprintf+0x3bc>
    11f4:	84 36       	cpi	r24, 0x64	; 100
    11f6:	11 f0       	breq	.+4      	; 0x11fc <vfprintf+0x1f4>
    11f8:	89 36       	cpi	r24, 0x69	; 105
    11fa:	41 f5       	brne	.+80     	; 0x124c <vfprintf+0x244>
    11fc:	f8 01       	movw	r30, r16
    11fe:	37 fe       	sbrs	r3, 7
    1200:	07 c0       	rjmp	.+14     	; 0x1210 <vfprintf+0x208>
    1202:	60 81       	ld	r22, Z
    1204:	71 81       	ldd	r23, Z+1	; 0x01
    1206:	82 81       	ldd	r24, Z+2	; 0x02
    1208:	93 81       	ldd	r25, Z+3	; 0x03
    120a:	0c 5f       	subi	r16, 0xFC	; 252
    120c:	1f 4f       	sbci	r17, 0xFF	; 255
    120e:	08 c0       	rjmp	.+16     	; 0x1220 <vfprintf+0x218>
    1210:	60 81       	ld	r22, Z
    1212:	71 81       	ldd	r23, Z+1	; 0x01
    1214:	07 2e       	mov	r0, r23
    1216:	00 0c       	add	r0, r0
    1218:	88 0b       	sbc	r24, r24
    121a:	99 0b       	sbc	r25, r25
    121c:	0e 5f       	subi	r16, 0xFE	; 254
    121e:	1f 4f       	sbci	r17, 0xFF	; 255
    1220:	f3 2d       	mov	r31, r3
    1222:	ff 76       	andi	r31, 0x6F	; 111
    1224:	3f 2e       	mov	r3, r31
    1226:	97 ff       	sbrs	r25, 7
    1228:	09 c0       	rjmp	.+18     	; 0x123c <vfprintf+0x234>
    122a:	90 95       	com	r25
    122c:	80 95       	com	r24
    122e:	70 95       	com	r23
    1230:	61 95       	neg	r22
    1232:	7f 4f       	sbci	r23, 0xFF	; 255
    1234:	8f 4f       	sbci	r24, 0xFF	; 255
    1236:	9f 4f       	sbci	r25, 0xFF	; 255
    1238:	f0 68       	ori	r31, 0x80	; 128
    123a:	3f 2e       	mov	r3, r31
    123c:	2a e0       	ldi	r18, 0x0A	; 10
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	a3 01       	movw	r20, r6
    1242:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__ultoa_invert>
    1246:	88 2e       	mov	r8, r24
    1248:	86 18       	sub	r8, r6
    124a:	45 c0       	rjmp	.+138    	; 0x12d6 <vfprintf+0x2ce>
    124c:	85 37       	cpi	r24, 0x75	; 117
    124e:	31 f4       	brne	.+12     	; 0x125c <vfprintf+0x254>
    1250:	23 2d       	mov	r18, r3
    1252:	2f 7e       	andi	r18, 0xEF	; 239
    1254:	b2 2e       	mov	r11, r18
    1256:	2a e0       	ldi	r18, 0x0A	; 10
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	25 c0       	rjmp	.+74     	; 0x12a6 <vfprintf+0x29e>
    125c:	93 2d       	mov	r25, r3
    125e:	99 7f       	andi	r25, 0xF9	; 249
    1260:	b9 2e       	mov	r11, r25
    1262:	8f 36       	cpi	r24, 0x6F	; 111
    1264:	c1 f0       	breq	.+48     	; 0x1296 <vfprintf+0x28e>
    1266:	18 f4       	brcc	.+6      	; 0x126e <vfprintf+0x266>
    1268:	88 35       	cpi	r24, 0x58	; 88
    126a:	79 f0       	breq	.+30     	; 0x128a <vfprintf+0x282>
    126c:	b5 c0       	rjmp	.+362    	; 0x13d8 <vfprintf+0x3d0>
    126e:	80 37       	cpi	r24, 0x70	; 112
    1270:	19 f0       	breq	.+6      	; 0x1278 <vfprintf+0x270>
    1272:	88 37       	cpi	r24, 0x78	; 120
    1274:	21 f0       	breq	.+8      	; 0x127e <vfprintf+0x276>
    1276:	b0 c0       	rjmp	.+352    	; 0x13d8 <vfprintf+0x3d0>
    1278:	e9 2f       	mov	r30, r25
    127a:	e0 61       	ori	r30, 0x10	; 16
    127c:	be 2e       	mov	r11, r30
    127e:	b4 fe       	sbrs	r11, 4
    1280:	0d c0       	rjmp	.+26     	; 0x129c <vfprintf+0x294>
    1282:	fb 2d       	mov	r31, r11
    1284:	f4 60       	ori	r31, 0x04	; 4
    1286:	bf 2e       	mov	r11, r31
    1288:	09 c0       	rjmp	.+18     	; 0x129c <vfprintf+0x294>
    128a:	34 fe       	sbrs	r3, 4
    128c:	0a c0       	rjmp	.+20     	; 0x12a2 <vfprintf+0x29a>
    128e:	29 2f       	mov	r18, r25
    1290:	26 60       	ori	r18, 0x06	; 6
    1292:	b2 2e       	mov	r11, r18
    1294:	06 c0       	rjmp	.+12     	; 0x12a2 <vfprintf+0x29a>
    1296:	28 e0       	ldi	r18, 0x08	; 8
    1298:	30 e0       	ldi	r19, 0x00	; 0
    129a:	05 c0       	rjmp	.+10     	; 0x12a6 <vfprintf+0x29e>
    129c:	20 e1       	ldi	r18, 0x10	; 16
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	02 c0       	rjmp	.+4      	; 0x12a6 <vfprintf+0x29e>
    12a2:	20 e1       	ldi	r18, 0x10	; 16
    12a4:	32 e0       	ldi	r19, 0x02	; 2
    12a6:	f8 01       	movw	r30, r16
    12a8:	b7 fe       	sbrs	r11, 7
    12aa:	07 c0       	rjmp	.+14     	; 0x12ba <vfprintf+0x2b2>
    12ac:	60 81       	ld	r22, Z
    12ae:	71 81       	ldd	r23, Z+1	; 0x01
    12b0:	82 81       	ldd	r24, Z+2	; 0x02
    12b2:	93 81       	ldd	r25, Z+3	; 0x03
    12b4:	0c 5f       	subi	r16, 0xFC	; 252
    12b6:	1f 4f       	sbci	r17, 0xFF	; 255
    12b8:	06 c0       	rjmp	.+12     	; 0x12c6 <vfprintf+0x2be>
    12ba:	60 81       	ld	r22, Z
    12bc:	71 81       	ldd	r23, Z+1	; 0x01
    12be:	80 e0       	ldi	r24, 0x00	; 0
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	0e 5f       	subi	r16, 0xFE	; 254
    12c4:	1f 4f       	sbci	r17, 0xFF	; 255
    12c6:	a3 01       	movw	r20, r6
    12c8:	0e 94 a3 0c 	call	0x1946	; 0x1946 <__ultoa_invert>
    12cc:	88 2e       	mov	r8, r24
    12ce:	86 18       	sub	r8, r6
    12d0:	fb 2d       	mov	r31, r11
    12d2:	ff 77       	andi	r31, 0x7F	; 127
    12d4:	3f 2e       	mov	r3, r31
    12d6:	36 fe       	sbrs	r3, 6
    12d8:	0d c0       	rjmp	.+26     	; 0x12f4 <vfprintf+0x2ec>
    12da:	23 2d       	mov	r18, r3
    12dc:	2e 7f       	andi	r18, 0xFE	; 254
    12de:	a2 2e       	mov	r10, r18
    12e0:	89 14       	cp	r8, r9
    12e2:	58 f4       	brcc	.+22     	; 0x12fa <vfprintf+0x2f2>
    12e4:	34 fe       	sbrs	r3, 4
    12e6:	0b c0       	rjmp	.+22     	; 0x12fe <vfprintf+0x2f6>
    12e8:	32 fc       	sbrc	r3, 2
    12ea:	09 c0       	rjmp	.+18     	; 0x12fe <vfprintf+0x2f6>
    12ec:	83 2d       	mov	r24, r3
    12ee:	8e 7e       	andi	r24, 0xEE	; 238
    12f0:	a8 2e       	mov	r10, r24
    12f2:	05 c0       	rjmp	.+10     	; 0x12fe <vfprintf+0x2f6>
    12f4:	b8 2c       	mov	r11, r8
    12f6:	a3 2c       	mov	r10, r3
    12f8:	03 c0       	rjmp	.+6      	; 0x1300 <vfprintf+0x2f8>
    12fa:	b8 2c       	mov	r11, r8
    12fc:	01 c0       	rjmp	.+2      	; 0x1300 <vfprintf+0x2f8>
    12fe:	b9 2c       	mov	r11, r9
    1300:	a4 fe       	sbrs	r10, 4
    1302:	0f c0       	rjmp	.+30     	; 0x1322 <vfprintf+0x31a>
    1304:	fe 01       	movw	r30, r28
    1306:	e8 0d       	add	r30, r8
    1308:	f1 1d       	adc	r31, r1
    130a:	80 81       	ld	r24, Z
    130c:	80 33       	cpi	r24, 0x30	; 48
    130e:	21 f4       	brne	.+8      	; 0x1318 <vfprintf+0x310>
    1310:	9a 2d       	mov	r25, r10
    1312:	99 7e       	andi	r25, 0xE9	; 233
    1314:	a9 2e       	mov	r10, r25
    1316:	09 c0       	rjmp	.+18     	; 0x132a <vfprintf+0x322>
    1318:	a2 fe       	sbrs	r10, 2
    131a:	06 c0       	rjmp	.+12     	; 0x1328 <vfprintf+0x320>
    131c:	b3 94       	inc	r11
    131e:	b3 94       	inc	r11
    1320:	04 c0       	rjmp	.+8      	; 0x132a <vfprintf+0x322>
    1322:	8a 2d       	mov	r24, r10
    1324:	86 78       	andi	r24, 0x86	; 134
    1326:	09 f0       	breq	.+2      	; 0x132a <vfprintf+0x322>
    1328:	b3 94       	inc	r11
    132a:	a3 fc       	sbrc	r10, 3
    132c:	11 c0       	rjmp	.+34     	; 0x1350 <vfprintf+0x348>
    132e:	a0 fe       	sbrs	r10, 0
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0x336>
    1332:	b2 14       	cp	r11, r2
    1334:	88 f4       	brcc	.+34     	; 0x1358 <vfprintf+0x350>
    1336:	28 0c       	add	r2, r8
    1338:	92 2c       	mov	r9, r2
    133a:	9b 18       	sub	r9, r11
    133c:	0e c0       	rjmp	.+28     	; 0x135a <vfprintf+0x352>
    133e:	b2 14       	cp	r11, r2
    1340:	60 f4       	brcc	.+24     	; 0x135a <vfprintf+0x352>
    1342:	b6 01       	movw	r22, r12
    1344:	80 e2       	ldi	r24, 0x20	; 32
    1346:	90 e0       	ldi	r25, 0x00	; 0
    1348:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    134c:	b3 94       	inc	r11
    134e:	f7 cf       	rjmp	.-18     	; 0x133e <vfprintf+0x336>
    1350:	b2 14       	cp	r11, r2
    1352:	18 f4       	brcc	.+6      	; 0x135a <vfprintf+0x352>
    1354:	2b 18       	sub	r2, r11
    1356:	02 c0       	rjmp	.+4      	; 0x135c <vfprintf+0x354>
    1358:	98 2c       	mov	r9, r8
    135a:	21 2c       	mov	r2, r1
    135c:	a4 fe       	sbrs	r10, 4
    135e:	10 c0       	rjmp	.+32     	; 0x1380 <vfprintf+0x378>
    1360:	b6 01       	movw	r22, r12
    1362:	80 e3       	ldi	r24, 0x30	; 48
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    136a:	a2 fe       	sbrs	r10, 2
    136c:	17 c0       	rjmp	.+46     	; 0x139c <vfprintf+0x394>
    136e:	a1 fc       	sbrc	r10, 1
    1370:	03 c0       	rjmp	.+6      	; 0x1378 <vfprintf+0x370>
    1372:	88 e7       	ldi	r24, 0x78	; 120
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	02 c0       	rjmp	.+4      	; 0x137c <vfprintf+0x374>
    1378:	88 e5       	ldi	r24, 0x58	; 88
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	b6 01       	movw	r22, r12
    137e:	0c c0       	rjmp	.+24     	; 0x1398 <vfprintf+0x390>
    1380:	8a 2d       	mov	r24, r10
    1382:	86 78       	andi	r24, 0x86	; 134
    1384:	59 f0       	breq	.+22     	; 0x139c <vfprintf+0x394>
    1386:	a1 fe       	sbrs	r10, 1
    1388:	02 c0       	rjmp	.+4      	; 0x138e <vfprintf+0x386>
    138a:	8b e2       	ldi	r24, 0x2B	; 43
    138c:	01 c0       	rjmp	.+2      	; 0x1390 <vfprintf+0x388>
    138e:	80 e2       	ldi	r24, 0x20	; 32
    1390:	a7 fc       	sbrc	r10, 7
    1392:	8d e2       	ldi	r24, 0x2D	; 45
    1394:	b6 01       	movw	r22, r12
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    139c:	89 14       	cp	r8, r9
    139e:	38 f4       	brcc	.+14     	; 0x13ae <vfprintf+0x3a6>
    13a0:	b6 01       	movw	r22, r12
    13a2:	80 e3       	ldi	r24, 0x30	; 48
    13a4:	90 e0       	ldi	r25, 0x00	; 0
    13a6:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    13aa:	9a 94       	dec	r9
    13ac:	f7 cf       	rjmp	.-18     	; 0x139c <vfprintf+0x394>
    13ae:	8a 94       	dec	r8
    13b0:	f3 01       	movw	r30, r6
    13b2:	e8 0d       	add	r30, r8
    13b4:	f1 1d       	adc	r31, r1
    13b6:	80 81       	ld	r24, Z
    13b8:	b6 01       	movw	r22, r12
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    13c0:	81 10       	cpse	r8, r1
    13c2:	f5 cf       	rjmp	.-22     	; 0x13ae <vfprintf+0x3a6>
    13c4:	22 20       	and	r2, r2
    13c6:	09 f4       	brne	.+2      	; 0x13ca <vfprintf+0x3c2>
    13c8:	42 ce       	rjmp	.-892    	; 0x104e <vfprintf+0x46>
    13ca:	b6 01       	movw	r22, r12
    13cc:	80 e2       	ldi	r24, 0x20	; 32
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 67 0c 	call	0x18ce	; 0x18ce <fputc>
    13d4:	2a 94       	dec	r2
    13d6:	f6 cf       	rjmp	.-20     	; 0x13c4 <vfprintf+0x3bc>
    13d8:	f6 01       	movw	r30, r12
    13da:	86 81       	ldd	r24, Z+6	; 0x06
    13dc:	97 81       	ldd	r25, Z+7	; 0x07
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <vfprintf+0x3dc>
    13e0:	8f ef       	ldi	r24, 0xFF	; 255
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	2b 96       	adiw	r28, 0x0b	; 11
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	de bf       	out	0x3e, r29	; 62
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	ff 90       	pop	r15
    13f4:	ef 90       	pop	r14
    13f6:	df 90       	pop	r13
    13f8:	cf 90       	pop	r12
    13fa:	bf 90       	pop	r11
    13fc:	af 90       	pop	r10
    13fe:	9f 90       	pop	r9
    1400:	8f 90       	pop	r8
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	3f 90       	pop	r3
    140c:	2f 90       	pop	r2
    140e:	08 95       	ret

00001410 <dtoa_prf>:
    1410:	8f 92       	push	r8
    1412:	9f 92       	push	r9
    1414:	af 92       	push	r10
    1416:	bf 92       	push	r11
    1418:	cf 92       	push	r12
    141a:	df 92       	push	r13
    141c:	ef 92       	push	r14
    141e:	ff 92       	push	r15
    1420:	0f 93       	push	r16
    1422:	1f 93       	push	r17
    1424:	cf 93       	push	r28
    1426:	df 93       	push	r29
    1428:	cd b7       	in	r28, 0x3d	; 61
    142a:	de b7       	in	r29, 0x3e	; 62
    142c:	29 97       	sbiw	r28, 0x09	; 9
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	6a 01       	movw	r12, r20
    1434:	12 2f       	mov	r17, r18
    1436:	b0 2e       	mov	r11, r16
    1438:	2b e3       	ldi	r18, 0x3B	; 59
    143a:	20 17       	cp	r18, r16
    143c:	20 f0       	brcs	.+8      	; 0x1446 <dtoa_prf+0x36>
    143e:	ff 24       	eor	r15, r15
    1440:	f3 94       	inc	r15
    1442:	f0 0e       	add	r15, r16
    1444:	02 c0       	rjmp	.+4      	; 0x144a <dtoa_prf+0x3a>
    1446:	2c e3       	ldi	r18, 0x3C	; 60
    1448:	f2 2e       	mov	r15, r18
    144a:	0f 2d       	mov	r16, r15
    144c:	27 e0       	ldi	r18, 0x07	; 7
    144e:	ae 01       	movw	r20, r28
    1450:	4f 5f       	subi	r20, 0xFF	; 255
    1452:	5f 4f       	sbci	r21, 0xFF	; 255
    1454:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <__ftoa_engine>
    1458:	bc 01       	movw	r22, r24
    145a:	49 81       	ldd	r20, Y+1	; 0x01
    145c:	84 2f       	mov	r24, r20
    145e:	89 70       	andi	r24, 0x09	; 9
    1460:	81 30       	cpi	r24, 0x01	; 1
    1462:	31 f0       	breq	.+12     	; 0x1470 <dtoa_prf+0x60>
    1464:	e1 fc       	sbrc	r14, 1
    1466:	06 c0       	rjmp	.+12     	; 0x1474 <dtoa_prf+0x64>
    1468:	e0 fe       	sbrs	r14, 0
    146a:	06 c0       	rjmp	.+12     	; 0x1478 <dtoa_prf+0x68>
    146c:	90 e2       	ldi	r25, 0x20	; 32
    146e:	05 c0       	rjmp	.+10     	; 0x147a <dtoa_prf+0x6a>
    1470:	9d e2       	ldi	r25, 0x2D	; 45
    1472:	03 c0       	rjmp	.+6      	; 0x147a <dtoa_prf+0x6a>
    1474:	9b e2       	ldi	r25, 0x2B	; 43
    1476:	01 c0       	rjmp	.+2      	; 0x147a <dtoa_prf+0x6a>
    1478:	90 e0       	ldi	r25, 0x00	; 0
    147a:	5e 2d       	mov	r21, r14
    147c:	50 71       	andi	r21, 0x10	; 16
    147e:	43 ff       	sbrs	r20, 3
    1480:	3c c0       	rjmp	.+120    	; 0x14fa <dtoa_prf+0xea>
    1482:	91 11       	cpse	r25, r1
    1484:	02 c0       	rjmp	.+4      	; 0x148a <dtoa_prf+0x7a>
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	01 c0       	rjmp	.+2      	; 0x148c <dtoa_prf+0x7c>
    148a:	84 e0       	ldi	r24, 0x04	; 4
    148c:	81 17       	cp	r24, r17
    148e:	18 f4       	brcc	.+6      	; 0x1496 <dtoa_prf+0x86>
    1490:	21 2f       	mov	r18, r17
    1492:	28 1b       	sub	r18, r24
    1494:	01 c0       	rjmp	.+2      	; 0x1498 <dtoa_prf+0x88>
    1496:	20 e0       	ldi	r18, 0x00	; 0
    1498:	51 11       	cpse	r21, r1
    149a:	0b c0       	rjmp	.+22     	; 0x14b2 <dtoa_prf+0xa2>
    149c:	f6 01       	movw	r30, r12
    149e:	82 2f       	mov	r24, r18
    14a0:	30 e2       	ldi	r19, 0x20	; 32
    14a2:	88 23       	and	r24, r24
    14a4:	19 f0       	breq	.+6      	; 0x14ac <dtoa_prf+0x9c>
    14a6:	31 93       	st	Z+, r19
    14a8:	81 50       	subi	r24, 0x01	; 1
    14aa:	fb cf       	rjmp	.-10     	; 0x14a2 <dtoa_prf+0x92>
    14ac:	c2 0e       	add	r12, r18
    14ae:	d1 1c       	adc	r13, r1
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	99 23       	and	r25, r25
    14b4:	29 f0       	breq	.+10     	; 0x14c0 <dtoa_prf+0xb0>
    14b6:	d6 01       	movw	r26, r12
    14b8:	9c 93       	st	X, r25
    14ba:	f6 01       	movw	r30, r12
    14bc:	31 96       	adiw	r30, 0x01	; 1
    14be:	6f 01       	movw	r12, r30
    14c0:	c6 01       	movw	r24, r12
    14c2:	03 96       	adiw	r24, 0x03	; 3
    14c4:	e2 fe       	sbrs	r14, 2
    14c6:	0a c0       	rjmp	.+20     	; 0x14dc <dtoa_prf+0xcc>
    14c8:	3e e4       	ldi	r19, 0x4E	; 78
    14ca:	d6 01       	movw	r26, r12
    14cc:	3c 93       	st	X, r19
    14ce:	41 e4       	ldi	r20, 0x41	; 65
    14d0:	11 96       	adiw	r26, 0x01	; 1
    14d2:	4c 93       	st	X, r20
    14d4:	11 97       	sbiw	r26, 0x01	; 1
    14d6:	12 96       	adiw	r26, 0x02	; 2
    14d8:	3c 93       	st	X, r19
    14da:	06 c0       	rjmp	.+12     	; 0x14e8 <dtoa_prf+0xd8>
    14dc:	3e e6       	ldi	r19, 0x6E	; 110
    14de:	f6 01       	movw	r30, r12
    14e0:	30 83       	st	Z, r19
    14e2:	41 e6       	ldi	r20, 0x61	; 97
    14e4:	41 83       	std	Z+1, r20	; 0x01
    14e6:	32 83       	std	Z+2, r19	; 0x02
    14e8:	fc 01       	movw	r30, r24
    14ea:	32 2f       	mov	r19, r18
    14ec:	40 e2       	ldi	r20, 0x20	; 32
    14ee:	33 23       	and	r19, r19
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <dtoa_prf+0xe4>
    14f2:	42 c0       	rjmp	.+132    	; 0x1578 <dtoa_prf+0x168>
    14f4:	41 93       	st	Z+, r20
    14f6:	31 50       	subi	r19, 0x01	; 1
    14f8:	fa cf       	rjmp	.-12     	; 0x14ee <dtoa_prf+0xde>
    14fa:	42 ff       	sbrs	r20, 2
    14fc:	44 c0       	rjmp	.+136    	; 0x1586 <dtoa_prf+0x176>
    14fe:	91 11       	cpse	r25, r1
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <dtoa_prf+0xf6>
    1502:	83 e0       	ldi	r24, 0x03	; 3
    1504:	01 c0       	rjmp	.+2      	; 0x1508 <dtoa_prf+0xf8>
    1506:	84 e0       	ldi	r24, 0x04	; 4
    1508:	81 17       	cp	r24, r17
    150a:	18 f4       	brcc	.+6      	; 0x1512 <dtoa_prf+0x102>
    150c:	21 2f       	mov	r18, r17
    150e:	28 1b       	sub	r18, r24
    1510:	01 c0       	rjmp	.+2      	; 0x1514 <dtoa_prf+0x104>
    1512:	20 e0       	ldi	r18, 0x00	; 0
    1514:	51 11       	cpse	r21, r1
    1516:	0b c0       	rjmp	.+22     	; 0x152e <dtoa_prf+0x11e>
    1518:	f6 01       	movw	r30, r12
    151a:	82 2f       	mov	r24, r18
    151c:	30 e2       	ldi	r19, 0x20	; 32
    151e:	88 23       	and	r24, r24
    1520:	19 f0       	breq	.+6      	; 0x1528 <dtoa_prf+0x118>
    1522:	31 93       	st	Z+, r19
    1524:	81 50       	subi	r24, 0x01	; 1
    1526:	fb cf       	rjmp	.-10     	; 0x151e <dtoa_prf+0x10e>
    1528:	c2 0e       	add	r12, r18
    152a:	d1 1c       	adc	r13, r1
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	99 23       	and	r25, r25
    1530:	29 f0       	breq	.+10     	; 0x153c <dtoa_prf+0x12c>
    1532:	d6 01       	movw	r26, r12
    1534:	9c 93       	st	X, r25
    1536:	f6 01       	movw	r30, r12
    1538:	31 96       	adiw	r30, 0x01	; 1
    153a:	6f 01       	movw	r12, r30
    153c:	c6 01       	movw	r24, r12
    153e:	03 96       	adiw	r24, 0x03	; 3
    1540:	e2 fe       	sbrs	r14, 2
    1542:	0b c0       	rjmp	.+22     	; 0x155a <dtoa_prf+0x14a>
    1544:	39 e4       	ldi	r19, 0x49	; 73
    1546:	d6 01       	movw	r26, r12
    1548:	3c 93       	st	X, r19
    154a:	3e e4       	ldi	r19, 0x4E	; 78
    154c:	11 96       	adiw	r26, 0x01	; 1
    154e:	3c 93       	st	X, r19
    1550:	11 97       	sbiw	r26, 0x01	; 1
    1552:	36 e4       	ldi	r19, 0x46	; 70
    1554:	12 96       	adiw	r26, 0x02	; 2
    1556:	3c 93       	st	X, r19
    1558:	07 c0       	rjmp	.+14     	; 0x1568 <dtoa_prf+0x158>
    155a:	39 e6       	ldi	r19, 0x69	; 105
    155c:	f6 01       	movw	r30, r12
    155e:	30 83       	st	Z, r19
    1560:	3e e6       	ldi	r19, 0x6E	; 110
    1562:	31 83       	std	Z+1, r19	; 0x01
    1564:	36 e6       	ldi	r19, 0x66	; 102
    1566:	32 83       	std	Z+2, r19	; 0x02
    1568:	fc 01       	movw	r30, r24
    156a:	32 2f       	mov	r19, r18
    156c:	40 e2       	ldi	r20, 0x20	; 32
    156e:	33 23       	and	r19, r19
    1570:	19 f0       	breq	.+6      	; 0x1578 <dtoa_prf+0x168>
    1572:	41 93       	st	Z+, r20
    1574:	31 50       	subi	r19, 0x01	; 1
    1576:	fb cf       	rjmp	.-10     	; 0x156e <dtoa_prf+0x15e>
    1578:	fc 01       	movw	r30, r24
    157a:	e2 0f       	add	r30, r18
    157c:	f1 1d       	adc	r31, r1
    157e:	10 82       	st	Z, r1
    1580:	8e ef       	ldi	r24, 0xFE	; 254
    1582:	9f ef       	ldi	r25, 0xFF	; 255
    1584:	a6 c0       	rjmp	.+332    	; 0x16d2 <dtoa_prf+0x2c2>
    1586:	21 e0       	ldi	r18, 0x01	; 1
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	91 11       	cpse	r25, r1
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <dtoa_prf+0x182>
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	16 16       	cp	r1, r22
    1594:	17 06       	cpc	r1, r23
    1596:	1c f4       	brge	.+6      	; 0x159e <dtoa_prf+0x18e>
    1598:	fb 01       	movw	r30, r22
    159a:	31 96       	adiw	r30, 0x01	; 1
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <dtoa_prf+0x192>
    159e:	e1 e0       	ldi	r30, 0x01	; 1
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	2e 0f       	add	r18, r30
    15a4:	3f 1f       	adc	r19, r31
    15a6:	bb 20       	and	r11, r11
    15a8:	21 f0       	breq	.+8      	; 0x15b2 <dtoa_prf+0x1a2>
    15aa:	eb 2d       	mov	r30, r11
    15ac:	f0 e0       	ldi	r31, 0x00	; 0
    15ae:	31 96       	adiw	r30, 0x01	; 1
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <dtoa_prf+0x1a6>
    15b2:	e0 e0       	ldi	r30, 0x00	; 0
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	2e 0f       	add	r18, r30
    15b8:	3f 1f       	adc	r19, r31
    15ba:	e1 2f       	mov	r30, r17
    15bc:	f0 e0       	ldi	r31, 0x00	; 0
    15be:	2e 17       	cp	r18, r30
    15c0:	3f 07       	cpc	r19, r31
    15c2:	1c f4       	brge	.+6      	; 0x15ca <dtoa_prf+0x1ba>
    15c4:	12 1b       	sub	r17, r18
    15c6:	21 2f       	mov	r18, r17
    15c8:	01 c0       	rjmp	.+2      	; 0x15cc <dtoa_prf+0x1bc>
    15ca:	20 e0       	ldi	r18, 0x00	; 0
    15cc:	8e 2d       	mov	r24, r14
    15ce:	88 71       	andi	r24, 0x18	; 24
    15d0:	59 f4       	brne	.+22     	; 0x15e8 <dtoa_prf+0x1d8>
    15d2:	f6 01       	movw	r30, r12
    15d4:	82 2f       	mov	r24, r18
    15d6:	30 e2       	ldi	r19, 0x20	; 32
    15d8:	88 23       	and	r24, r24
    15da:	19 f0       	breq	.+6      	; 0x15e2 <dtoa_prf+0x1d2>
    15dc:	31 93       	st	Z+, r19
    15de:	81 50       	subi	r24, 0x01	; 1
    15e0:	fb cf       	rjmp	.-10     	; 0x15d8 <dtoa_prf+0x1c8>
    15e2:	c2 0e       	add	r12, r18
    15e4:	d1 1c       	adc	r13, r1
    15e6:	20 e0       	ldi	r18, 0x00	; 0
    15e8:	99 23       	and	r25, r25
    15ea:	29 f0       	breq	.+10     	; 0x15f6 <dtoa_prf+0x1e6>
    15ec:	d6 01       	movw	r26, r12
    15ee:	9c 93       	st	X, r25
    15f0:	f6 01       	movw	r30, r12
    15f2:	31 96       	adiw	r30, 0x01	; 1
    15f4:	6f 01       	movw	r12, r30
    15f6:	51 11       	cpse	r21, r1
    15f8:	0b c0       	rjmp	.+22     	; 0x1610 <dtoa_prf+0x200>
    15fa:	f6 01       	movw	r30, r12
    15fc:	82 2f       	mov	r24, r18
    15fe:	90 e3       	ldi	r25, 0x30	; 48
    1600:	88 23       	and	r24, r24
    1602:	19 f0       	breq	.+6      	; 0x160a <dtoa_prf+0x1fa>
    1604:	91 93       	st	Z+, r25
    1606:	81 50       	subi	r24, 0x01	; 1
    1608:	fb cf       	rjmp	.-10     	; 0x1600 <dtoa_prf+0x1f0>
    160a:	c2 0e       	add	r12, r18
    160c:	d1 1c       	adc	r13, r1
    160e:	20 e0       	ldi	r18, 0x00	; 0
    1610:	0f 2d       	mov	r16, r15
    1612:	06 0f       	add	r16, r22
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	34 2f       	mov	r19, r20
    1618:	30 71       	andi	r19, 0x10	; 16
    161a:	44 ff       	sbrs	r20, 4
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <dtoa_prf+0x214>
    161e:	91 33       	cpi	r25, 0x31	; 49
    1620:	09 f4       	brne	.+2      	; 0x1624 <dtoa_prf+0x214>
    1622:	01 50       	subi	r16, 0x01	; 1
    1624:	10 16       	cp	r1, r16
    1626:	24 f4       	brge	.+8      	; 0x1630 <dtoa_prf+0x220>
    1628:	09 30       	cpi	r16, 0x09	; 9
    162a:	18 f0       	brcs	.+6      	; 0x1632 <dtoa_prf+0x222>
    162c:	08 e0       	ldi	r16, 0x08	; 8
    162e:	01 c0       	rjmp	.+2      	; 0x1632 <dtoa_prf+0x222>
    1630:	01 e0       	ldi	r16, 0x01	; 1
    1632:	ab 01       	movw	r20, r22
    1634:	77 ff       	sbrs	r23, 7
    1636:	02 c0       	rjmp	.+4      	; 0x163c <dtoa_prf+0x22c>
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	fb 01       	movw	r30, r22
    163e:	e4 1b       	sub	r30, r20
    1640:	f5 0b       	sbc	r31, r21
    1642:	a1 e0       	ldi	r26, 0x01	; 1
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ac 0f       	add	r26, r28
    1648:	bd 1f       	adc	r27, r29
    164a:	ea 0f       	add	r30, r26
    164c:	fb 1f       	adc	r31, r27
    164e:	8e e2       	ldi	r24, 0x2E	; 46
    1650:	a8 2e       	mov	r10, r24
    1652:	4b 01       	movw	r8, r22
    1654:	80 1a       	sub	r8, r16
    1656:	91 08       	sbc	r9, r1
    1658:	0b 2d       	mov	r16, r11
    165a:	10 e0       	ldi	r17, 0x00	; 0
    165c:	11 95       	neg	r17
    165e:	01 95       	neg	r16
    1660:	11 09       	sbc	r17, r1
    1662:	4f 3f       	cpi	r20, 0xFF	; 255
    1664:	bf ef       	ldi	r27, 0xFF	; 255
    1666:	5b 07       	cpc	r21, r27
    1668:	21 f4       	brne	.+8      	; 0x1672 <dtoa_prf+0x262>
    166a:	d6 01       	movw	r26, r12
    166c:	ac 92       	st	X, r10
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	6d 01       	movw	r12, r26
    1672:	64 17       	cp	r22, r20
    1674:	75 07       	cpc	r23, r21
    1676:	2c f0       	brlt	.+10     	; 0x1682 <dtoa_prf+0x272>
    1678:	84 16       	cp	r8, r20
    167a:	95 06       	cpc	r9, r21
    167c:	14 f4       	brge	.+4      	; 0x1682 <dtoa_prf+0x272>
    167e:	81 81       	ldd	r24, Z+1	; 0x01
    1680:	01 c0       	rjmp	.+2      	; 0x1684 <dtoa_prf+0x274>
    1682:	80 e3       	ldi	r24, 0x30	; 48
    1684:	41 50       	subi	r20, 0x01	; 1
    1686:	51 09       	sbc	r21, r1
    1688:	31 96       	adiw	r30, 0x01	; 1
    168a:	d6 01       	movw	r26, r12
    168c:	11 96       	adiw	r26, 0x01	; 1
    168e:	7d 01       	movw	r14, r26
    1690:	40 17       	cp	r20, r16
    1692:	51 07       	cpc	r21, r17
    1694:	24 f0       	brlt	.+8      	; 0x169e <dtoa_prf+0x28e>
    1696:	d6 01       	movw	r26, r12
    1698:	8c 93       	st	X, r24
    169a:	67 01       	movw	r12, r14
    169c:	e2 cf       	rjmp	.-60     	; 0x1662 <dtoa_prf+0x252>
    169e:	64 17       	cp	r22, r20
    16a0:	75 07       	cpc	r23, r21
    16a2:	39 f4       	brne	.+14     	; 0x16b2 <dtoa_prf+0x2a2>
    16a4:	96 33       	cpi	r25, 0x36	; 54
    16a6:	20 f4       	brcc	.+8      	; 0x16b0 <dtoa_prf+0x2a0>
    16a8:	95 33       	cpi	r25, 0x35	; 53
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <dtoa_prf+0x2a2>
    16ac:	31 11       	cpse	r19, r1
    16ae:	01 c0       	rjmp	.+2      	; 0x16b2 <dtoa_prf+0x2a2>
    16b0:	81 e3       	ldi	r24, 0x31	; 49
    16b2:	f6 01       	movw	r30, r12
    16b4:	80 83       	st	Z, r24
    16b6:	f7 01       	movw	r30, r14
    16b8:	82 2f       	mov	r24, r18
    16ba:	90 e2       	ldi	r25, 0x20	; 32
    16bc:	88 23       	and	r24, r24
    16be:	19 f0       	breq	.+6      	; 0x16c6 <dtoa_prf+0x2b6>
    16c0:	91 93       	st	Z+, r25
    16c2:	81 50       	subi	r24, 0x01	; 1
    16c4:	fb cf       	rjmp	.-10     	; 0x16bc <dtoa_prf+0x2ac>
    16c6:	f7 01       	movw	r30, r14
    16c8:	e2 0f       	add	r30, r18
    16ca:	f1 1d       	adc	r31, r1
    16cc:	10 82       	st	Z, r1
    16ce:	80 e0       	ldi	r24, 0x00	; 0
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	29 96       	adiw	r28, 0x09	; 9
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	de bf       	out	0x3e, r29	; 62
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	ff 90       	pop	r15
    16e2:	ef 90       	pop	r14
    16e4:	df 90       	pop	r13
    16e6:	cf 90       	pop	r12
    16e8:	bf 90       	pop	r11
    16ea:	af 90       	pop	r10
    16ec:	9f 90       	pop	r9
    16ee:	8f 90       	pop	r8
    16f0:	08 95       	ret

000016f2 <__ftoa_engine>:
    16f2:	28 30       	cpi	r18, 0x08	; 8
    16f4:	08 f0       	brcs	.+2      	; 0x16f8 <__ftoa_engine+0x6>
    16f6:	27 e0       	ldi	r18, 0x07	; 7
    16f8:	33 27       	eor	r19, r19
    16fa:	da 01       	movw	r26, r20
    16fc:	99 0f       	add	r25, r25
    16fe:	31 1d       	adc	r19, r1
    1700:	87 fd       	sbrc	r24, 7
    1702:	91 60       	ori	r25, 0x01	; 1
    1704:	00 96       	adiw	r24, 0x00	; 0
    1706:	61 05       	cpc	r22, r1
    1708:	71 05       	cpc	r23, r1
    170a:	39 f4       	brne	.+14     	; 0x171a <__ftoa_engine+0x28>
    170c:	32 60       	ori	r19, 0x02	; 2
    170e:	2e 5f       	subi	r18, 0xFE	; 254
    1710:	3d 93       	st	X+, r19
    1712:	30 e3       	ldi	r19, 0x30	; 48
    1714:	2a 95       	dec	r18
    1716:	e1 f7       	brne	.-8      	; 0x1710 <__ftoa_engine+0x1e>
    1718:	08 95       	ret
    171a:	9f 3f       	cpi	r25, 0xFF	; 255
    171c:	30 f0       	brcs	.+12     	; 0x172a <__ftoa_engine+0x38>
    171e:	80 38       	cpi	r24, 0x80	; 128
    1720:	71 05       	cpc	r23, r1
    1722:	61 05       	cpc	r22, r1
    1724:	09 f0       	breq	.+2      	; 0x1728 <__ftoa_engine+0x36>
    1726:	3c 5f       	subi	r19, 0xFC	; 252
    1728:	3c 5f       	subi	r19, 0xFC	; 252
    172a:	3d 93       	st	X+, r19
    172c:	91 30       	cpi	r25, 0x01	; 1
    172e:	08 f0       	brcs	.+2      	; 0x1732 <__ftoa_engine+0x40>
    1730:	80 68       	ori	r24, 0x80	; 128
    1732:	91 1d       	adc	r25, r1
    1734:	df 93       	push	r29
    1736:	cf 93       	push	r28
    1738:	1f 93       	push	r17
    173a:	0f 93       	push	r16
    173c:	ff 92       	push	r15
    173e:	ef 92       	push	r14
    1740:	19 2f       	mov	r17, r25
    1742:	98 7f       	andi	r25, 0xF8	; 248
    1744:	96 95       	lsr	r25
    1746:	e9 2f       	mov	r30, r25
    1748:	96 95       	lsr	r25
    174a:	96 95       	lsr	r25
    174c:	e9 0f       	add	r30, r25
    174e:	ff 27       	eor	r31, r31
    1750:	e2 5b       	subi	r30, 0xB2	; 178
    1752:	fe 4f       	sbci	r31, 0xFE	; 254
    1754:	99 27       	eor	r25, r25
    1756:	33 27       	eor	r19, r19
    1758:	ee 24       	eor	r14, r14
    175a:	ff 24       	eor	r15, r15
    175c:	a7 01       	movw	r20, r14
    175e:	e7 01       	movw	r28, r14
    1760:	05 90       	lpm	r0, Z+
    1762:	08 94       	sec
    1764:	07 94       	ror	r0
    1766:	28 f4       	brcc	.+10     	; 0x1772 <__ftoa_engine+0x80>
    1768:	36 0f       	add	r19, r22
    176a:	e7 1e       	adc	r14, r23
    176c:	f8 1e       	adc	r15, r24
    176e:	49 1f       	adc	r20, r25
    1770:	51 1d       	adc	r21, r1
    1772:	66 0f       	add	r22, r22
    1774:	77 1f       	adc	r23, r23
    1776:	88 1f       	adc	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	06 94       	lsr	r0
    177c:	a1 f7       	brne	.-24     	; 0x1766 <__ftoa_engine+0x74>
    177e:	05 90       	lpm	r0, Z+
    1780:	07 94       	ror	r0
    1782:	28 f4       	brcc	.+10     	; 0x178e <__ftoa_engine+0x9c>
    1784:	e7 0e       	add	r14, r23
    1786:	f8 1e       	adc	r15, r24
    1788:	49 1f       	adc	r20, r25
    178a:	56 1f       	adc	r21, r22
    178c:	c1 1d       	adc	r28, r1
    178e:	77 0f       	add	r23, r23
    1790:	88 1f       	adc	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	66 1f       	adc	r22, r22
    1796:	06 94       	lsr	r0
    1798:	a1 f7       	brne	.-24     	; 0x1782 <__ftoa_engine+0x90>
    179a:	05 90       	lpm	r0, Z+
    179c:	07 94       	ror	r0
    179e:	28 f4       	brcc	.+10     	; 0x17aa <__ftoa_engine+0xb8>
    17a0:	f8 0e       	add	r15, r24
    17a2:	49 1f       	adc	r20, r25
    17a4:	56 1f       	adc	r21, r22
    17a6:	c7 1f       	adc	r28, r23
    17a8:	d1 1d       	adc	r29, r1
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	66 1f       	adc	r22, r22
    17b0:	77 1f       	adc	r23, r23
    17b2:	06 94       	lsr	r0
    17b4:	a1 f7       	brne	.-24     	; 0x179e <__ftoa_engine+0xac>
    17b6:	05 90       	lpm	r0, Z+
    17b8:	07 94       	ror	r0
    17ba:	20 f4       	brcc	.+8      	; 0x17c4 <__ftoa_engine+0xd2>
    17bc:	49 0f       	add	r20, r25
    17be:	56 1f       	adc	r21, r22
    17c0:	c7 1f       	adc	r28, r23
    17c2:	d8 1f       	adc	r29, r24
    17c4:	99 0f       	add	r25, r25
    17c6:	66 1f       	adc	r22, r22
    17c8:	77 1f       	adc	r23, r23
    17ca:	88 1f       	adc	r24, r24
    17cc:	06 94       	lsr	r0
    17ce:	a9 f7       	brne	.-22     	; 0x17ba <__ftoa_engine+0xc8>
    17d0:	84 91       	lpm	r24, Z
    17d2:	10 95       	com	r17
    17d4:	17 70       	andi	r17, 0x07	; 7
    17d6:	41 f0       	breq	.+16     	; 0x17e8 <__ftoa_engine+0xf6>
    17d8:	d6 95       	lsr	r29
    17da:	c7 95       	ror	r28
    17dc:	57 95       	ror	r21
    17de:	47 95       	ror	r20
    17e0:	f7 94       	ror	r15
    17e2:	e7 94       	ror	r14
    17e4:	1a 95       	dec	r17
    17e6:	c1 f7       	brne	.-16     	; 0x17d8 <__ftoa_engine+0xe6>
    17e8:	e4 ef       	ldi	r30, 0xF4	; 244
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	68 94       	set
    17ee:	15 90       	lpm	r1, Z+
    17f0:	15 91       	lpm	r17, Z+
    17f2:	35 91       	lpm	r19, Z+
    17f4:	65 91       	lpm	r22, Z+
    17f6:	95 91       	lpm	r25, Z+
    17f8:	05 90       	lpm	r0, Z+
    17fa:	7f e2       	ldi	r23, 0x2F	; 47
    17fc:	73 95       	inc	r23
    17fe:	e1 18       	sub	r14, r1
    1800:	f1 0a       	sbc	r15, r17
    1802:	43 0b       	sbc	r20, r19
    1804:	56 0b       	sbc	r21, r22
    1806:	c9 0b       	sbc	r28, r25
    1808:	d0 09       	sbc	r29, r0
    180a:	c0 f7       	brcc	.-16     	; 0x17fc <__ftoa_engine+0x10a>
    180c:	e1 0c       	add	r14, r1
    180e:	f1 1e       	adc	r15, r17
    1810:	43 1f       	adc	r20, r19
    1812:	56 1f       	adc	r21, r22
    1814:	c9 1f       	adc	r28, r25
    1816:	d0 1d       	adc	r29, r0
    1818:	7e f4       	brtc	.+30     	; 0x1838 <__ftoa_engine+0x146>
    181a:	70 33       	cpi	r23, 0x30	; 48
    181c:	11 f4       	brne	.+4      	; 0x1822 <__ftoa_engine+0x130>
    181e:	8a 95       	dec	r24
    1820:	e6 cf       	rjmp	.-52     	; 0x17ee <__ftoa_engine+0xfc>
    1822:	e8 94       	clt
    1824:	01 50       	subi	r16, 0x01	; 1
    1826:	30 f0       	brcs	.+12     	; 0x1834 <__ftoa_engine+0x142>
    1828:	08 0f       	add	r16, r24
    182a:	0a f4       	brpl	.+2      	; 0x182e <__ftoa_engine+0x13c>
    182c:	00 27       	eor	r16, r16
    182e:	02 17       	cp	r16, r18
    1830:	08 f4       	brcc	.+2      	; 0x1834 <__ftoa_engine+0x142>
    1832:	20 2f       	mov	r18, r16
    1834:	23 95       	inc	r18
    1836:	02 2f       	mov	r16, r18
    1838:	7a 33       	cpi	r23, 0x3A	; 58
    183a:	28 f0       	brcs	.+10     	; 0x1846 <__ftoa_engine+0x154>
    183c:	79 e3       	ldi	r23, 0x39	; 57
    183e:	7d 93       	st	X+, r23
    1840:	2a 95       	dec	r18
    1842:	e9 f7       	brne	.-6      	; 0x183e <__ftoa_engine+0x14c>
    1844:	10 c0       	rjmp	.+32     	; 0x1866 <__ftoa_engine+0x174>
    1846:	7d 93       	st	X+, r23
    1848:	2a 95       	dec	r18
    184a:	89 f6       	brne	.-94     	; 0x17ee <__ftoa_engine+0xfc>
    184c:	06 94       	lsr	r0
    184e:	97 95       	ror	r25
    1850:	67 95       	ror	r22
    1852:	37 95       	ror	r19
    1854:	17 95       	ror	r17
    1856:	17 94       	ror	r1
    1858:	e1 18       	sub	r14, r1
    185a:	f1 0a       	sbc	r15, r17
    185c:	43 0b       	sbc	r20, r19
    185e:	56 0b       	sbc	r21, r22
    1860:	c9 0b       	sbc	r28, r25
    1862:	d0 09       	sbc	r29, r0
    1864:	98 f0       	brcs	.+38     	; 0x188c <__ftoa_engine+0x19a>
    1866:	23 95       	inc	r18
    1868:	7e 91       	ld	r23, -X
    186a:	73 95       	inc	r23
    186c:	7a 33       	cpi	r23, 0x3A	; 58
    186e:	08 f0       	brcs	.+2      	; 0x1872 <__ftoa_engine+0x180>
    1870:	70 e3       	ldi	r23, 0x30	; 48
    1872:	7c 93       	st	X, r23
    1874:	20 13       	cpse	r18, r16
    1876:	b8 f7       	brcc	.-18     	; 0x1866 <__ftoa_engine+0x174>
    1878:	7e 91       	ld	r23, -X
    187a:	70 61       	ori	r23, 0x10	; 16
    187c:	7d 93       	st	X+, r23
    187e:	30 f0       	brcs	.+12     	; 0x188c <__ftoa_engine+0x19a>
    1880:	83 95       	inc	r24
    1882:	71 e3       	ldi	r23, 0x31	; 49
    1884:	7d 93       	st	X+, r23
    1886:	70 e3       	ldi	r23, 0x30	; 48
    1888:	2a 95       	dec	r18
    188a:	e1 f7       	brne	.-8      	; 0x1884 <__ftoa_engine+0x192>
    188c:	11 24       	eor	r1, r1
    188e:	ef 90       	pop	r14
    1890:	ff 90       	pop	r15
    1892:	0f 91       	pop	r16
    1894:	1f 91       	pop	r17
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	99 27       	eor	r25, r25
    189c:	87 fd       	sbrc	r24, 7
    189e:	90 95       	com	r25
    18a0:	08 95       	ret

000018a2 <strnlen_P>:
    18a2:	fc 01       	movw	r30, r24
    18a4:	05 90       	lpm	r0, Z+
    18a6:	61 50       	subi	r22, 0x01	; 1
    18a8:	70 40       	sbci	r23, 0x00	; 0
    18aa:	01 10       	cpse	r0, r1
    18ac:	d8 f7       	brcc	.-10     	; 0x18a4 <strnlen_P+0x2>
    18ae:	80 95       	com	r24
    18b0:	90 95       	com	r25
    18b2:	8e 0f       	add	r24, r30
    18b4:	9f 1f       	adc	r25, r31
    18b6:	08 95       	ret

000018b8 <strnlen>:
    18b8:	fc 01       	movw	r30, r24
    18ba:	61 50       	subi	r22, 0x01	; 1
    18bc:	70 40       	sbci	r23, 0x00	; 0
    18be:	01 90       	ld	r0, Z+
    18c0:	01 10       	cpse	r0, r1
    18c2:	d8 f7       	brcc	.-10     	; 0x18ba <strnlen+0x2>
    18c4:	80 95       	com	r24
    18c6:	90 95       	com	r25
    18c8:	8e 0f       	add	r24, r30
    18ca:	9f 1f       	adc	r25, r31
    18cc:	08 95       	ret

000018ce <fputc>:
    18ce:	0f 93       	push	r16
    18d0:	1f 93       	push	r17
    18d2:	cf 93       	push	r28
    18d4:	df 93       	push	r29
    18d6:	fb 01       	movw	r30, r22
    18d8:	23 81       	ldd	r18, Z+3	; 0x03
    18da:	21 fd       	sbrc	r18, 1
    18dc:	03 c0       	rjmp	.+6      	; 0x18e4 <fputc+0x16>
    18de:	8f ef       	ldi	r24, 0xFF	; 255
    18e0:	9f ef       	ldi	r25, 0xFF	; 255
    18e2:	2c c0       	rjmp	.+88     	; 0x193c <fputc+0x6e>
    18e4:	22 ff       	sbrs	r18, 2
    18e6:	16 c0       	rjmp	.+44     	; 0x1914 <fputc+0x46>
    18e8:	46 81       	ldd	r20, Z+6	; 0x06
    18ea:	57 81       	ldd	r21, Z+7	; 0x07
    18ec:	24 81       	ldd	r18, Z+4	; 0x04
    18ee:	35 81       	ldd	r19, Z+5	; 0x05
    18f0:	42 17       	cp	r20, r18
    18f2:	53 07       	cpc	r21, r19
    18f4:	44 f4       	brge	.+16     	; 0x1906 <fputc+0x38>
    18f6:	a0 81       	ld	r26, Z
    18f8:	b1 81       	ldd	r27, Z+1	; 0x01
    18fa:	9d 01       	movw	r18, r26
    18fc:	2f 5f       	subi	r18, 0xFF	; 255
    18fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1900:	20 83       	st	Z, r18
    1902:	31 83       	std	Z+1, r19	; 0x01
    1904:	8c 93       	st	X, r24
    1906:	26 81       	ldd	r18, Z+6	; 0x06
    1908:	37 81       	ldd	r19, Z+7	; 0x07
    190a:	2f 5f       	subi	r18, 0xFF	; 255
    190c:	3f 4f       	sbci	r19, 0xFF	; 255
    190e:	26 83       	std	Z+6, r18	; 0x06
    1910:	37 83       	std	Z+7, r19	; 0x07
    1912:	14 c0       	rjmp	.+40     	; 0x193c <fputc+0x6e>
    1914:	8b 01       	movw	r16, r22
    1916:	ec 01       	movw	r28, r24
    1918:	fb 01       	movw	r30, r22
    191a:	00 84       	ldd	r0, Z+8	; 0x08
    191c:	f1 85       	ldd	r31, Z+9	; 0x09
    191e:	e0 2d       	mov	r30, r0
    1920:	09 95       	icall
    1922:	89 2b       	or	r24, r25
    1924:	e1 f6       	brne	.-72     	; 0x18de <fputc+0x10>
    1926:	d8 01       	movw	r26, r16
    1928:	16 96       	adiw	r26, 0x06	; 6
    192a:	8d 91       	ld	r24, X+
    192c:	9c 91       	ld	r25, X
    192e:	17 97       	sbiw	r26, 0x07	; 7
    1930:	01 96       	adiw	r24, 0x01	; 1
    1932:	16 96       	adiw	r26, 0x06	; 6
    1934:	8d 93       	st	X+, r24
    1936:	9c 93       	st	X, r25
    1938:	17 97       	sbiw	r26, 0x07	; 7
    193a:	ce 01       	movw	r24, r28
    193c:	df 91       	pop	r29
    193e:	cf 91       	pop	r28
    1940:	1f 91       	pop	r17
    1942:	0f 91       	pop	r16
    1944:	08 95       	ret

00001946 <__ultoa_invert>:
    1946:	fa 01       	movw	r30, r20
    1948:	aa 27       	eor	r26, r26
    194a:	28 30       	cpi	r18, 0x08	; 8
    194c:	51 f1       	breq	.+84     	; 0x19a2 <__ultoa_invert+0x5c>
    194e:	20 31       	cpi	r18, 0x10	; 16
    1950:	81 f1       	breq	.+96     	; 0x19b2 <__ultoa_invert+0x6c>
    1952:	e8 94       	clt
    1954:	6f 93       	push	r22
    1956:	6e 7f       	andi	r22, 0xFE	; 254
    1958:	6e 5f       	subi	r22, 0xFE	; 254
    195a:	7f 4f       	sbci	r23, 0xFF	; 255
    195c:	8f 4f       	sbci	r24, 0xFF	; 255
    195e:	9f 4f       	sbci	r25, 0xFF	; 255
    1960:	af 4f       	sbci	r26, 0xFF	; 255
    1962:	b1 e0       	ldi	r27, 0x01	; 1
    1964:	3e d0       	rcall	.+124    	; 0x19e2 <__ultoa_invert+0x9c>
    1966:	b4 e0       	ldi	r27, 0x04	; 4
    1968:	3c d0       	rcall	.+120    	; 0x19e2 <__ultoa_invert+0x9c>
    196a:	67 0f       	add	r22, r23
    196c:	78 1f       	adc	r23, r24
    196e:	89 1f       	adc	r24, r25
    1970:	9a 1f       	adc	r25, r26
    1972:	a1 1d       	adc	r26, r1
    1974:	68 0f       	add	r22, r24
    1976:	79 1f       	adc	r23, r25
    1978:	8a 1f       	adc	r24, r26
    197a:	91 1d       	adc	r25, r1
    197c:	a1 1d       	adc	r26, r1
    197e:	6a 0f       	add	r22, r26
    1980:	71 1d       	adc	r23, r1
    1982:	81 1d       	adc	r24, r1
    1984:	91 1d       	adc	r25, r1
    1986:	a1 1d       	adc	r26, r1
    1988:	20 d0       	rcall	.+64     	; 0x19ca <__ultoa_invert+0x84>
    198a:	09 f4       	brne	.+2      	; 0x198e <__ultoa_invert+0x48>
    198c:	68 94       	set
    198e:	3f 91       	pop	r19
    1990:	2a e0       	ldi	r18, 0x0A	; 10
    1992:	26 9f       	mul	r18, r22
    1994:	11 24       	eor	r1, r1
    1996:	30 19       	sub	r19, r0
    1998:	30 5d       	subi	r19, 0xD0	; 208
    199a:	31 93       	st	Z+, r19
    199c:	de f6       	brtc	.-74     	; 0x1954 <__ultoa_invert+0xe>
    199e:	cf 01       	movw	r24, r30
    19a0:	08 95       	ret
    19a2:	46 2f       	mov	r20, r22
    19a4:	47 70       	andi	r20, 0x07	; 7
    19a6:	40 5d       	subi	r20, 0xD0	; 208
    19a8:	41 93       	st	Z+, r20
    19aa:	b3 e0       	ldi	r27, 0x03	; 3
    19ac:	0f d0       	rcall	.+30     	; 0x19cc <__ultoa_invert+0x86>
    19ae:	c9 f7       	brne	.-14     	; 0x19a2 <__ultoa_invert+0x5c>
    19b0:	f6 cf       	rjmp	.-20     	; 0x199e <__ultoa_invert+0x58>
    19b2:	46 2f       	mov	r20, r22
    19b4:	4f 70       	andi	r20, 0x0F	; 15
    19b6:	40 5d       	subi	r20, 0xD0	; 208
    19b8:	4a 33       	cpi	r20, 0x3A	; 58
    19ba:	18 f0       	brcs	.+6      	; 0x19c2 <__ultoa_invert+0x7c>
    19bc:	49 5d       	subi	r20, 0xD9	; 217
    19be:	31 fd       	sbrc	r19, 1
    19c0:	40 52       	subi	r20, 0x20	; 32
    19c2:	41 93       	st	Z+, r20
    19c4:	02 d0       	rcall	.+4      	; 0x19ca <__ultoa_invert+0x84>
    19c6:	a9 f7       	brne	.-22     	; 0x19b2 <__ultoa_invert+0x6c>
    19c8:	ea cf       	rjmp	.-44     	; 0x199e <__ultoa_invert+0x58>
    19ca:	b4 e0       	ldi	r27, 0x04	; 4
    19cc:	a6 95       	lsr	r26
    19ce:	97 95       	ror	r25
    19d0:	87 95       	ror	r24
    19d2:	77 95       	ror	r23
    19d4:	67 95       	ror	r22
    19d6:	ba 95       	dec	r27
    19d8:	c9 f7       	brne	.-14     	; 0x19cc <__ultoa_invert+0x86>
    19da:	00 97       	sbiw	r24, 0x00	; 0
    19dc:	61 05       	cpc	r22, r1
    19de:	71 05       	cpc	r23, r1
    19e0:	08 95       	ret
    19e2:	9b 01       	movw	r18, r22
    19e4:	ac 01       	movw	r20, r24
    19e6:	0a 2e       	mov	r0, r26
    19e8:	06 94       	lsr	r0
    19ea:	57 95       	ror	r21
    19ec:	47 95       	ror	r20
    19ee:	37 95       	ror	r19
    19f0:	27 95       	ror	r18
    19f2:	ba 95       	dec	r27
    19f4:	c9 f7       	brne	.-14     	; 0x19e8 <__ultoa_invert+0xa2>
    19f6:	62 0f       	add	r22, r18
    19f8:	73 1f       	adc	r23, r19
    19fa:	84 1f       	adc	r24, r20
    19fc:	95 1f       	adc	r25, r21
    19fe:	a0 1d       	adc	r26, r0
    1a00:	08 95       	ret

00001a02 <_exit>:
    1a02:	f8 94       	cli

00001a04 <__stop_program>:
    1a04:	ff cf       	rjmp	.-2      	; 0x1a04 <__stop_program>
