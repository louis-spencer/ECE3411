
Interrupts_Lab.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006a  00804000  0000157a  0000160e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000157a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000061  0080406a  0080406a  00001678  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000016d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000456f  00000000  00000000  000017e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000032fc  00000000  00000000  00005d53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ad3  00000000  00000000  0000904f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002ac  00000000  00000000  00009b24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001c01  00000000  00000000  00009dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b02  00000000  00000000  0000b9d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  0000c4d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
       4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
       c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      10:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      14:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      18:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      1c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      20:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      24:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      28:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      2c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      30:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      34:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      38:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      3c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      40:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      44:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      48:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      4c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      50:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      54:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      58:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      5c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      60:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      64:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      68:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      6c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      70:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      74:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      78:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      7c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      80:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      84:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      88:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      8c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      90:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      94:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      98:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      9c:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      a8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ac:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      b8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      bc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      c8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      cc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      d4:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_53>
      d8:	0c 94 7c 01 	jmp	0x2f8	; 0x2f8 <__vector_54>
      dc:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e4:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      e8:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      ec:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>
      f0:	0c 94 99 00 	jmp	0x132	; 0x132 <__bad_interrupt>

000000f4 <__ctors_end>:
      f4:	11 24       	eor	r1, r1
      f6:	1f be       	out	0x3f, r1	; 63
      f8:	cf ef       	ldi	r28, 0xFF	; 255
      fa:	cd bf       	out	0x3d, r28	; 61
      fc:	df e7       	ldi	r29, 0x7F	; 127
      fe:	de bf       	out	0x3e, r29	; 62

00000100 <__do_copy_data>:
     100:	10 e4       	ldi	r17, 0x40	; 64
     102:	a0 e0       	ldi	r26, 0x00	; 0
     104:	b0 e4       	ldi	r27, 0x40	; 64
     106:	ea e7       	ldi	r30, 0x7A	; 122
     108:	f5 e1       	ldi	r31, 0x15	; 21
     10a:	00 e0       	ldi	r16, 0x00	; 0
     10c:	0b bf       	out	0x3b, r16	; 59
     10e:	02 c0       	rjmp	.+4      	; 0x114 <__do_copy_data+0x14>
     110:	07 90       	elpm	r0, Z+
     112:	0d 92       	st	X+, r0
     114:	aa 36       	cpi	r26, 0x6A	; 106
     116:	b1 07       	cpc	r27, r17
     118:	d9 f7       	brne	.-10     	; 0x110 <__do_copy_data+0x10>

0000011a <__do_clear_bss>:
     11a:	20 e4       	ldi	r18, 0x40	; 64
     11c:	aa e6       	ldi	r26, 0x6A	; 106
     11e:	b0 e4       	ldi	r27, 0x40	; 64
     120:	01 c0       	rjmp	.+2      	; 0x124 <.do_clear_bss_start>

00000122 <.do_clear_bss_loop>:
     122:	1d 92       	st	X+, r1

00000124 <.do_clear_bss_start>:
     124:	ab 3c       	cpi	r26, 0xCB	; 203
     126:	b2 07       	cpc	r27, r18
     128:	e1 f7       	brne	.-8      	; 0x122 <.do_clear_bss_loop>
     12a:	0e 94 08 01 	call	0x210	; 0x210 <main>
     12e:	0c 94 bb 0a 	jmp	0x1576	; 0x1576 <_exit>

00000132 <__bad_interrupt>:
     132:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000136 <init_clock>:

#define F_CPU 16000000UL
#include <util/delay.h>

void init_clock() {
	CPU_CCP = CCP_IOREG_gc;
     136:	88 ed       	ldi	r24, 0xD8	; 216
     138:	84 bf       	out	0x34, r24	; 52
	CLKCTRL.OSCHFCTRLA = CLKCTRL_FRQSEL_16M_gc;
     13a:	8c e1       	ldi	r24, 0x1C	; 28
     13c:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
     140:	08 95       	ret

00000142 <delay>:
}

void delay(double time_ms) {
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	6b 01       	movw	r12, r22
     150:	7c 01       	movw	r14, r24
	// delay function to accept arbitrary times
	for (int i = 0; i < time_ms; i++) {
     152:	c0 e0       	ldi	r28, 0x00	; 0
     154:	d0 e0       	ldi	r29, 0x00	; 0
     156:	07 c0       	rjmp	.+14     	; 0x166 <delay+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     158:	8f e9       	ldi	r24, 0x9F	; 159
     15a:	9f e0       	ldi	r25, 0x0F	; 15
     15c:	01 97       	sbiw	r24, 0x01	; 1
     15e:	f1 f7       	brne	.-4      	; 0x15c <delay+0x1a>
     160:	00 c0       	rjmp	.+0      	; 0x162 <delay+0x20>
     162:	00 00       	nop
     164:	21 96       	adiw	r28, 0x01	; 1
     166:	be 01       	movw	r22, r28
     168:	0d 2e       	mov	r0, r29
     16a:	00 0c       	add	r0, r0
     16c:	88 0b       	sbc	r24, r24
     16e:	99 0b       	sbc	r25, r25
     170:	0e 94 0b 04 	call	0x816	; 0x816 <__floatsisf>
     174:	a7 01       	movw	r20, r14
     176:	96 01       	movw	r18, r12
     178:	0e 94 04 04 	call	0x808	; 0x808 <__cmpsf2>
     17c:	88 23       	and	r24, r24
     17e:	64 f3       	brlt	.-40     	; 0x158 <delay+0x16>
		_delay_ms(1);
	}
}
     180:	df 91       	pop	r29
     182:	cf 91       	pop	r28
     184:	ff 90       	pop	r15
     186:	ef 90       	pop	r14
     188:	df 90       	pop	r13
     18a:	cf 90       	pop	r12
     18c:	08 95       	ret

0000018e <blink_cycle>:

void blink_cycle(char pin, unsigned char freq) {
     18e:	cf 92       	push	r12
     190:	df 92       	push	r13
     192:	ef 92       	push	r14
     194:	ff 92       	push	r15
     196:	0f 93       	push	r16
     198:	1f 93       	push	r17
     19a:	cf 93       	push	r28
     19c:	df 93       	push	r29
     19e:	d8 2f       	mov	r29, r24
	double period_ms = 1000 / freq;
     1a0:	70 e0       	ldi	r23, 0x00	; 0
     1a2:	88 ee       	ldi	r24, 0xE8	; 232
     1a4:	93 e0       	ldi	r25, 0x03	; 3
     1a6:	0e 94 28 05 	call	0xa50	; 0xa50 <__divmodhi4>
     1aa:	07 2e       	mov	r0, r23
     1ac:	00 0c       	add	r0, r0
     1ae:	88 0b       	sbc	r24, r24
     1b0:	99 0b       	sbc	r25, r25
     1b2:	0e 94 0b 04 	call	0x816	; 0x816 <__floatsisf>
	PORTD.OUT |= (1 << pin);
     1b6:	00 e6       	ldi	r16, 0x60	; 96
     1b8:	14 e0       	ldi	r17, 0x04	; 4
     1ba:	f8 01       	movw	r30, r16
     1bc:	44 81       	ldd	r20, Z+4	; 0x04
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	f9 01       	movw	r30, r18
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <blink_cycle+0x3c>
     1c6:	ee 0f       	add	r30, r30
     1c8:	ff 1f       	adc	r31, r31
     1ca:	da 95       	dec	r29
     1cc:	e2 f7       	brpl	.-8      	; 0x1c6 <blink_cycle+0x38>
     1ce:	ef 01       	movw	r28, r30
     1d0:	2e 2f       	mov	r18, r30
     1d2:	24 2b       	or	r18, r20
     1d4:	f8 01       	movw	r30, r16
     1d6:	24 83       	std	Z+4, r18	; 0x04
	delay(period_ms/2);
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e0       	ldi	r20, 0x00	; 0
     1de:	5f e3       	ldi	r21, 0x3F	; 63
     1e0:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__mulsf3>
     1e4:	6b 01       	movw	r12, r22
     1e6:	7c 01       	movw	r14, r24
     1e8:	0e 94 a1 00 	call	0x142	; 0x142 <delay>
	PORTD.OUT &= ~(1 << pin);
     1ec:	f8 01       	movw	r30, r16
     1ee:	84 81       	ldd	r24, Z+4	; 0x04
     1f0:	c0 95       	com	r28
     1f2:	c8 23       	and	r28, r24
     1f4:	c4 83       	std	Z+4, r28	; 0x04
	delay(period_ms/2);
     1f6:	c7 01       	movw	r24, r14
     1f8:	b6 01       	movw	r22, r12
     1fa:	0e 94 a1 00 	call	0x142	; 0x142 <delay>
	
}
     1fe:	df 91       	pop	r29
     200:	cf 91       	pop	r28
     202:	1f 91       	pop	r17
     204:	0f 91       	pop	r16
     206:	ff 90       	pop	r15
     208:	ef 90       	pop	r14
     20a:	df 90       	pop	r13
     20c:	cf 90       	pop	r12
     20e:	08 95       	ret

00000210 <main>:
volatile char input = 0;
volatile char select_f = 0;

int main(void)
{
	init_clock();
     210:	0e 94 9b 00 	call	0x136	; 0x136 <init_clock>
	
	uart_init(3, 9600, NULL);
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	40 e8       	ldi	r20, 0x80	; 128
     21a:	55 e2       	ldi	r21, 0x25	; 37
     21c:	60 e0       	ldi	r22, 0x00	; 0
     21e:	70 e0       	ldi	r23, 0x00	; 0
     220:	83 e0       	ldi	r24, 0x03	; 3
     222:	0e 94 8e 03 	call	0x71c	; 0x71c <uart_init>
	// enable interrupt
	USART3.CTRLA |= USART_RXCIE_bm;
     226:	e0 e6       	ldi	r30, 0x60	; 96
     228:	f8 e0       	ldi	r31, 0x08	; 8
     22a:	85 81       	ldd	r24, Z+5	; 0x05
     22c:	80 68       	ori	r24, 0x80	; 128
     22e:	85 83       	std	Z+5, r24	; 0x05
	
	VPORTD.DIR = 0xff;
     230:	8f ef       	ldi	r24, 0xFF	; 255
     232:	8c b9       	out	0x0c, r24	; 12
	VPORTD.OUT = 0x00;
     234:	1d b8       	out	0x0d, r1	; 13
	
	char pin = 3;
	unsigned char freq = 5;
	unsigned char mode = 0;
	
	sei();
     236:	78 94       	sei
	printf("Do you want to change frequency or position? (F/P)\n");
     238:	84 e1       	ldi	r24, 0x14	; 20
     23a:	90 e4       	ldi	r25, 0x40	; 64
     23c:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
	VPORTD.DIR = 0xff;
	VPORTD.OUT = 0x00;
	
	char pin = 3;
	unsigned char freq = 5;
	unsigned char mode = 0;
     240:	10 e0       	ldi	r17, 0x00	; 0
	
	VPORTD.DIR = 0xff;
	VPORTD.OUT = 0x00;
	
	char pin = 3;
	unsigned char freq = 5;
     242:	d5 e0       	ldi	r29, 0x05	; 5
	USART3.CTRLA |= USART_RXCIE_bm;
	
	VPORTD.DIR = 0xff;
	VPORTD.OUT = 0x00;
	
	char pin = 3;
     244:	c3 e0       	ldi	r28, 0x03	; 3
	sei();
	printf("Do you want to change frequency or position? (F/P)\n");
	
	while (1) 
    {
		blink_cycle(pin, freq);
     246:	6d 2f       	mov	r22, r29
     248:	8c 2f       	mov	r24, r28
     24a:	0e 94 c7 00 	call	0x18e	; 0x18e <blink_cycle>
				//input = 0;
			//}
			//sei();	
		//}
		
		if (input > 0) {
     24e:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     252:	88 23       	and	r24, r24
     254:	c1 f3       	breq	.-16     	; 0x246 <main+0x36>
			cli();
     256:	f8 94       	cli
			printf("%c\n", input);
     258:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     25c:	1f 92       	push	r1
     25e:	8f 93       	push	r24
     260:	87 e4       	ldi	r24, 0x47	; 71
     262:	90 e4       	ldi	r25, 0x40	; 64
     264:	9f 93       	push	r25
     266:	8f 93       	push	r24
     268:	0e 94 c3 07 	call	0xf86	; 0xf86 <printf>
			if (input == 0x46 || input == 0x66) {
     26c:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     270:	0f 90       	pop	r0
     272:	0f 90       	pop	r0
     274:	0f 90       	pop	r0
     276:	0f 90       	pop	r0
     278:	86 34       	cpi	r24, 0x46	; 70
     27a:	21 f0       	breq	.+8      	; 0x284 <main+0x74>
     27c:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     280:	86 36       	cpi	r24, 0x66	; 102
     282:	31 f4       	brne	.+12     	; 0x290 <main+0x80>
				printf("Frequency: \n");
     284:	8b e4       	ldi	r24, 0x4B	; 75
     286:	90 e4       	ldi	r25, 0x40	; 64
     288:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
				mode = 2;
     28c:	12 e0       	ldi	r17, 0x02	; 2
     28e:	1d c0       	rjmp	.+58     	; 0x2ca <main+0xba>
			} else if (input == 0x50 || input == 0x70) {
     290:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     294:	80 35       	cpi	r24, 0x50	; 80
     296:	21 f0       	breq	.+8      	; 0x2a0 <main+0x90>
     298:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     29c:	80 37       	cpi	r24, 0x70	; 112
     29e:	31 f4       	brne	.+12     	; 0x2ac <main+0x9c>
				printf("Position: \n");
     2a0:	87 e5       	ldi	r24, 0x57	; 87
     2a2:	90 e4       	ldi	r25, 0x40	; 64
     2a4:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
				mode = 1;
     2a8:	11 e0       	ldi	r17, 0x01	; 1
     2aa:	0f c0       	rjmp	.+30     	; 0x2ca <main+0xba>
			} else {
				if (mode == 1) {
     2ac:	11 30       	cpi	r17, 0x01	; 1
     2ae:	21 f4       	brne	.+8      	; 0x2b8 <main+0xa8>
					pin = input - 0x30;
     2b0:	c0 91 6a 40 	lds	r28, 0x406A	; 0x80406a <__data_end>
     2b4:	c0 53       	subi	r28, 0x30	; 48
     2b6:	05 c0       	rjmp	.+10     	; 0x2c2 <main+0xb2>
				} else if (mode == 2) {
     2b8:	12 30       	cpi	r17, 0x02	; 2
     2ba:	19 f4       	brne	.+6      	; 0x2c2 <main+0xb2>
					freq = input - 0x30;
     2bc:	d0 91 6a 40 	lds	r29, 0x406A	; 0x80406a <__data_end>
     2c0:	d0 53       	subi	r29, 0x30	; 48
				}
				printf("Do you want to change frequency or position? (F/P)\n");
     2c2:	84 e1       	ldi	r24, 0x14	; 20
     2c4:	90 e4       	ldi	r25, 0x40	; 64
     2c6:	0e 94 d7 07 	call	0xfae	; 0xfae <puts>
			}
			if (input > 0) input = 0;
     2ca:	80 91 6a 40 	lds	r24, 0x406A	; 0x80406a <__data_end>
     2ce:	81 11       	cpse	r24, r1
     2d0:	10 92 6a 40 	sts	0x406A, r1	; 0x80406a <__data_end>
			sei();
     2d4:	78 94       	sei
     2d6:	b7 cf       	rjmp	.-146    	; 0x246 <main+0x36>

000002d8 <__vector_53>:
		}
    }
}

ISR(USART3_RXC_vect) {
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	8f 93       	push	r24
	input = USART3.RXDATAL;
     2e4:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7e0860>
     2e8:	80 93 6a 40 	sts	0x406A, r24	; 0x80406a <__data_end>
}
     2ec:	8f 91       	pop	r24
     2ee:	0f 90       	pop	r0
     2f0:	0f be       	out	0x3f, r0	; 63
     2f2:	0f 90       	pop	r0
     2f4:	1f 90       	pop	r1
     2f6:	18 95       	reti

000002f8 <__vector_54>:
  #if USE_TX_INTERRUPTS_2
    ISR(USART2_DRE_vect) {handle_tx_isr(2);}
  #endif
  #ifdef USART3
    #if USE_TX_INTERRUPTS_3
      ISR(USART3_DRE_vect) {handle_tx_isr(3);}
     2f8:	1f 92       	push	r1
     2fa:	0f 92       	push	r0
     2fc:	0f b6       	in	r0, 0x3f	; 63
     2fe:	0f 92       	push	r0
     300:	11 24       	eor	r1, r1
     302:	0b b6       	in	r0, 0x3b	; 59
     304:	0f 92       	push	r0
     306:	2f 93       	push	r18
     308:	3f 93       	push	r19
     30a:	4f 93       	push	r20
     30c:	5f 93       	push	r21
     30e:	6f 93       	push	r22
     310:	7f 93       	push	r23
     312:	8f 93       	push	r24
     314:	9f 93       	push	r25
     316:	af 93       	push	r26
     318:	bf 93       	push	r27
     31a:	ef 93       	push	r30
     31c:	ff 93       	push	r31
     31e:	83 e0       	ldi	r24, 0x03	; 3
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 57 03 	call	0x6ae	; 0x6ae <handle_tx_isr>
     326:	ff 91       	pop	r31
     328:	ef 91       	pop	r30
     32a:	bf 91       	pop	r27
     32c:	af 91       	pop	r26
     32e:	9f 91       	pop	r25
     330:	8f 91       	pop	r24
     332:	7f 91       	pop	r23
     334:	6f 91       	pop	r22
     336:	5f 91       	pop	r21
     338:	4f 91       	pop	r20
     33a:	3f 91       	pop	r19
     33c:	2f 91       	pop	r18
     33e:	0f 90       	pop	r0
     340:	0b be       	out	0x3b, r0	; 59
     342:	0f 90       	pop	r0
     344:	0f be       	out	0x3f, r0	; 63
     346:	0f 90       	pop	r0
     348:	1f 90       	pop	r1
     34a:	18 95       	reti

0000034c <usart_init>:
    #endif
  #endif
#endif

void* usart_init(uint8_t usartnum, uint32_t baud_rate, bool* use_tx_intr)
{
     34c:	cf 92       	push	r12
     34e:	df 92       	push	r13
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	cf 93       	push	r28
     356:	df 93       	push	r29
     358:	6a 01       	movw	r12, r20
     35a:	7b 01       	movw	r14, r22
    USART_t* usart;

    if (usartnum == 0) {
     35c:	81 11       	cpse	r24, r1
     35e:	08 c0       	rjmp	.+16     	; 0x370 <usart_init+0x24>
        usart = &USART0;
        *use_tx_intr = USE_TX_INTERRUPTS_0;
     360:	f9 01       	movw	r30, r18
     362:	10 82       	st	Z, r1
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
     364:	81 e0       	ldi	r24, 0x01	; 1
     366:	80 93 01 04 	sts	0x0401, r24	; 0x800401 <__TEXT_REGION_LENGTH__+0x7e0401>
void* usart_init(uint8_t usartnum, uint32_t baud_rate, bool* use_tx_intr)
{
    USART_t* usart;

    if (usartnum == 0) {
        usart = &USART0;
     36a:	c0 e0       	ldi	r28, 0x00	; 0
     36c:	d8 e0       	ldi	r29, 0x08	; 8
     36e:	29 c0       	rjmp	.+82     	; 0x3c2 <usart_init+0x76>
        *use_tx_intr = USE_TX_INTERRUPTS_0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
     370:	81 30       	cpi	r24, 0x01	; 1
     372:	39 f4       	brne	.+14     	; 0x382 <usart_init+0x36>
        usart = &USART1;
        *use_tx_intr = USE_TX_INTERRUPTS_1;
     374:	f9 01       	movw	r30, r18
     376:	10 82       	st	Z, r1
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
     378:	80 93 41 04 	sts	0x0441, r24	; 0x800441 <__TEXT_REGION_LENGTH__+0x7e0441>
        *use_tx_intr = USE_TX_INTERRUPTS_0;
        // enable USART0 TX pin
        PORTA.DIRSET = PIN0_bm;
    }
    else if (usartnum == 1) {
        usart = &USART1;
     37c:	c0 e2       	ldi	r28, 0x20	; 32
     37e:	d8 e0       	ldi	r29, 0x08	; 8
     380:	20 c0       	rjmp	.+64     	; 0x3c2 <usart_init+0x76>
        *use_tx_intr = USE_TX_INTERRUPTS_1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
     382:	82 30       	cpi	r24, 0x02	; 2
     384:	41 f4       	brne	.+16     	; 0x396 <usart_init+0x4a>
        usart = &USART2;
        *use_tx_intr = USE_TX_INTERRUPTS_2;
     386:	f9 01       	movw	r30, r18
     388:	10 82       	st	Z, r1
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7e04a1>
        *use_tx_intr = USE_TX_INTERRUPTS_1;
        // enable USART1 TX pin
        PORTC.DIRSET = PIN0_bm;
    }
    else if (usartnum == 2) {
        usart = &USART2;
     390:	c0 e4       	ldi	r28, 0x40	; 64
     392:	d8 e0       	ldi	r29, 0x08	; 8
     394:	16 c0       	rjmp	.+44     	; 0x3c2 <usart_init+0x76>
        *use_tx_intr = USE_TX_INTERRUPTS_2;
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
#ifdef USART3
    else if (usartnum == 3) {
     396:	83 30       	cpi	r24, 0x03	; 3
     398:	41 f4       	brne	.+16     	; 0x3aa <usart_init+0x5e>
        usart = &USART3;
        *use_tx_intr = USE_TX_INTERRUPTS_3;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	f9 01       	movw	r30, r18
     39e:	80 83       	st	Z, r24
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
     3a0:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <__TEXT_REGION_LENGTH__+0x7e0421>
        // enable USART2 TX pin
        PORTF.DIRSET = PIN0_bm;
    }
#ifdef USART3
    else if (usartnum == 3) {
        usart = &USART3;
     3a4:	c0 e6       	ldi	r28, 0x60	; 96
     3a6:	d8 e0       	ldi	r29, 0x08	; 8
     3a8:	0c c0       	rjmp	.+24     	; 0x3c2 <usart_init+0x76>
        // enable USART3 TX pin
        PORTB.DIRSET = PIN0_bm;
    }
#endif
#ifdef USART4
    else if (usartnum == 4) {
     3aa:	84 30       	cpi	r24, 0x04	; 4
     3ac:	41 f4       	brne	.+16     	; 0x3be <usart_init+0x72>
        usart = &USART4;
        *use_tx_intr = USE_TX_INTERRUPTS_4;
     3ae:	f9 01       	movw	r30, r18
     3b0:	10 82       	st	Z, r1
        // enable USART4 TX pin
        PORTE.DIRSET = PIN0_bm;
     3b2:	81 e0       	ldi	r24, 0x01	; 1
     3b4:	80 93 81 04 	sts	0x0481, r24	; 0x800481 <__TEXT_REGION_LENGTH__+0x7e0481>
        PORTB.DIRSET = PIN0_bm;
    }
#endif
#ifdef USART4
    else if (usartnum == 4) {
        usart = &USART4;
     3b8:	c0 e8       	ldi	r28, 0x80	; 128
     3ba:	d8 e0       	ldi	r29, 0x08	; 8
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <usart_init+0x76>
        // enable USART5 TX pin
        PORTG.DIRSET = PIN0_bm;
    }
#endif
    else {
        usart = NULL;
     3be:	c0 e0       	ldi	r28, 0x00	; 0
     3c0:	d0 e0       	ldi	r29, 0x00	; 0
    }
	
    usart->BAUD = (4 * F_CPU) / baud_rate;
     3c2:	60 e0       	ldi	r22, 0x00	; 0
     3c4:	70 e9       	ldi	r23, 0x90	; 144
     3c6:	80 ed       	ldi	r24, 0xD0	; 208
     3c8:	93 e0       	ldi	r25, 0x03	; 3
     3ca:	a7 01       	movw	r20, r14
     3cc:	96 01       	movw	r18, r12
     3ce:	0e 94 3c 05 	call	0xa78	; 0xa78 <__udivmodsi4>
     3d2:	28 87       	std	Y+8, r18	; 0x08
     3d4:	39 87       	std	Y+9, r19	; 0x09
    usart->CTRLB |= (USART_RXEN_bm | USART_TXEN_bm); /* tx/rx enable */
     3d6:	8e 81       	ldd	r24, Y+6	; 0x06
     3d8:	80 6c       	ori	r24, 0xC0	; 192
     3da:	8e 83       	std	Y+6, r24	; 0x06

    return usart;
}
     3dc:	ce 01       	movw	r24, r28
     3de:	df 91       	pop	r29
     3e0:	cf 91       	pop	r28
     3e2:	ff 90       	pop	r15
     3e4:	ef 90       	pop	r14
     3e6:	df 90       	pop	r13
     3e8:	cf 90       	pop	r12
     3ea:	08 95       	ret

000003ec <usart_enable_interrupt>:

void usart_enable_interrupt(void* ptr)
{
     3ec:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    usart->CTRLA |= USART_DREIE_bm;
     3ee:	95 81       	ldd	r25, Z+5	; 0x05
     3f0:	90 62       	ori	r25, 0x20	; 32
     3f2:	95 83       	std	Z+5, r25	; 0x05
     3f4:	08 95       	ret

000003f6 <usart_disable_interrupt>:
}

void usart_disable_interrupt(void* ptr)
{
     3f6:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    usart->CTRLA &= ~USART_DREIE_bm;
     3f8:	95 81       	ldd	r25, Z+5	; 0x05
     3fa:	9f 7d       	andi	r25, 0xDF	; 223
     3fc:	95 83       	std	Z+5, r25	; 0x05
     3fe:	08 95       	ret

00000400 <usart_transmit_data>:
}

void usart_transmit_data(void* ptr, char c)
{
    USART_t* usart = (USART_t*)ptr;
    usart->TXDATAL = c;
     400:	fc 01       	movw	r30, r24
     402:	62 83       	std	Z+2, r22	; 0x02
     404:	08 95       	ret

00000406 <usart_wait_until_transmit_ready>:
}

void usart_wait_until_transmit_ready(void *ptr)
{
     406:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;
    loop_until_bit_is_set(usart->STATUS, USART_DREIF_bp);
     408:	94 81       	ldd	r25, Z+4	; 0x04
     40a:	95 ff       	sbrs	r25, 5
     40c:	fd cf       	rjmp	.-6      	; 0x408 <usart_wait_until_transmit_ready+0x2>
}
     40e:	08 95       	ret

00000410 <usart_receive_data>:

int usart_receive_data(void* ptr)
{
     410:	fc 01       	movw	r30, r24
    USART_t* usart = (USART_t*)ptr;

    uint8_t c;

    loop_until_bit_is_set(usart->STATUS, USART_RXCIF_bp);
     412:	94 81       	ldd	r25, Z+4	; 0x04
     414:	99 23       	and	r25, r25
     416:	ec f7       	brge	.-6      	; 0x412 <usart_receive_data+0x2>
    char rcv_status = usart->RXDATAH;
     418:	81 81       	ldd	r24, Z+1	; 0x01
    if (rcv_status & USART_FERR_bm) {
     41a:	82 ff       	sbrs	r24, 2
     41c:	04 c0       	rjmp	.+8      	; 0x426 <usart_receive_data+0x16>
        c = usart->RXDATAL; /* clear error by reading data */
     41e:	80 81       	ld	r24, Z
        return _FDEV_EOF;
     420:	8e ef       	ldi	r24, 0xFE	; 254
     422:	9f ef       	ldi	r25, 0xFF	; 255
     424:	08 95       	ret
    }
    if (rcv_status & USART_BUFOVF_bm) {
     426:	86 ff       	sbrs	r24, 6
     428:	04 c0       	rjmp	.+8      	; 0x432 <usart_receive_data+0x22>
        c = usart->RXDATAL; /* clear error by reading data */
     42a:	80 81       	ld	r24, Z
        return _FDEV_ERR;
     42c:	8f ef       	ldi	r24, 0xFF	; 255
     42e:	9f ef       	ldi	r25, 0xFF	; 255
     430:	08 95       	ret
    }
    c = usart->RXDATAL;
     432:	80 81       	ld	r24, Z
    return c;
     434:	90 e0       	ldi	r25, 0x00	; 0
}
     436:	08 95       	ret

00000438 <in_isr>:

bool in_isr(void *ptr)
{
    return (CPUINT.STATUS != 0);
     438:	90 91 11 01 	lds	r25, 0x0111	; 0x800111 <__TEXT_REGION_LENGTH__+0x7e0111>
     43c:	81 e0       	ldi	r24, 0x01	; 1
     43e:	91 11       	cpse	r25, r1
     440:	01 c0       	rjmp	.+2      	; 0x444 <in_isr+0xc>
     442:	80 e0       	ldi	r24, 0x00	; 0
}
     444:	08 95       	ret

00000446 <uart_putchar>:
 * Send character c down the UART Tx, wait until tx holding register
 * is empty.
 */
int
uart_putchar(char c, FILE *stream)
{
     446:	af 92       	push	r10
     448:	bf 92       	push	r11
     44a:	cf 92       	push	r12
     44c:	df 92       	push	r13
     44e:	ef 92       	push	r14
     450:	ff 92       	push	r15
     452:	1f 93       	push	r17
     454:	cf 93       	push	r28
     456:	df 93       	push	r29
     458:	18 2f       	mov	r17, r24
     45a:	eb 01       	movw	r28, r22
    if (c == '\a') {
     45c:	87 30       	cpi	r24, 0x07	; 7
     45e:	69 f4       	brne	.+26     	; 0x47a <uart_putchar+0x34>
        fputs("*ring*\n", stderr);
     460:	20 91 c9 40 	lds	r18, 0x40C9	; 0x8040c9 <__iob+0x4>
     464:	30 91 ca 40 	lds	r19, 0x40CA	; 0x8040ca <__iob+0x5>
     468:	47 e0       	ldi	r20, 0x07	; 7
     46a:	50 e0       	ldi	r21, 0x00	; 0
     46c:	61 e0       	ldi	r22, 0x01	; 1
     46e:	70 e0       	ldi	r23, 0x00	; 0
     470:	82 e6       	ldi	r24, 0x62	; 98
     472:	90 e4       	ldi	r25, 0x40	; 64
     474:	0e 94 81 07 	call	0xf02	; 0xf02 <fwrite>
        return 0;
     478:	45 c0       	rjmp	.+138    	; 0x504 <uart_putchar+0xbe>
    }

    if (c == '\n') {
     47a:	8a 30       	cpi	r24, 0x0A	; 10
     47c:	19 f4       	brne	.+6      	; 0x484 <uart_putchar+0x3e>
        uart_putchar('\r', stream);
     47e:	8d e0       	ldi	r24, 0x0D	; 13
     480:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
    }

    void* udata = fdev_get_udata(stream);
     484:	ac 84       	ldd	r10, Y+12	; 0x0c
     486:	bd 84       	ldd	r11, Y+13	; 0x0d
#if USE_TX_INTERRUPTS
    if(((uint16_t)udata) & 0x8000) {
     488:	bb 20       	and	r11, r11
     48a:	ac f5       	brge	.+106    	; 0x4f6 <uart_putchar+0xb0>
        USART_TXINT_t* txint = (USART_TXINT_t*)(((uint16_t)udata) & 0x7FFF);
     48c:	65 01       	movw	r12, r10
     48e:	e8 94       	clt
     490:	d7 f8       	bld	r13, 7
     492:	76 01       	movw	r14, r12
        // increment ring buffer index
        int new_put_index = (txint->t_put_index + 1) % TX_BUFSIZE;
     494:	d6 01       	movw	r26, r12
     496:	12 96       	adiw	r26, 0x02	; 2
     498:	cd 91       	ld	r28, X+
     49a:	dc 91       	ld	r29, X
     49c:	13 97       	sbiw	r26, 0x03	; 3
     49e:	21 96       	adiw	r28, 0x01	; 1
     4a0:	cf 73       	andi	r28, 0x3F	; 63
     4a2:	d0 78       	andi	r29, 0x80	; 128
     4a4:	dd 23       	and	r29, r29
     4a6:	24 f4       	brge	.+8      	; 0x4b0 <uart_putchar+0x6a>
     4a8:	21 97       	sbiw	r28, 0x01	; 1
     4aa:	c0 6c       	ori	r28, 0xC0	; 192
     4ac:	df 6f       	ori	r29, 0xFF	; 255
     4ae:	21 96       	adiw	r28, 0x01	; 1
        if (new_put_index == txint->t_get_index && in_isr(udata)) {
     4b0:	f6 01       	movw	r30, r12
     4b2:	84 81       	ldd	r24, Z+4	; 0x04
     4b4:	95 81       	ldd	r25, Z+5	; 0x05
     4b6:	c8 17       	cp	r28, r24
     4b8:	d9 07       	cpc	r29, r25
     4ba:	29 f4       	brne	.+10     	; 0x4c6 <uart_putchar+0x80>
     4bc:	c5 01       	movw	r24, r10
     4be:	0e 94 1c 02 	call	0x438	; 0x438 <in_isr>
     4c2:	81 11       	cpse	r24, r1
     4c4:	1f c0       	rjmp	.+62     	; 0x504 <uart_putchar+0xbe>
            // if we wrapped around, and we are in an interrupt handler 
            // the tx_isr won't get called and the buffer won't get emptied.
            // so don't do anything and just drop the character
        } else {
            // put character in buffer
            txint->t_buffer[txint->t_put_index] = c;
     4c6:	d6 01       	movw	r26, r12
     4c8:	12 96       	adiw	r26, 0x02	; 2
     4ca:	ed 91       	ld	r30, X+
     4cc:	fc 91       	ld	r31, X
     4ce:	13 97       	sbiw	r26, 0x03	; 3
     4d0:	ec 0d       	add	r30, r12
     4d2:	fd 1d       	adc	r31, r13
     4d4:	16 83       	std	Z+6, r17	; 0x06

            // if we wrapped around, wait till the buffer gets emptied
            // and get_index increments
            while (new_put_index == txint->t_get_index);
     4d6:	f7 01       	movw	r30, r14
     4d8:	84 81       	ldd	r24, Z+4	; 0x04
     4da:	95 81       	ldd	r25, Z+5	; 0x05
     4dc:	c8 17       	cp	r28, r24
     4de:	d9 07       	cpc	r29, r25
     4e0:	d1 f3       	breq	.-12     	; 0x4d6 <uart_putchar+0x90>
            txint->t_put_index = new_put_index;
     4e2:	d6 01       	movw	r26, r12
     4e4:	12 96       	adiw	r26, 0x02	; 2
     4e6:	cd 93       	st	X+, r28
     4e8:	dc 93       	st	X, r29
     4ea:	13 97       	sbiw	r26, 0x03	; 3
		
            // enable interrupt and the character will be sent in the ISR
            usart_enable_interrupt(txint->usart);
     4ec:	8d 91       	ld	r24, X+
     4ee:	9c 91       	ld	r25, X
     4f0:	0e 94 f6 01 	call	0x3ec	; 0x3ec <usart_enable_interrupt>
     4f4:	07 c0       	rjmp	.+14     	; 0x504 <uart_putchar+0xbe>
        }
    } else 
#endif
    {
        usart_wait_until_transmit_ready(udata);
     4f6:	c5 01       	movw	r24, r10
     4f8:	0e 94 03 02 	call	0x406	; 0x406 <usart_wait_until_transmit_ready>
        usart_transmit_data(udata, c);
     4fc:	61 2f       	mov	r22, r17
     4fe:	c5 01       	movw	r24, r10
     500:	0e 94 00 02 	call	0x400	; 0x400 <usart_transmit_data>
    }

    return 0;
}
     504:	80 e0       	ldi	r24, 0x00	; 0
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	df 91       	pop	r29
     50a:	cf 91       	pop	r28
     50c:	1f 91       	pop	r17
     50e:	ff 90       	pop	r15
     510:	ef 90       	pop	r14
     512:	df 90       	pop	r13
     514:	cf 90       	pop	r12
     516:	bf 90       	pop	r11
     518:	af 90       	pop	r10
     51a:	08 95       	ret

0000051c <uart_getchar>:
 * Successive calls to uart_getchar() will be satisfied from the
 * internal buffer until that buffer is emptied again.
 */
int
uart_getchar(FILE *stream)
{
     51c:	ef 92       	push	r14
     51e:	ff 92       	push	r15
     520:	0f 93       	push	r16
     522:	1f 93       	push	r17
     524:	cf 93       	push	r28
     526:	df 93       	push	r29
    uint8_t c;
    char *cp, *cp2;
    static char b[RX_BUFSIZE];
    static char *rxp;

    if (rxp == 0) {
     528:	20 91 bb 40 	lds	r18, 0x40BB	; 0x8040bb <rxp.2021>
     52c:	30 91 bc 40 	lds	r19, 0x40BC	; 0x8040bc <rxp.2021+0x1>
     530:	23 2b       	or	r18, r19
     532:	09 f0       	breq	.+2      	; 0x536 <uart_getchar+0x1a>
     534:	a0 c0       	rjmp	.+320    	; 0x676 <uart_getchar+0x15a>
     536:	8c 01       	movw	r16, r24
     538:	cb e6       	ldi	r28, 0x6B	; 107
     53a:	d0 e4       	ldi	r29, 0x40	; 64
        for (cp = b;;) {
            void* udata = fdev_get_udata(stream);
     53c:	f8 01       	movw	r30, r16
     53e:	84 85       	ldd	r24, Z+12	; 0x0c
     540:	95 85       	ldd	r25, Z+13	; 0x0d
#if USE_TX_INTERRUPTS
            if((uint16_t)udata & 0x8000) {
     542:	99 23       	and	r25, r25
     544:	24 f4       	brge	.+8      	; 0x54e <uart_getchar+0x32>
                USART_TXINT_t* txint = (USART_TXINT_t*)(((uint16_t)udata) & 0x7FFF);
     546:	fc 01       	movw	r30, r24
     548:	ff 77       	andi	r31, 0x7F	; 127
                udata = txint->usart;
     54a:	80 81       	ld	r24, Z
     54c:	91 81       	ldd	r25, Z+1	; 0x01
            }
#endif
            c = usart_receive_data(udata);
     54e:	0e 94 08 02 	call	0x410	; 0x410 <usart_receive_data>

            /* behaviour similar to Unix stty ICRNL */
            if (c == '\r')
     552:	8d 30       	cpi	r24, 0x0D	; 13
     554:	09 f4       	brne	.+2      	; 0x558 <uart_getchar+0x3c>
                c = '\n';
     556:	8a e0       	ldi	r24, 0x0A	; 10
            if (c == '\n') {
     558:	8a 30       	cpi	r24, 0x0A	; 10
     55a:	59 f4       	brne	.+22     	; 0x572 <uart_getchar+0x56>
                *cp = c;
     55c:	88 83       	st	Y, r24
                uart_putchar(c, stream);
     55e:	b8 01       	movw	r22, r16
     560:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                rxp = b;
     564:	8b e6       	ldi	r24, 0x6B	; 107
     566:	90 e4       	ldi	r25, 0x40	; 64
     568:	80 93 bb 40 	sts	0x40BB, r24	; 0x8040bb <rxp.2021>
     56c:	90 93 bc 40 	sts	0x40BC, r25	; 0x8040bc <rxp.2021+0x1>
                break;
     570:	82 c0       	rjmp	.+260    	; 0x676 <uart_getchar+0x15a>
            }
            else if (c == '\t')
     572:	89 30       	cpi	r24, 0x09	; 9
     574:	09 f4       	brne	.+2      	; 0x578 <uart_getchar+0x5c>
                c = ' ';
     576:	80 e2       	ldi	r24, 0x20	; 32

            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
     578:	90 ee       	ldi	r25, 0xE0	; 224
     57a:	98 0f       	add	r25, r24
     57c:	9f 35       	cpi	r25, 0x5F	; 95
     57e:	10 f0       	brcs	.+4      	; 0x584 <uart_getchar+0x68>
     580:	80 3a       	cpi	r24, 0xA0	; 160
     582:	98 f0       	brcs	.+38     	; 0x5aa <uart_getchar+0x8e>
                c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1)
     584:	f0 e4       	ldi	r31, 0x40	; 64
     586:	ca 3b       	cpi	r28, 0xBA	; 186
     588:	df 07       	cpc	r29, r31
     58a:	29 f4       	brne	.+10     	; 0x596 <uart_getchar+0x7a>
                    uart_putchar('\a', stream);
     58c:	b8 01       	movw	r22, r16
     58e:	87 e0       	ldi	r24, 0x07	; 7
     590:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
     594:	d3 cf       	rjmp	.-90     	; 0x53c <uart_getchar+0x20>
                else {
                    *cp++ = c;
     596:	7e 01       	movw	r14, r28
     598:	9f ef       	ldi	r25, 0xFF	; 255
     59a:	e9 1a       	sub	r14, r25
     59c:	f9 0a       	sbc	r15, r25
     59e:	88 83       	st	Y, r24
                    uart_putchar(c, stream);
     5a0:	b8 01       	movw	r22, r16
     5a2:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
            if ((c >= (uint8_t)' ' && c <= (uint8_t)'\x7e') ||
                c >= (uint8_t)'\xa0') {
                if (cp == b + RX_BUFSIZE - 1)
                    uart_putchar('\a', stream);
                else {
                    *cp++ = c;
     5a6:	e7 01       	movw	r28, r14
                    uart_putchar(c, stream);
                }
                continue;
     5a8:	c9 cf       	rjmp	.-110    	; 0x53c <uart_getchar+0x20>
            }

            switch (c) {
     5aa:	82 31       	cpi	r24, 0x12	; 18
     5ac:	19 f1       	breq	.+70     	; 0x5f4 <uart_getchar+0xd8>
     5ae:	30 f4       	brcc	.+12     	; 0x5bc <uart_getchar+0xa0>
     5b0:	83 30       	cpi	r24, 0x03	; 3
     5b2:	09 f4       	brne	.+2      	; 0x5b6 <uart_getchar+0x9a>
     5b4:	73 c0       	rjmp	.+230    	; 0x69c <uart_getchar+0x180>
     5b6:	88 30       	cpi	r24, 0x08	; 8
     5b8:	49 f0       	breq	.+18     	; 0x5cc <uart_getchar+0xb0>
     5ba:	c0 cf       	rjmp	.-128    	; 0x53c <uart_getchar+0x20>
     5bc:	87 31       	cpi	r24, 0x17	; 23
     5be:	09 f4       	brne	.+2      	; 0x5c2 <uart_getchar+0xa6>
     5c0:	4e c0       	rjmp	.+156    	; 0x65e <uart_getchar+0x142>
     5c2:	8f 37       	cpi	r24, 0x7F	; 127
     5c4:	19 f0       	breq	.+6      	; 0x5cc <uart_getchar+0xb0>
     5c6:	85 31       	cpi	r24, 0x15	; 21
     5c8:	b9 f1       	breq	.+110    	; 0x638 <uart_getchar+0x11c>
     5ca:	b8 cf       	rjmp	.-144    	; 0x53c <uart_getchar+0x20>
            case 'c' & 0x1f:
                return -1;

            case '\b':
            case '\x7f':
                if (cp > b) {
     5cc:	e0 e4       	ldi	r30, 0x40	; 64
     5ce:	cb 36       	cpi	r28, 0x6B	; 107
     5d0:	de 07       	cpc	r29, r30
     5d2:	09 f0       	breq	.+2      	; 0x5d6 <uart_getchar+0xba>
     5d4:	08 f4       	brcc	.+2      	; 0x5d8 <uart_getchar+0xbc>
     5d6:	b2 cf       	rjmp	.-156    	; 0x53c <uart_getchar+0x20>
                    uart_putchar('\b', stream);
     5d8:	b8 01       	movw	r22, r16
     5da:	88 e0       	ldi	r24, 0x08	; 8
     5dc:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar(' ', stream);
     5e0:	b8 01       	movw	r22, r16
     5e2:	80 e2       	ldi	r24, 0x20	; 32
     5e4:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar('\b', stream);
     5e8:	b8 01       	movw	r22, r16
     5ea:	88 e0       	ldi	r24, 0x08	; 8
     5ec:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    cp--;
     5f0:	21 97       	sbiw	r28, 0x01	; 1
     5f2:	a4 cf       	rjmp	.-184    	; 0x53c <uart_getchar+0x20>
                }
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
     5f4:	b8 01       	movw	r22, r16
     5f6:	8d e0       	ldi	r24, 0x0D	; 13
     5f8:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                for (cp2 = b; cp2 < cp; cp2++)
     5fc:	0f 2e       	mov	r0, r31
     5fe:	fb e6       	ldi	r31, 0x6B	; 107
     600:	ef 2e       	mov	r14, r31
     602:	f0 e4       	ldi	r31, 0x40	; 64
     604:	ff 2e       	mov	r15, r31
     606:	f0 2d       	mov	r31, r0
     608:	06 c0       	rjmp	.+12     	; 0x616 <uart_getchar+0xfa>
                    uart_putchar(*cp2, stream);
     60a:	b8 01       	movw	r22, r16
     60c:	f7 01       	movw	r30, r14
     60e:	81 91       	ld	r24, Z+
     610:	7f 01       	movw	r14, r30
     612:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                }
                break;

            case 'r' & 0x1f:
                uart_putchar('\r', stream);
                for (cp2 = b; cp2 < cp; cp2++)
     616:	ec 16       	cp	r14, r28
     618:	fd 06       	cpc	r15, r29
     61a:	b8 f3       	brcs	.-18     	; 0x60a <uart_getchar+0xee>
     61c:	8f cf       	rjmp	.-226    	; 0x53c <uart_getchar+0x20>
                    uart_putchar(*cp2, stream);
                break;

            case 'u' & 0x1f:
                while (cp > b) {
                    uart_putchar('\b', stream);
     61e:	b8 01       	movw	r22, r16
     620:	88 e0       	ldi	r24, 0x08	; 8
     622:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar(' ', stream);
     626:	b8 01       	movw	r22, r16
     628:	80 e2       	ldi	r24, 0x20	; 32
     62a:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar('\b', stream);
     62e:	b8 01       	movw	r22, r16
     630:	88 e0       	ldi	r24, 0x08	; 8
     632:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    cp--;
     636:	21 97       	sbiw	r28, 0x01	; 1
                for (cp2 = b; cp2 < cp; cp2++)
                    uart_putchar(*cp2, stream);
                break;

            case 'u' & 0x1f:
                while (cp > b) {
     638:	f0 e4       	ldi	r31, 0x40	; 64
     63a:	cb 36       	cpi	r28, 0x6B	; 107
     63c:	df 07       	cpc	r29, r31
     63e:	09 f0       	breq	.+2      	; 0x642 <uart_getchar+0x126>
     640:	70 f7       	brcc	.-36     	; 0x61e <uart_getchar+0x102>
     642:	7c cf       	rjmp	.-264    	; 0x53c <uart_getchar+0x20>
                }
                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
                    uart_putchar('\b', stream);
     644:	b8 01       	movw	r22, r16
     646:	88 e0       	ldi	r24, 0x08	; 8
     648:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar(' ', stream);
     64c:	b8 01       	movw	r22, r16
     64e:	80 e2       	ldi	r24, 0x20	; 32
     650:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    uart_putchar('\b', stream);
     654:	b8 01       	movw	r22, r16
     656:	88 e0       	ldi	r24, 0x08	; 8
     658:	0e 94 23 02 	call	0x446	; 0x446 <uart_putchar>
                    cp--;
     65c:	21 97       	sbiw	r28, 0x01	; 1
                    cp--;
                }
                break;

            case 'w' & 0x1f:
                while (cp > b && cp[-1] != ' ') {
     65e:	80 e4       	ldi	r24, 0x40	; 64
     660:	cb 36       	cpi	r28, 0x6B	; 107
     662:	d8 07       	cpc	r29, r24
     664:	09 f0       	breq	.+2      	; 0x668 <uart_getchar+0x14c>
     666:	08 f4       	brcc	.+2      	; 0x66a <uart_getchar+0x14e>
     668:	69 cf       	rjmp	.-302    	; 0x53c <uart_getchar+0x20>
     66a:	fe 01       	movw	r30, r28
     66c:	31 97       	sbiw	r30, 0x01	; 1
     66e:	80 81       	ld	r24, Z
     670:	80 32       	cpi	r24, 0x20	; 32
     672:	41 f7       	brne	.-48     	; 0x644 <uart_getchar+0x128>
     674:	63 cf       	rjmp	.-314    	; 0x53c <uart_getchar+0x20>
                break;
            }
        }
    }

    c = *rxp++;
     676:	e0 91 bb 40 	lds	r30, 0x40BB	; 0x8040bb <rxp.2021>
     67a:	f0 91 bc 40 	lds	r31, 0x40BC	; 0x8040bc <rxp.2021+0x1>
     67e:	cf 01       	movw	r24, r30
     680:	01 96       	adiw	r24, 0x01	; 1
     682:	80 93 bb 40 	sts	0x40BB, r24	; 0x8040bb <rxp.2021>
     686:	90 93 bc 40 	sts	0x40BC, r25	; 0x8040bc <rxp.2021+0x1>
     68a:	80 81       	ld	r24, Z
    if (c == '\n')
     68c:	8a 30       	cpi	r24, 0x0A	; 10
     68e:	21 f4       	brne	.+8      	; 0x698 <uart_getchar+0x17c>
        rxp = 0;
     690:	10 92 bb 40 	sts	0x40BB, r1	; 0x8040bb <rxp.2021>
     694:	10 92 bc 40 	sts	0x40BC, r1	; 0x8040bc <rxp.2021+0x1>

    return c;
     698:	90 e0       	ldi	r25, 0x00	; 0
     69a:	02 c0       	rjmp	.+4      	; 0x6a0 <uart_getchar+0x184>
                continue;
            }

            switch (c) {
            case 'c' & 0x1f:
                return -1;
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	9f ef       	ldi	r25, 0xFF	; 255
    c = *rxp++;
    if (c == '\n')
        rxp = 0;

    return c;
}
     6a0:	df 91       	pop	r29
     6a2:	cf 91       	pop	r28
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	ff 90       	pop	r15
     6aa:	ef 90       	pop	r14
     6ac:	08 95       	ret

000006ae <handle_tx_isr>:
  int num_txints = 0;

  /* the MCU specific code should implement the TX ISR
     which will then call this function */
  void handle_tx_isr(int usartnum)
  {
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
      USART_TXINT_t* txint = txints[usartnum];
     6b2:	88 0f       	add	r24, r24
     6b4:	99 1f       	adc	r25, r25
     6b6:	e0 91 bf 40 	lds	r30, 0x40BF	; 0x8040bf <txints>
     6ba:	f0 91 c0 40 	lds	r31, 0x40C0	; 0x8040c0 <txints+0x1>
     6be:	e8 0f       	add	r30, r24
     6c0:	f9 1f       	adc	r31, r25
     6c2:	c0 81       	ld	r28, Z
     6c4:	d1 81       	ldd	r29, Z+1	; 0x01
      // check if the buffer is not empty
      if (txint->t_get_index != txint->t_put_index) {
     6c6:	2c 81       	ldd	r18, Y+4	; 0x04
     6c8:	3d 81       	ldd	r19, Y+5	; 0x05
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	9b 81       	ldd	r25, Y+3	; 0x03
     6ce:	28 17       	cp	r18, r24
     6d0:	39 07       	cpc	r19, r25
     6d2:	09 f1       	breq	.+66     	; 0x716 <handle_tx_isr+0x68>
          // transmit the byte at the top of the buffer
          usart_transmit_data(txint->usart, txint->t_buffer[txint->t_get_index]);
     6d4:	ec 81       	ldd	r30, Y+4	; 0x04
     6d6:	fd 81       	ldd	r31, Y+5	; 0x05
     6d8:	ec 0f       	add	r30, r28
     6da:	fd 1f       	adc	r31, r29
     6dc:	66 81       	ldd	r22, Z+6	; 0x06
     6de:	88 81       	ld	r24, Y
     6e0:	99 81       	ldd	r25, Y+1	; 0x01
     6e2:	0e 94 00 02 	call	0x400	; 0x400 <usart_transmit_data>
          // increment buffer pointer
          txint->t_get_index = (txint->t_get_index + 1) % TX_BUFSIZE;
     6e6:	8c 81       	ldd	r24, Y+4	; 0x04
     6e8:	9d 81       	ldd	r25, Y+5	; 0x05
     6ea:	01 96       	adiw	r24, 0x01	; 1
     6ec:	8f 73       	andi	r24, 0x3F	; 63
     6ee:	90 78       	andi	r25, 0x80	; 128
     6f0:	99 23       	and	r25, r25
     6f2:	24 f4       	brge	.+8      	; 0x6fc <handle_tx_isr+0x4e>
     6f4:	01 97       	sbiw	r24, 0x01	; 1
     6f6:	80 6c       	ori	r24, 0xC0	; 192
     6f8:	9f 6f       	ori	r25, 0xFF	; 255
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	8c 83       	std	Y+4, r24	; 0x04
     6fe:	9d 83       	std	Y+5, r25	; 0x05
          // if the buffer is empty, disable the interrupt
          if (txint->t_get_index == txint->t_put_index) {
     700:	2c 81       	ldd	r18, Y+4	; 0x04
     702:	3d 81       	ldd	r19, Y+5	; 0x05
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	9b 81       	ldd	r25, Y+3	; 0x03
     708:	28 17       	cp	r18, r24
     70a:	39 07       	cpc	r19, r25
     70c:	21 f4       	brne	.+8      	; 0x716 <handle_tx_isr+0x68>
              usart_disable_interrupt(txint->usart);
     70e:	88 81       	ld	r24, Y
     710:	99 81       	ldd	r25, Y+1	; 0x01
     712:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <usart_disable_interrupt>
          }
      }
  }
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <uart_init>:
/*
 * Initialize the UART to 9600 Bd, tx/rx, 8N1.
 */
FILE*
uart_init(uint8_t usartnum, uint32_t baud_rate, FILE* stream)
{
     71c:	af 92       	push	r10
     71e:	bf 92       	push	r11
     720:	cf 92       	push	r12
     722:	df 92       	push	r13
     724:	ff 92       	push	r15
     726:	0f 93       	push	r16
     728:	1f 93       	push	r17
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	1f 92       	push	r1
     730:	cd b7       	in	r28, 0x3d	; 61
     732:	de b7       	in	r29, 0x3e	; 62
     734:	f8 2e       	mov	r15, r24
     736:	89 01       	movw	r16, r18
    if (stream) {
     738:	21 15       	cp	r18, r1
     73a:	31 05       	cpc	r19, r1
     73c:	49 f0       	breq	.+18     	; 0x750 <uart_init+0x34>
        *stream = uartFile;
     73e:	8e e0       	ldi	r24, 0x0E	; 14
     740:	e6 e0       	ldi	r30, 0x06	; 6
     742:	f0 e4       	ldi	r31, 0x40	; 64
     744:	d9 01       	movw	r26, r18
     746:	01 90       	ld	r0, Z+
     748:	0d 92       	st	X+, r0
     74a:	8a 95       	dec	r24
     74c:	e1 f7       	brne	.-8      	; 0x746 <uart_init+0x2a>
     74e:	0b c0       	rjmp	.+22     	; 0x766 <uart_init+0x4a>
    } else {
        stdout = &uartFile;
     750:	e5 ec       	ldi	r30, 0xC5	; 197
     752:	f0 e4       	ldi	r31, 0x40	; 64
     754:	86 e0       	ldi	r24, 0x06	; 6
     756:	90 e4       	ldi	r25, 0x40	; 64
     758:	82 83       	std	Z+2, r24	; 0x02
     75a:	93 83       	std	Z+3, r25	; 0x03
        stdin = &uartFile;
     75c:	80 83       	st	Z, r24
     75e:	91 83       	std	Z+1, r25	; 0x01
        stderr = &uartFile;
     760:	84 83       	std	Z+4, r24	; 0x04
     762:	95 83       	std	Z+5, r25	; 0x05
        stream = &uartFile;
     764:	8c 01       	movw	r16, r24
    }

    bool use_tx_intr;
    void* usart = usart_init(usartnum, baud_rate, &use_tx_intr);
     766:	9e 01       	movw	r18, r28
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	3f 4f       	sbci	r19, 0xFF	; 255
     76c:	8f 2d       	mov	r24, r15
     76e:	0e 94 a6 01 	call	0x34c	; 0x34c <usart_init>
     772:	5c 01       	movw	r10, r24
    fdev_set_udata(stream, usart);
     774:	f8 01       	movw	r30, r16
     776:	84 87       	std	Z+12, r24	; 0x0c
     778:	95 87       	std	Z+13, r25	; 0x0d

#if USE_TX_INTERRUPTS
    if (use_tx_intr) {
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	88 23       	and	r24, r24
     77e:	c1 f1       	breq	.+112    	; 0x7f0 <uart_init+0xd4>
        USART_TXINT_t* txint = (USART_TXINT_t*)malloc(sizeof(USART_TXINT_t));
     780:	86 e4       	ldi	r24, 0x46	; 70
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 72 05 	call	0xae4	; 0xae4 <malloc>
     788:	6c 01       	movw	r12, r24
        txint->t_get_index = txint->t_put_index = 0;
     78a:	fc 01       	movw	r30, r24
     78c:	12 82       	std	Z+2, r1	; 0x02
     78e:	13 82       	std	Z+3, r1	; 0x03
     790:	14 82       	std	Z+4, r1	; 0x04
     792:	15 82       	std	Z+5, r1	; 0x05
        txint->usart = usart;
     794:	a0 82       	st	Z, r10
     796:	b1 82       	std	Z+1, r11	; 0x01
        if (usartnum >= num_txints) {
     798:	6f 2d       	mov	r22, r15
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	80 91 bd 40 	lds	r24, 0x40BD	; 0x8040bd <num_txints>
     7a0:	90 91 be 40 	lds	r25, 0x40BE	; 0x8040be <num_txints+0x1>
     7a4:	68 17       	cp	r22, r24
     7a6:	79 07       	cpc	r23, r25
     7a8:	94 f0       	brlt	.+36     	; 0x7ce <uart_init+0xb2>
            num_txints = usartnum + 1;
     7aa:	6f 5f       	subi	r22, 0xFF	; 255
     7ac:	7f 4f       	sbci	r23, 0xFF	; 255
     7ae:	60 93 bd 40 	sts	0x40BD, r22	; 0x8040bd <num_txints>
     7b2:	70 93 be 40 	sts	0x40BE, r23	; 0x8040be <num_txints+0x1>
            txints = (USART_TXINT_t**)realloc(txints, num_txints * sizeof(USART_TXINT_t*));
     7b6:	66 0f       	add	r22, r22
     7b8:	77 1f       	adc	r23, r23
     7ba:	80 91 bf 40 	lds	r24, 0x40BF	; 0x8040bf <txints>
     7be:	90 91 c0 40 	lds	r25, 0x40C0	; 0x8040c0 <txints+0x1>
     7c2:	0e 94 93 06 	call	0xd26	; 0xd26 <realloc>
     7c6:	80 93 bf 40 	sts	0x40BF, r24	; 0x8040bf <txints>
     7ca:	90 93 c0 40 	sts	0x40C0, r25	; 0x8040c0 <txints+0x1>
        }
        txints[usartnum] = txint;
     7ce:	ef 2d       	mov	r30, r15
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ee 0f       	add	r30, r30
     7d4:	ff 1f       	adc	r31, r31
     7d6:	80 91 bf 40 	lds	r24, 0x40BF	; 0x8040bf <txints>
     7da:	90 91 c0 40 	lds	r25, 0x40C0	; 0x8040c0 <txints+0x1>
     7de:	e8 0f       	add	r30, r24
     7e0:	f9 1f       	adc	r31, r25
     7e2:	c0 82       	st	Z, r12
     7e4:	d1 82       	std	Z+1, r13	; 0x01
        txint = (void*)(((uint16_t)txint) | 0x8000); /* hack to use unused upper bit of address to indicate use of tx intr */
     7e6:	68 94       	set
     7e8:	d7 f8       	bld	r13, 7
        fdev_set_udata(stream, txint);
     7ea:	f8 01       	movw	r30, r16
     7ec:	c4 86       	std	Z+12, r12	; 0x0c
     7ee:	d5 86       	std	Z+13, r13	; 0x0d
    }
#endif

    return stream;
}
     7f0:	c8 01       	movw	r24, r16
     7f2:	0f 90       	pop	r0
     7f4:	df 91       	pop	r29
     7f6:	cf 91       	pop	r28
     7f8:	1f 91       	pop	r17
     7fa:	0f 91       	pop	r16
     7fc:	ff 90       	pop	r15
     7fe:	df 90       	pop	r13
     800:	cf 90       	pop	r12
     802:	bf 90       	pop	r11
     804:	af 90       	pop	r10
     806:	08 95       	ret

00000808 <__cmpsf2>:
     808:	0e 94 46 04 	call	0x88c	; 0x88c <__fp_cmp>
     80c:	08 f4       	brcc	.+2      	; 0x810 <__cmpsf2+0x8>
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	08 95       	ret

00000812 <__floatunsisf>:
     812:	e8 94       	clt
     814:	09 c0       	rjmp	.+18     	; 0x828 <__floatsisf+0x12>

00000816 <__floatsisf>:
     816:	97 fb       	bst	r25, 7
     818:	3e f4       	brtc	.+14     	; 0x828 <__floatsisf+0x12>
     81a:	90 95       	com	r25
     81c:	80 95       	com	r24
     81e:	70 95       	com	r23
     820:	61 95       	neg	r22
     822:	7f 4f       	sbci	r23, 0xFF	; 255
     824:	8f 4f       	sbci	r24, 0xFF	; 255
     826:	9f 4f       	sbci	r25, 0xFF	; 255
     828:	99 23       	and	r25, r25
     82a:	a9 f0       	breq	.+42     	; 0x856 <__floatsisf+0x40>
     82c:	f9 2f       	mov	r31, r25
     82e:	96 e9       	ldi	r25, 0x96	; 150
     830:	bb 27       	eor	r27, r27
     832:	93 95       	inc	r25
     834:	f6 95       	lsr	r31
     836:	87 95       	ror	r24
     838:	77 95       	ror	r23
     83a:	67 95       	ror	r22
     83c:	b7 95       	ror	r27
     83e:	f1 11       	cpse	r31, r1
     840:	f8 cf       	rjmp	.-16     	; 0x832 <__floatsisf+0x1c>
     842:	fa f4       	brpl	.+62     	; 0x882 <__floatsisf+0x6c>
     844:	bb 0f       	add	r27, r27
     846:	11 f4       	brne	.+4      	; 0x84c <__floatsisf+0x36>
     848:	60 ff       	sbrs	r22, 0
     84a:	1b c0       	rjmp	.+54     	; 0x882 <__floatsisf+0x6c>
     84c:	6f 5f       	subi	r22, 0xFF	; 255
     84e:	7f 4f       	sbci	r23, 0xFF	; 255
     850:	8f 4f       	sbci	r24, 0xFF	; 255
     852:	9f 4f       	sbci	r25, 0xFF	; 255
     854:	16 c0       	rjmp	.+44     	; 0x882 <__floatsisf+0x6c>
     856:	88 23       	and	r24, r24
     858:	11 f0       	breq	.+4      	; 0x85e <__floatsisf+0x48>
     85a:	96 e9       	ldi	r25, 0x96	; 150
     85c:	11 c0       	rjmp	.+34     	; 0x880 <__floatsisf+0x6a>
     85e:	77 23       	and	r23, r23
     860:	21 f0       	breq	.+8      	; 0x86a <__floatsisf+0x54>
     862:	9e e8       	ldi	r25, 0x8E	; 142
     864:	87 2f       	mov	r24, r23
     866:	76 2f       	mov	r23, r22
     868:	05 c0       	rjmp	.+10     	; 0x874 <__floatsisf+0x5e>
     86a:	66 23       	and	r22, r22
     86c:	71 f0       	breq	.+28     	; 0x88a <__floatsisf+0x74>
     86e:	96 e8       	ldi	r25, 0x86	; 134
     870:	86 2f       	mov	r24, r22
     872:	70 e0       	ldi	r23, 0x00	; 0
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	2a f0       	brmi	.+10     	; 0x882 <__floatsisf+0x6c>
     878:	9a 95       	dec	r25
     87a:	66 0f       	add	r22, r22
     87c:	77 1f       	adc	r23, r23
     87e:	88 1f       	adc	r24, r24
     880:	da f7       	brpl	.-10     	; 0x878 <__floatsisf+0x62>
     882:	88 0f       	add	r24, r24
     884:	96 95       	lsr	r25
     886:	87 95       	ror	r24
     888:	97 f9       	bld	r25, 7
     88a:	08 95       	ret

0000088c <__fp_cmp>:
     88c:	99 0f       	add	r25, r25
     88e:	00 08       	sbc	r0, r0
     890:	55 0f       	add	r21, r21
     892:	aa 0b       	sbc	r26, r26
     894:	e0 e8       	ldi	r30, 0x80	; 128
     896:	fe ef       	ldi	r31, 0xFE	; 254
     898:	16 16       	cp	r1, r22
     89a:	17 06       	cpc	r1, r23
     89c:	e8 07       	cpc	r30, r24
     89e:	f9 07       	cpc	r31, r25
     8a0:	c0 f0       	brcs	.+48     	; 0x8d2 <__fp_cmp+0x46>
     8a2:	12 16       	cp	r1, r18
     8a4:	13 06       	cpc	r1, r19
     8a6:	e4 07       	cpc	r30, r20
     8a8:	f5 07       	cpc	r31, r21
     8aa:	98 f0       	brcs	.+38     	; 0x8d2 <__fp_cmp+0x46>
     8ac:	62 1b       	sub	r22, r18
     8ae:	73 0b       	sbc	r23, r19
     8b0:	84 0b       	sbc	r24, r20
     8b2:	95 0b       	sbc	r25, r21
     8b4:	39 f4       	brne	.+14     	; 0x8c4 <__fp_cmp+0x38>
     8b6:	0a 26       	eor	r0, r26
     8b8:	61 f0       	breq	.+24     	; 0x8d2 <__fp_cmp+0x46>
     8ba:	23 2b       	or	r18, r19
     8bc:	24 2b       	or	r18, r20
     8be:	25 2b       	or	r18, r21
     8c0:	21 f4       	brne	.+8      	; 0x8ca <__fp_cmp+0x3e>
     8c2:	08 95       	ret
     8c4:	0a 26       	eor	r0, r26
     8c6:	09 f4       	brne	.+2      	; 0x8ca <__fp_cmp+0x3e>
     8c8:	a1 40       	sbci	r26, 0x01	; 1
     8ca:	a6 95       	lsr	r26
     8cc:	8f ef       	ldi	r24, 0xFF	; 255
     8ce:	81 1d       	adc	r24, r1
     8d0:	81 1d       	adc	r24, r1
     8d2:	08 95       	ret

000008d4 <__mulsf3>:
     8d4:	0e 94 7d 04 	call	0x8fa	; 0x8fa <__mulsf3x>
     8d8:	0c 94 ee 04 	jmp	0x9dc	; 0x9dc <__fp_round>
     8dc:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__fp_pscA>
     8e0:	38 f0       	brcs	.+14     	; 0x8f0 <__mulsf3+0x1c>
     8e2:	0e 94 e7 04 	call	0x9ce	; 0x9ce <__fp_pscB>
     8e6:	20 f0       	brcs	.+8      	; 0x8f0 <__mulsf3+0x1c>
     8e8:	95 23       	and	r25, r21
     8ea:	11 f0       	breq	.+4      	; 0x8f0 <__mulsf3+0x1c>
     8ec:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_inf>
     8f0:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__fp_nan>
     8f4:	11 24       	eor	r1, r1
     8f6:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_szero>

000008fa <__mulsf3x>:
     8fa:	0e 94 ff 04 	call	0x9fe	; 0x9fe <__fp_split3>
     8fe:	70 f3       	brcs	.-36     	; 0x8dc <__mulsf3+0x8>

00000900 <__mulsf3_pse>:
     900:	95 9f       	mul	r25, r21
     902:	c1 f3       	breq	.-16     	; 0x8f4 <__mulsf3+0x20>
     904:	95 0f       	add	r25, r21
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	55 1f       	adc	r21, r21
     90a:	62 9f       	mul	r22, r18
     90c:	f0 01       	movw	r30, r0
     90e:	72 9f       	mul	r23, r18
     910:	bb 27       	eor	r27, r27
     912:	f0 0d       	add	r31, r0
     914:	b1 1d       	adc	r27, r1
     916:	63 9f       	mul	r22, r19
     918:	aa 27       	eor	r26, r26
     91a:	f0 0d       	add	r31, r0
     91c:	b1 1d       	adc	r27, r1
     91e:	aa 1f       	adc	r26, r26
     920:	64 9f       	mul	r22, r20
     922:	66 27       	eor	r22, r22
     924:	b0 0d       	add	r27, r0
     926:	a1 1d       	adc	r26, r1
     928:	66 1f       	adc	r22, r22
     92a:	82 9f       	mul	r24, r18
     92c:	22 27       	eor	r18, r18
     92e:	b0 0d       	add	r27, r0
     930:	a1 1d       	adc	r26, r1
     932:	62 1f       	adc	r22, r18
     934:	73 9f       	mul	r23, r19
     936:	b0 0d       	add	r27, r0
     938:	a1 1d       	adc	r26, r1
     93a:	62 1f       	adc	r22, r18
     93c:	83 9f       	mul	r24, r19
     93e:	a0 0d       	add	r26, r0
     940:	61 1d       	adc	r22, r1
     942:	22 1f       	adc	r18, r18
     944:	74 9f       	mul	r23, r20
     946:	33 27       	eor	r19, r19
     948:	a0 0d       	add	r26, r0
     94a:	61 1d       	adc	r22, r1
     94c:	23 1f       	adc	r18, r19
     94e:	84 9f       	mul	r24, r20
     950:	60 0d       	add	r22, r0
     952:	21 1d       	adc	r18, r1
     954:	82 2f       	mov	r24, r18
     956:	76 2f       	mov	r23, r22
     958:	6a 2f       	mov	r22, r26
     95a:	11 24       	eor	r1, r1
     95c:	9f 57       	subi	r25, 0x7F	; 127
     95e:	50 40       	sbci	r21, 0x00	; 0
     960:	9a f0       	brmi	.+38     	; 0x988 <__mulsf3_pse+0x88>
     962:	f1 f0       	breq	.+60     	; 0x9a0 <__mulsf3_pse+0xa0>
     964:	88 23       	and	r24, r24
     966:	4a f0       	brmi	.+18     	; 0x97a <__mulsf3_pse+0x7a>
     968:	ee 0f       	add	r30, r30
     96a:	ff 1f       	adc	r31, r31
     96c:	bb 1f       	adc	r27, r27
     96e:	66 1f       	adc	r22, r22
     970:	77 1f       	adc	r23, r23
     972:	88 1f       	adc	r24, r24
     974:	91 50       	subi	r25, 0x01	; 1
     976:	50 40       	sbci	r21, 0x00	; 0
     978:	a9 f7       	brne	.-22     	; 0x964 <__mulsf3_pse+0x64>
     97a:	9e 3f       	cpi	r25, 0xFE	; 254
     97c:	51 05       	cpc	r21, r1
     97e:	80 f0       	brcs	.+32     	; 0x9a0 <__mulsf3_pse+0xa0>
     980:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__fp_inf>
     984:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__fp_szero>
     988:	5f 3f       	cpi	r21, 0xFF	; 255
     98a:	e4 f3       	brlt	.-8      	; 0x984 <__mulsf3_pse+0x84>
     98c:	98 3e       	cpi	r25, 0xE8	; 232
     98e:	d4 f3       	brlt	.-12     	; 0x984 <__mulsf3_pse+0x84>
     990:	86 95       	lsr	r24
     992:	77 95       	ror	r23
     994:	67 95       	ror	r22
     996:	b7 95       	ror	r27
     998:	f7 95       	ror	r31
     99a:	e7 95       	ror	r30
     99c:	9f 5f       	subi	r25, 0xFF	; 255
     99e:	c1 f7       	brne	.-16     	; 0x990 <__mulsf3_pse+0x90>
     9a0:	fe 2b       	or	r31, r30
     9a2:	88 0f       	add	r24, r24
     9a4:	91 1d       	adc	r25, r1
     9a6:	96 95       	lsr	r25
     9a8:	87 95       	ror	r24
     9aa:	97 f9       	bld	r25, 7
     9ac:	08 95       	ret

000009ae <__fp_inf>:
     9ae:	97 f9       	bld	r25, 7
     9b0:	9f 67       	ori	r25, 0x7F	; 127
     9b2:	80 e8       	ldi	r24, 0x80	; 128
     9b4:	70 e0       	ldi	r23, 0x00	; 0
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	08 95       	ret

000009ba <__fp_nan>:
     9ba:	9f ef       	ldi	r25, 0xFF	; 255
     9bc:	80 ec       	ldi	r24, 0xC0	; 192
     9be:	08 95       	ret

000009c0 <__fp_pscA>:
     9c0:	00 24       	eor	r0, r0
     9c2:	0a 94       	dec	r0
     9c4:	16 16       	cp	r1, r22
     9c6:	17 06       	cpc	r1, r23
     9c8:	18 06       	cpc	r1, r24
     9ca:	09 06       	cpc	r0, r25
     9cc:	08 95       	ret

000009ce <__fp_pscB>:
     9ce:	00 24       	eor	r0, r0
     9d0:	0a 94       	dec	r0
     9d2:	12 16       	cp	r1, r18
     9d4:	13 06       	cpc	r1, r19
     9d6:	14 06       	cpc	r1, r20
     9d8:	05 06       	cpc	r0, r21
     9da:	08 95       	ret

000009dc <__fp_round>:
     9dc:	09 2e       	mov	r0, r25
     9de:	03 94       	inc	r0
     9e0:	00 0c       	add	r0, r0
     9e2:	11 f4       	brne	.+4      	; 0x9e8 <__fp_round+0xc>
     9e4:	88 23       	and	r24, r24
     9e6:	52 f0       	brmi	.+20     	; 0x9fc <__fp_round+0x20>
     9e8:	bb 0f       	add	r27, r27
     9ea:	40 f4       	brcc	.+16     	; 0x9fc <__fp_round+0x20>
     9ec:	bf 2b       	or	r27, r31
     9ee:	11 f4       	brne	.+4      	; 0x9f4 <__fp_round+0x18>
     9f0:	60 ff       	sbrs	r22, 0
     9f2:	04 c0       	rjmp	.+8      	; 0x9fc <__fp_round+0x20>
     9f4:	6f 5f       	subi	r22, 0xFF	; 255
     9f6:	7f 4f       	sbci	r23, 0xFF	; 255
     9f8:	8f 4f       	sbci	r24, 0xFF	; 255
     9fa:	9f 4f       	sbci	r25, 0xFF	; 255
     9fc:	08 95       	ret

000009fe <__fp_split3>:
     9fe:	57 fd       	sbrc	r21, 7
     a00:	90 58       	subi	r25, 0x80	; 128
     a02:	44 0f       	add	r20, r20
     a04:	55 1f       	adc	r21, r21
     a06:	59 f0       	breq	.+22     	; 0xa1e <__fp_splitA+0x10>
     a08:	5f 3f       	cpi	r21, 0xFF	; 255
     a0a:	71 f0       	breq	.+28     	; 0xa28 <__fp_splitA+0x1a>
     a0c:	47 95       	ror	r20

00000a0e <__fp_splitA>:
     a0e:	88 0f       	add	r24, r24
     a10:	97 fb       	bst	r25, 7
     a12:	99 1f       	adc	r25, r25
     a14:	61 f0       	breq	.+24     	; 0xa2e <__fp_splitA+0x20>
     a16:	9f 3f       	cpi	r25, 0xFF	; 255
     a18:	79 f0       	breq	.+30     	; 0xa38 <__fp_splitA+0x2a>
     a1a:	87 95       	ror	r24
     a1c:	08 95       	ret
     a1e:	12 16       	cp	r1, r18
     a20:	13 06       	cpc	r1, r19
     a22:	14 06       	cpc	r1, r20
     a24:	55 1f       	adc	r21, r21
     a26:	f2 cf       	rjmp	.-28     	; 0xa0c <__fp_split3+0xe>
     a28:	46 95       	lsr	r20
     a2a:	f1 df       	rcall	.-30     	; 0xa0e <__fp_splitA>
     a2c:	08 c0       	rjmp	.+16     	; 0xa3e <__fp_splitA+0x30>
     a2e:	16 16       	cp	r1, r22
     a30:	17 06       	cpc	r1, r23
     a32:	18 06       	cpc	r1, r24
     a34:	99 1f       	adc	r25, r25
     a36:	f1 cf       	rjmp	.-30     	; 0xa1a <__fp_splitA+0xc>
     a38:	86 95       	lsr	r24
     a3a:	71 05       	cpc	r23, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	08 94       	sec
     a40:	08 95       	ret

00000a42 <__fp_zero>:
     a42:	e8 94       	clt

00000a44 <__fp_szero>:
     a44:	bb 27       	eor	r27, r27
     a46:	66 27       	eor	r22, r22
     a48:	77 27       	eor	r23, r23
     a4a:	cb 01       	movw	r24, r22
     a4c:	97 f9       	bld	r25, 7
     a4e:	08 95       	ret

00000a50 <__divmodhi4>:
     a50:	97 fb       	bst	r25, 7
     a52:	07 2e       	mov	r0, r23
     a54:	16 f4       	brtc	.+4      	; 0xa5a <__divmodhi4+0xa>
     a56:	00 94       	com	r0
     a58:	07 d0       	rcall	.+14     	; 0xa68 <__divmodhi4_neg1>
     a5a:	77 fd       	sbrc	r23, 7
     a5c:	09 d0       	rcall	.+18     	; 0xa70 <__divmodhi4_neg2>
     a5e:	0e 94 5e 05 	call	0xabc	; 0xabc <__udivmodhi4>
     a62:	07 fc       	sbrc	r0, 7
     a64:	05 d0       	rcall	.+10     	; 0xa70 <__divmodhi4_neg2>
     a66:	3e f4       	brtc	.+14     	; 0xa76 <__divmodhi4_exit>

00000a68 <__divmodhi4_neg1>:
     a68:	90 95       	com	r25
     a6a:	81 95       	neg	r24
     a6c:	9f 4f       	sbci	r25, 0xFF	; 255
     a6e:	08 95       	ret

00000a70 <__divmodhi4_neg2>:
     a70:	70 95       	com	r23
     a72:	61 95       	neg	r22
     a74:	7f 4f       	sbci	r23, 0xFF	; 255

00000a76 <__divmodhi4_exit>:
     a76:	08 95       	ret

00000a78 <__udivmodsi4>:
     a78:	a1 e2       	ldi	r26, 0x21	; 33
     a7a:	1a 2e       	mov	r1, r26
     a7c:	aa 1b       	sub	r26, r26
     a7e:	bb 1b       	sub	r27, r27
     a80:	fd 01       	movw	r30, r26
     a82:	0d c0       	rjmp	.+26     	; 0xa9e <__udivmodsi4_ep>

00000a84 <__udivmodsi4_loop>:
     a84:	aa 1f       	adc	r26, r26
     a86:	bb 1f       	adc	r27, r27
     a88:	ee 1f       	adc	r30, r30
     a8a:	ff 1f       	adc	r31, r31
     a8c:	a2 17       	cp	r26, r18
     a8e:	b3 07       	cpc	r27, r19
     a90:	e4 07       	cpc	r30, r20
     a92:	f5 07       	cpc	r31, r21
     a94:	20 f0       	brcs	.+8      	; 0xa9e <__udivmodsi4_ep>
     a96:	a2 1b       	sub	r26, r18
     a98:	b3 0b       	sbc	r27, r19
     a9a:	e4 0b       	sbc	r30, r20
     a9c:	f5 0b       	sbc	r31, r21

00000a9e <__udivmodsi4_ep>:
     a9e:	66 1f       	adc	r22, r22
     aa0:	77 1f       	adc	r23, r23
     aa2:	88 1f       	adc	r24, r24
     aa4:	99 1f       	adc	r25, r25
     aa6:	1a 94       	dec	r1
     aa8:	69 f7       	brne	.-38     	; 0xa84 <__udivmodsi4_loop>
     aaa:	60 95       	com	r22
     aac:	70 95       	com	r23
     aae:	80 95       	com	r24
     ab0:	90 95       	com	r25
     ab2:	9b 01       	movw	r18, r22
     ab4:	ac 01       	movw	r20, r24
     ab6:	bd 01       	movw	r22, r26
     ab8:	cf 01       	movw	r24, r30
     aba:	08 95       	ret

00000abc <__udivmodhi4>:
     abc:	aa 1b       	sub	r26, r26
     abe:	bb 1b       	sub	r27, r27
     ac0:	51 e1       	ldi	r21, 0x11	; 17
     ac2:	07 c0       	rjmp	.+14     	; 0xad2 <__udivmodhi4_ep>

00000ac4 <__udivmodhi4_loop>:
     ac4:	aa 1f       	adc	r26, r26
     ac6:	bb 1f       	adc	r27, r27
     ac8:	a6 17       	cp	r26, r22
     aca:	b7 07       	cpc	r27, r23
     acc:	10 f0       	brcs	.+4      	; 0xad2 <__udivmodhi4_ep>
     ace:	a6 1b       	sub	r26, r22
     ad0:	b7 0b       	sbc	r27, r23

00000ad2 <__udivmodhi4_ep>:
     ad2:	88 1f       	adc	r24, r24
     ad4:	99 1f       	adc	r25, r25
     ad6:	5a 95       	dec	r21
     ad8:	a9 f7       	brne	.-22     	; 0xac4 <__udivmodhi4_loop>
     ada:	80 95       	com	r24
     adc:	90 95       	com	r25
     ade:	bc 01       	movw	r22, r24
     ae0:	cd 01       	movw	r24, r26
     ae2:	08 95       	ret

00000ae4 <malloc>:
     ae4:	0f 93       	push	r16
     ae6:	1f 93       	push	r17
     ae8:	cf 93       	push	r28
     aea:	df 93       	push	r29
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	91 05       	cpc	r25, r1
     af0:	10 f4       	brcc	.+4      	; 0xaf6 <malloc+0x12>
     af2:	82 e0       	ldi	r24, 0x02	; 2
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	e0 91 c3 40 	lds	r30, 0x40C3	; 0x8040c3 <__flp>
     afa:	f0 91 c4 40 	lds	r31, 0x40C4	; 0x8040c4 <__flp+0x1>
     afe:	20 e0       	ldi	r18, 0x00	; 0
     b00:	30 e0       	ldi	r19, 0x00	; 0
     b02:	a0 e0       	ldi	r26, 0x00	; 0
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	30 97       	sbiw	r30, 0x00	; 0
     b08:	19 f1       	breq	.+70     	; 0xb50 <malloc+0x6c>
     b0a:	40 81       	ld	r20, Z
     b0c:	51 81       	ldd	r21, Z+1	; 0x01
     b0e:	02 81       	ldd	r16, Z+2	; 0x02
     b10:	13 81       	ldd	r17, Z+3	; 0x03
     b12:	48 17       	cp	r20, r24
     b14:	59 07       	cpc	r21, r25
     b16:	c8 f0       	brcs	.+50     	; 0xb4a <malloc+0x66>
     b18:	84 17       	cp	r24, r20
     b1a:	95 07       	cpc	r25, r21
     b1c:	69 f4       	brne	.+26     	; 0xb38 <malloc+0x54>
     b1e:	10 97       	sbiw	r26, 0x00	; 0
     b20:	31 f0       	breq	.+12     	; 0xb2e <malloc+0x4a>
     b22:	12 96       	adiw	r26, 0x02	; 2
     b24:	0c 93       	st	X, r16
     b26:	12 97       	sbiw	r26, 0x02	; 2
     b28:	13 96       	adiw	r26, 0x03	; 3
     b2a:	1c 93       	st	X, r17
     b2c:	27 c0       	rjmp	.+78     	; 0xb7c <malloc+0x98>
     b2e:	00 93 c3 40 	sts	0x40C3, r16	; 0x8040c3 <__flp>
     b32:	10 93 c4 40 	sts	0x40C4, r17	; 0x8040c4 <__flp+0x1>
     b36:	22 c0       	rjmp	.+68     	; 0xb7c <malloc+0x98>
     b38:	21 15       	cp	r18, r1
     b3a:	31 05       	cpc	r19, r1
     b3c:	19 f0       	breq	.+6      	; 0xb44 <malloc+0x60>
     b3e:	42 17       	cp	r20, r18
     b40:	53 07       	cpc	r21, r19
     b42:	18 f4       	brcc	.+6      	; 0xb4a <malloc+0x66>
     b44:	9a 01       	movw	r18, r20
     b46:	bd 01       	movw	r22, r26
     b48:	ef 01       	movw	r28, r30
     b4a:	df 01       	movw	r26, r30
     b4c:	f8 01       	movw	r30, r16
     b4e:	db cf       	rjmp	.-74     	; 0xb06 <malloc+0x22>
     b50:	21 15       	cp	r18, r1
     b52:	31 05       	cpc	r19, r1
     b54:	f9 f0       	breq	.+62     	; 0xb94 <malloc+0xb0>
     b56:	28 1b       	sub	r18, r24
     b58:	39 0b       	sbc	r19, r25
     b5a:	24 30       	cpi	r18, 0x04	; 4
     b5c:	31 05       	cpc	r19, r1
     b5e:	80 f4       	brcc	.+32     	; 0xb80 <malloc+0x9c>
     b60:	8a 81       	ldd	r24, Y+2	; 0x02
     b62:	9b 81       	ldd	r25, Y+3	; 0x03
     b64:	61 15       	cp	r22, r1
     b66:	71 05       	cpc	r23, r1
     b68:	21 f0       	breq	.+8      	; 0xb72 <malloc+0x8e>
     b6a:	fb 01       	movw	r30, r22
     b6c:	82 83       	std	Z+2, r24	; 0x02
     b6e:	93 83       	std	Z+3, r25	; 0x03
     b70:	04 c0       	rjmp	.+8      	; 0xb7a <malloc+0x96>
     b72:	80 93 c3 40 	sts	0x40C3, r24	; 0x8040c3 <__flp>
     b76:	90 93 c4 40 	sts	0x40C4, r25	; 0x8040c4 <__flp+0x1>
     b7a:	fe 01       	movw	r30, r28
     b7c:	32 96       	adiw	r30, 0x02	; 2
     b7e:	44 c0       	rjmp	.+136    	; 0xc08 <malloc+0x124>
     b80:	fe 01       	movw	r30, r28
     b82:	e2 0f       	add	r30, r18
     b84:	f3 1f       	adc	r31, r19
     b86:	81 93       	st	Z+, r24
     b88:	91 93       	st	Z+, r25
     b8a:	22 50       	subi	r18, 0x02	; 2
     b8c:	31 09       	sbc	r19, r1
     b8e:	28 83       	st	Y, r18
     b90:	39 83       	std	Y+1, r19	; 0x01
     b92:	3a c0       	rjmp	.+116    	; 0xc08 <malloc+0x124>
     b94:	20 91 c1 40 	lds	r18, 0x40C1	; 0x8040c1 <__brkval>
     b98:	30 91 c2 40 	lds	r19, 0x40C2	; 0x8040c2 <__brkval+0x1>
     b9c:	23 2b       	or	r18, r19
     b9e:	41 f4       	brne	.+16     	; 0xbb0 <malloc+0xcc>
     ba0:	20 91 02 40 	lds	r18, 0x4002	; 0x804002 <__malloc_heap_start>
     ba4:	30 91 03 40 	lds	r19, 0x4003	; 0x804003 <__malloc_heap_start+0x1>
     ba8:	20 93 c1 40 	sts	0x40C1, r18	; 0x8040c1 <__brkval>
     bac:	30 93 c2 40 	sts	0x40C2, r19	; 0x8040c2 <__brkval+0x1>
     bb0:	20 91 00 40 	lds	r18, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     bb4:	30 91 01 40 	lds	r19, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     bb8:	21 15       	cp	r18, r1
     bba:	31 05       	cpc	r19, r1
     bbc:	41 f4       	brne	.+16     	; 0xbce <malloc+0xea>
     bbe:	2d b7       	in	r18, 0x3d	; 61
     bc0:	3e b7       	in	r19, 0x3e	; 62
     bc2:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
     bc6:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
     bca:	24 1b       	sub	r18, r20
     bcc:	35 0b       	sbc	r19, r21
     bce:	e0 91 c1 40 	lds	r30, 0x40C1	; 0x8040c1 <__brkval>
     bd2:	f0 91 c2 40 	lds	r31, 0x40C2	; 0x8040c2 <__brkval+0x1>
     bd6:	e2 17       	cp	r30, r18
     bd8:	f3 07       	cpc	r31, r19
     bda:	a0 f4       	brcc	.+40     	; 0xc04 <malloc+0x120>
     bdc:	2e 1b       	sub	r18, r30
     bde:	3f 0b       	sbc	r19, r31
     be0:	28 17       	cp	r18, r24
     be2:	39 07       	cpc	r19, r25
     be4:	78 f0       	brcs	.+30     	; 0xc04 <malloc+0x120>
     be6:	ac 01       	movw	r20, r24
     be8:	4e 5f       	subi	r20, 0xFE	; 254
     bea:	5f 4f       	sbci	r21, 0xFF	; 255
     bec:	24 17       	cp	r18, r20
     bee:	35 07       	cpc	r19, r21
     bf0:	48 f0       	brcs	.+18     	; 0xc04 <malloc+0x120>
     bf2:	4e 0f       	add	r20, r30
     bf4:	5f 1f       	adc	r21, r31
     bf6:	40 93 c1 40 	sts	0x40C1, r20	; 0x8040c1 <__brkval>
     bfa:	50 93 c2 40 	sts	0x40C2, r21	; 0x8040c2 <__brkval+0x1>
     bfe:	81 93       	st	Z+, r24
     c00:	91 93       	st	Z+, r25
     c02:	02 c0       	rjmp	.+4      	; 0xc08 <malloc+0x124>
     c04:	e0 e0       	ldi	r30, 0x00	; 0
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	cf 01       	movw	r24, r30
     c0a:	df 91       	pop	r29
     c0c:	cf 91       	pop	r28
     c0e:	1f 91       	pop	r17
     c10:	0f 91       	pop	r16
     c12:	08 95       	ret

00000c14 <free>:
     c14:	cf 93       	push	r28
     c16:	df 93       	push	r29
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	09 f4       	brne	.+2      	; 0xc1e <free+0xa>
     c1c:	81 c0       	rjmp	.+258    	; 0xd20 <free+0x10c>
     c1e:	fc 01       	movw	r30, r24
     c20:	32 97       	sbiw	r30, 0x02	; 2
     c22:	12 82       	std	Z+2, r1	; 0x02
     c24:	13 82       	std	Z+3, r1	; 0x03
     c26:	a0 91 c3 40 	lds	r26, 0x40C3	; 0x8040c3 <__flp>
     c2a:	b0 91 c4 40 	lds	r27, 0x40C4	; 0x8040c4 <__flp+0x1>
     c2e:	10 97       	sbiw	r26, 0x00	; 0
     c30:	81 f4       	brne	.+32     	; 0xc52 <free+0x3e>
     c32:	20 81       	ld	r18, Z
     c34:	31 81       	ldd	r19, Z+1	; 0x01
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	20 91 c1 40 	lds	r18, 0x40C1	; 0x8040c1 <__brkval>
     c3e:	30 91 c2 40 	lds	r19, 0x40C2	; 0x8040c2 <__brkval+0x1>
     c42:	28 17       	cp	r18, r24
     c44:	39 07       	cpc	r19, r25
     c46:	51 f5       	brne	.+84     	; 0xc9c <free+0x88>
     c48:	e0 93 c1 40 	sts	0x40C1, r30	; 0x8040c1 <__brkval>
     c4c:	f0 93 c2 40 	sts	0x40C2, r31	; 0x8040c2 <__brkval+0x1>
     c50:	67 c0       	rjmp	.+206    	; 0xd20 <free+0x10c>
     c52:	ed 01       	movw	r28, r26
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	ce 17       	cp	r28, r30
     c5a:	df 07       	cpc	r29, r31
     c5c:	40 f4       	brcc	.+16     	; 0xc6e <free+0x5a>
     c5e:	4a 81       	ldd	r20, Y+2	; 0x02
     c60:	5b 81       	ldd	r21, Y+3	; 0x03
     c62:	9e 01       	movw	r18, r28
     c64:	41 15       	cp	r20, r1
     c66:	51 05       	cpc	r21, r1
     c68:	f1 f0       	breq	.+60     	; 0xca6 <free+0x92>
     c6a:	ea 01       	movw	r28, r20
     c6c:	f5 cf       	rjmp	.-22     	; 0xc58 <free+0x44>
     c6e:	c2 83       	std	Z+2, r28	; 0x02
     c70:	d3 83       	std	Z+3, r29	; 0x03
     c72:	40 81       	ld	r20, Z
     c74:	51 81       	ldd	r21, Z+1	; 0x01
     c76:	84 0f       	add	r24, r20
     c78:	95 1f       	adc	r25, r21
     c7a:	c8 17       	cp	r28, r24
     c7c:	d9 07       	cpc	r29, r25
     c7e:	59 f4       	brne	.+22     	; 0xc96 <free+0x82>
     c80:	88 81       	ld	r24, Y
     c82:	99 81       	ldd	r25, Y+1	; 0x01
     c84:	84 0f       	add	r24, r20
     c86:	95 1f       	adc	r25, r21
     c88:	02 96       	adiw	r24, 0x02	; 2
     c8a:	80 83       	st	Z, r24
     c8c:	91 83       	std	Z+1, r25	; 0x01
     c8e:	8a 81       	ldd	r24, Y+2	; 0x02
     c90:	9b 81       	ldd	r25, Y+3	; 0x03
     c92:	82 83       	std	Z+2, r24	; 0x02
     c94:	93 83       	std	Z+3, r25	; 0x03
     c96:	21 15       	cp	r18, r1
     c98:	31 05       	cpc	r19, r1
     c9a:	29 f4       	brne	.+10     	; 0xca6 <free+0x92>
     c9c:	e0 93 c3 40 	sts	0x40C3, r30	; 0x8040c3 <__flp>
     ca0:	f0 93 c4 40 	sts	0x40C4, r31	; 0x8040c4 <__flp+0x1>
     ca4:	3d c0       	rjmp	.+122    	; 0xd20 <free+0x10c>
     ca6:	e9 01       	movw	r28, r18
     ca8:	ea 83       	std	Y+2, r30	; 0x02
     caa:	fb 83       	std	Y+3, r31	; 0x03
     cac:	49 91       	ld	r20, Y+
     cae:	59 91       	ld	r21, Y+
     cb0:	c4 0f       	add	r28, r20
     cb2:	d5 1f       	adc	r29, r21
     cb4:	ec 17       	cp	r30, r28
     cb6:	fd 07       	cpc	r31, r29
     cb8:	61 f4       	brne	.+24     	; 0xcd2 <free+0xbe>
     cba:	80 81       	ld	r24, Z
     cbc:	91 81       	ldd	r25, Z+1	; 0x01
     cbe:	84 0f       	add	r24, r20
     cc0:	95 1f       	adc	r25, r21
     cc2:	02 96       	adiw	r24, 0x02	; 2
     cc4:	e9 01       	movw	r28, r18
     cc6:	88 83       	st	Y, r24
     cc8:	99 83       	std	Y+1, r25	; 0x01
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	8a 83       	std	Y+2, r24	; 0x02
     cd0:	9b 83       	std	Y+3, r25	; 0x03
     cd2:	e0 e0       	ldi	r30, 0x00	; 0
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	12 96       	adiw	r26, 0x02	; 2
     cd8:	8d 91       	ld	r24, X+
     cda:	9c 91       	ld	r25, X
     cdc:	13 97       	sbiw	r26, 0x03	; 3
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	19 f0       	breq	.+6      	; 0xce8 <free+0xd4>
     ce2:	fd 01       	movw	r30, r26
     ce4:	dc 01       	movw	r26, r24
     ce6:	f7 cf       	rjmp	.-18     	; 0xcd6 <free+0xc2>
     ce8:	8d 91       	ld	r24, X+
     cea:	9c 91       	ld	r25, X
     cec:	11 97       	sbiw	r26, 0x01	; 1
     cee:	9d 01       	movw	r18, r26
     cf0:	2e 5f       	subi	r18, 0xFE	; 254
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	82 0f       	add	r24, r18
     cf6:	93 1f       	adc	r25, r19
     cf8:	20 91 c1 40 	lds	r18, 0x40C1	; 0x8040c1 <__brkval>
     cfc:	30 91 c2 40 	lds	r19, 0x40C2	; 0x8040c2 <__brkval+0x1>
     d00:	28 17       	cp	r18, r24
     d02:	39 07       	cpc	r19, r25
     d04:	69 f4       	brne	.+26     	; 0xd20 <free+0x10c>
     d06:	30 97       	sbiw	r30, 0x00	; 0
     d08:	29 f4       	brne	.+10     	; 0xd14 <free+0x100>
     d0a:	10 92 c3 40 	sts	0x40C3, r1	; 0x8040c3 <__flp>
     d0e:	10 92 c4 40 	sts	0x40C4, r1	; 0x8040c4 <__flp+0x1>
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <free+0x104>
     d14:	12 82       	std	Z+2, r1	; 0x02
     d16:	13 82       	std	Z+3, r1	; 0x03
     d18:	a0 93 c1 40 	sts	0x40C1, r26	; 0x8040c1 <__brkval>
     d1c:	b0 93 c2 40 	sts	0x40C2, r27	; 0x8040c2 <__brkval+0x1>
     d20:	df 91       	pop	r29
     d22:	cf 91       	pop	r28
     d24:	08 95       	ret

00000d26 <realloc>:
     d26:	6f 92       	push	r6
     d28:	7f 92       	push	r7
     d2a:	8f 92       	push	r8
     d2c:	9f 92       	push	r9
     d2e:	af 92       	push	r10
     d30:	bf 92       	push	r11
     d32:	cf 92       	push	r12
     d34:	df 92       	push	r13
     d36:	ef 92       	push	r14
     d38:	ff 92       	push	r15
     d3a:	0f 93       	push	r16
     d3c:	1f 93       	push	r17
     d3e:	cf 93       	push	r28
     d40:	df 93       	push	r29
     d42:	00 97       	sbiw	r24, 0x00	; 0
     d44:	89 f4       	brne	.+34     	; 0xd68 <realloc+0x42>
     d46:	cb 01       	movw	r24, r22
     d48:	df 91       	pop	r29
     d4a:	cf 91       	pop	r28
     d4c:	1f 91       	pop	r17
     d4e:	0f 91       	pop	r16
     d50:	ff 90       	pop	r15
     d52:	ef 90       	pop	r14
     d54:	df 90       	pop	r13
     d56:	cf 90       	pop	r12
     d58:	bf 90       	pop	r11
     d5a:	af 90       	pop	r10
     d5c:	9f 90       	pop	r9
     d5e:	8f 90       	pop	r8
     d60:	7f 90       	pop	r7
     d62:	6f 90       	pop	r6
     d64:	0c 94 72 05 	jmp	0xae4	; 0xae4 <malloc>
     d68:	fc 01       	movw	r30, r24
     d6a:	e6 0f       	add	r30, r22
     d6c:	f7 1f       	adc	r31, r23
     d6e:	9c 01       	movw	r18, r24
     d70:	22 50       	subi	r18, 0x02	; 2
     d72:	31 09       	sbc	r19, r1
     d74:	e2 17       	cp	r30, r18
     d76:	f3 07       	cpc	r31, r19
     d78:	08 f4       	brcc	.+2      	; 0xd7c <realloc+0x56>
     d7a:	a9 c0       	rjmp	.+338    	; 0xece <realloc+0x1a8>
     d7c:	ec 01       	movw	r28, r24
     d7e:	d9 01       	movw	r26, r18
     d80:	0d 91       	ld	r16, X+
     d82:	1c 91       	ld	r17, X
     d84:	11 97       	sbiw	r26, 0x01	; 1
     d86:	06 17       	cp	r16, r22
     d88:	17 07       	cpc	r17, r23
     d8a:	b0 f0       	brcs	.+44     	; 0xdb8 <realloc+0x92>
     d8c:	05 30       	cpi	r16, 0x05	; 5
     d8e:	11 05       	cpc	r17, r1
     d90:	08 f4       	brcc	.+2      	; 0xd94 <realloc+0x6e>
     d92:	9b c0       	rjmp	.+310    	; 0xeca <realloc+0x1a4>
     d94:	c8 01       	movw	r24, r16
     d96:	04 97       	sbiw	r24, 0x04	; 4
     d98:	86 17       	cp	r24, r22
     d9a:	97 07       	cpc	r25, r23
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <realloc+0x7a>
     d9e:	95 c0       	rjmp	.+298    	; 0xeca <realloc+0x1a4>
     da0:	02 50       	subi	r16, 0x02	; 2
     da2:	11 09       	sbc	r17, r1
     da4:	06 1b       	sub	r16, r22
     da6:	17 0b       	sbc	r17, r23
     da8:	01 93       	st	Z+, r16
     daa:	11 93       	st	Z+, r17
     dac:	6d 93       	st	X+, r22
     dae:	7c 93       	st	X, r23
     db0:	cf 01       	movw	r24, r30
     db2:	0e 94 0a 06 	call	0xc14	; 0xc14 <free>
     db6:	89 c0       	rjmp	.+274    	; 0xeca <realloc+0x1a4>
     db8:	5b 01       	movw	r10, r22
     dba:	a0 1a       	sub	r10, r16
     dbc:	b1 0a       	sbc	r11, r17
     dbe:	4c 01       	movw	r8, r24
     dc0:	80 0e       	add	r8, r16
     dc2:	91 1e       	adc	r9, r17
     dc4:	a0 91 c3 40 	lds	r26, 0x40C3	; 0x8040c3 <__flp>
     dc8:	b0 91 c4 40 	lds	r27, 0x40C4	; 0x8040c4 <__flp+0x1>
     dcc:	61 2c       	mov	r6, r1
     dce:	71 2c       	mov	r7, r1
     dd0:	e1 2c       	mov	r14, r1
     dd2:	f1 2c       	mov	r15, r1
     dd4:	10 97       	sbiw	r26, 0x00	; 0
     dd6:	09 f4       	brne	.+2      	; 0xdda <realloc+0xb4>
     dd8:	46 c0       	rjmp	.+140    	; 0xe66 <realloc+0x140>
     dda:	8d 91       	ld	r24, X+
     ddc:	9c 91       	ld	r25, X
     dde:	11 97       	sbiw	r26, 0x01	; 1
     de0:	a8 15       	cp	r26, r8
     de2:	b9 05       	cpc	r27, r9
     de4:	b1 f5       	brne	.+108    	; 0xe52 <realloc+0x12c>
     de6:	6c 01       	movw	r12, r24
     de8:	42 e0       	ldi	r20, 0x02	; 2
     dea:	c4 0e       	add	r12, r20
     dec:	d1 1c       	adc	r13, r1
     dee:	ca 14       	cp	r12, r10
     df0:	db 04       	cpc	r13, r11
     df2:	78 f1       	brcs	.+94     	; 0xe52 <realloc+0x12c>
     df4:	4c 01       	movw	r8, r24
     df6:	8a 18       	sub	r8, r10
     df8:	9b 08       	sbc	r9, r11
     dfa:	64 01       	movw	r12, r8
     dfc:	42 e0       	ldi	r20, 0x02	; 2
     dfe:	c4 0e       	add	r12, r20
     e00:	d1 1c       	adc	r13, r1
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	bc 90       	ld	r11, X
     e06:	12 97       	sbiw	r26, 0x02	; 2
     e08:	13 96       	adiw	r26, 0x03	; 3
     e0a:	ac 91       	ld	r26, X
     e0c:	b5 e0       	ldi	r27, 0x05	; 5
     e0e:	cb 16       	cp	r12, r27
     e10:	d1 04       	cpc	r13, r1
     e12:	40 f0       	brcs	.+16     	; 0xe24 <realloc+0xfe>
     e14:	b2 82       	std	Z+2, r11	; 0x02
     e16:	a3 83       	std	Z+3, r26	; 0x03
     e18:	80 82       	st	Z, r8
     e1a:	91 82       	std	Z+1, r9	; 0x01
     e1c:	d9 01       	movw	r26, r18
     e1e:	6d 93       	st	X+, r22
     e20:	7c 93       	st	X, r23
     e22:	09 c0       	rjmp	.+18     	; 0xe36 <realloc+0x110>
     e24:	0e 5f       	subi	r16, 0xFE	; 254
     e26:	1f 4f       	sbci	r17, 0xFF	; 255
     e28:	80 0f       	add	r24, r16
     e2a:	91 1f       	adc	r25, r17
     e2c:	f9 01       	movw	r30, r18
     e2e:	80 83       	st	Z, r24
     e30:	91 83       	std	Z+1, r25	; 0x01
     e32:	eb 2d       	mov	r30, r11
     e34:	fa 2f       	mov	r31, r26
     e36:	e1 14       	cp	r14, r1
     e38:	f1 04       	cpc	r15, r1
     e3a:	31 f0       	breq	.+12     	; 0xe48 <realloc+0x122>
     e3c:	d7 01       	movw	r26, r14
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	ed 93       	st	X+, r30
     e42:	fc 93       	st	X, r31
     e44:	13 97       	sbiw	r26, 0x03	; 3
     e46:	41 c0       	rjmp	.+130    	; 0xeca <realloc+0x1a4>
     e48:	e0 93 c3 40 	sts	0x40C3, r30	; 0x8040c3 <__flp>
     e4c:	f0 93 c4 40 	sts	0x40C4, r31	; 0x8040c4 <__flp+0x1>
     e50:	3c c0       	rjmp	.+120    	; 0xeca <realloc+0x1a4>
     e52:	68 16       	cp	r6, r24
     e54:	79 06       	cpc	r7, r25
     e56:	08 f4       	brcc	.+2      	; 0xe5a <realloc+0x134>
     e58:	3c 01       	movw	r6, r24
     e5a:	7d 01       	movw	r14, r26
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	0d 90       	ld	r0, X+
     e60:	bc 91       	ld	r27, X
     e62:	a0 2d       	mov	r26, r0
     e64:	b7 cf       	rjmp	.-146    	; 0xdd4 <realloc+0xae>
     e66:	80 91 c1 40 	lds	r24, 0x40C1	; 0x8040c1 <__brkval>
     e6a:	90 91 c2 40 	lds	r25, 0x40C2	; 0x8040c2 <__brkval+0x1>
     e6e:	88 16       	cp	r8, r24
     e70:	99 06       	cpc	r9, r25
     e72:	e1 f4       	brne	.+56     	; 0xeac <realloc+0x186>
     e74:	66 16       	cp	r6, r22
     e76:	77 06       	cpc	r7, r23
     e78:	c8 f4       	brcc	.+50     	; 0xeac <realloc+0x186>
     e7a:	80 91 00 40 	lds	r24, 0x4000	; 0x804000 <__DATA_REGION_ORIGIN__>
     e7e:	90 91 01 40 	lds	r25, 0x4001	; 0x804001 <__DATA_REGION_ORIGIN__+0x1>
     e82:	00 97       	sbiw	r24, 0x00	; 0
     e84:	41 f4       	brne	.+16     	; 0xe96 <realloc+0x170>
     e86:	8d b7       	in	r24, 0x3d	; 61
     e88:	9e b7       	in	r25, 0x3e	; 62
     e8a:	40 91 04 40 	lds	r20, 0x4004	; 0x804004 <__malloc_margin>
     e8e:	50 91 05 40 	lds	r21, 0x4005	; 0x804005 <__malloc_margin+0x1>
     e92:	84 1b       	sub	r24, r20
     e94:	95 0b       	sbc	r25, r21
     e96:	e8 17       	cp	r30, r24
     e98:	f9 07       	cpc	r31, r25
     e9a:	c8 f4       	brcc	.+50     	; 0xece <realloc+0x1a8>
     e9c:	e0 93 c1 40 	sts	0x40C1, r30	; 0x8040c1 <__brkval>
     ea0:	f0 93 c2 40 	sts	0x40C2, r31	; 0x8040c2 <__brkval+0x1>
     ea4:	f9 01       	movw	r30, r18
     ea6:	60 83       	st	Z, r22
     ea8:	71 83       	std	Z+1, r23	; 0x01
     eaa:	0f c0       	rjmp	.+30     	; 0xeca <realloc+0x1a4>
     eac:	cb 01       	movw	r24, r22
     eae:	0e 94 72 05 	call	0xae4	; 0xae4 <malloc>
     eb2:	7c 01       	movw	r14, r24
     eb4:	00 97       	sbiw	r24, 0x00	; 0
     eb6:	59 f0       	breq	.+22     	; 0xece <realloc+0x1a8>
     eb8:	a8 01       	movw	r20, r16
     eba:	be 01       	movw	r22, r28
     ebc:	0e 94 78 07 	call	0xef0	; 0xef0 <memcpy>
     ec0:	ce 01       	movw	r24, r28
     ec2:	0e 94 0a 06 	call	0xc14	; 0xc14 <free>
     ec6:	c7 01       	movw	r24, r14
     ec8:	04 c0       	rjmp	.+8      	; 0xed2 <realloc+0x1ac>
     eca:	ce 01       	movw	r24, r28
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <realloc+0x1ac>
     ece:	80 e0       	ldi	r24, 0x00	; 0
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	df 91       	pop	r29
     ed4:	cf 91       	pop	r28
     ed6:	1f 91       	pop	r17
     ed8:	0f 91       	pop	r16
     eda:	ff 90       	pop	r15
     edc:	ef 90       	pop	r14
     ede:	df 90       	pop	r13
     ee0:	cf 90       	pop	r12
     ee2:	bf 90       	pop	r11
     ee4:	af 90       	pop	r10
     ee6:	9f 90       	pop	r9
     ee8:	8f 90       	pop	r8
     eea:	7f 90       	pop	r7
     eec:	6f 90       	pop	r6
     eee:	08 95       	ret

00000ef0 <memcpy>:
     ef0:	fb 01       	movw	r30, r22
     ef2:	dc 01       	movw	r26, r24
     ef4:	02 c0       	rjmp	.+4      	; 0xefa <memcpy+0xa>
     ef6:	01 90       	ld	r0, Z+
     ef8:	0d 92       	st	X+, r0
     efa:	41 50       	subi	r20, 0x01	; 1
     efc:	50 40       	sbci	r21, 0x00	; 0
     efe:	d8 f7       	brcc	.-10     	; 0xef6 <memcpy+0x6>
     f00:	08 95       	ret

00000f02 <fwrite>:
     f02:	8f 92       	push	r8
     f04:	9f 92       	push	r9
     f06:	af 92       	push	r10
     f08:	bf 92       	push	r11
     f0a:	cf 92       	push	r12
     f0c:	df 92       	push	r13
     f0e:	ef 92       	push	r14
     f10:	ff 92       	push	r15
     f12:	0f 93       	push	r16
     f14:	1f 93       	push	r17
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	5b 01       	movw	r10, r22
     f1c:	4a 01       	movw	r8, r20
     f1e:	79 01       	movw	r14, r18
     f20:	d9 01       	movw	r26, r18
     f22:	13 96       	adiw	r26, 0x03	; 3
     f24:	2c 91       	ld	r18, X
     f26:	21 ff       	sbrs	r18, 1
     f28:	1d c0       	rjmp	.+58     	; 0xf64 <fwrite+0x62>
     f2a:	c0 e0       	ldi	r28, 0x00	; 0
     f2c:	d0 e0       	ldi	r29, 0x00	; 0
     f2e:	c8 15       	cp	r28, r8
     f30:	d9 05       	cpc	r29, r9
     f32:	d9 f0       	breq	.+54     	; 0xf6a <fwrite+0x68>
     f34:	8c 01       	movw	r16, r24
     f36:	6c 01       	movw	r12, r24
     f38:	ca 0c       	add	r12, r10
     f3a:	db 1c       	adc	r13, r11
     f3c:	c8 01       	movw	r24, r16
     f3e:	0c 15       	cp	r16, r12
     f40:	1d 05       	cpc	r17, r13
     f42:	71 f0       	breq	.+28     	; 0xf60 <fwrite+0x5e>
     f44:	0f 5f       	subi	r16, 0xFF	; 255
     f46:	1f 4f       	sbci	r17, 0xFF	; 255
     f48:	d7 01       	movw	r26, r14
     f4a:	18 96       	adiw	r26, 0x08	; 8
     f4c:	ed 91       	ld	r30, X+
     f4e:	fc 91       	ld	r31, X
     f50:	19 97       	sbiw	r26, 0x09	; 9
     f52:	b7 01       	movw	r22, r14
     f54:	dc 01       	movw	r26, r24
     f56:	8c 91       	ld	r24, X
     f58:	09 95       	icall
     f5a:	89 2b       	or	r24, r25
     f5c:	79 f3       	breq	.-34     	; 0xf3c <fwrite+0x3a>
     f5e:	05 c0       	rjmp	.+10     	; 0xf6a <fwrite+0x68>
     f60:	21 96       	adiw	r28, 0x01	; 1
     f62:	e5 cf       	rjmp	.-54     	; 0xf2e <fwrite+0x2c>
     f64:	80 e0       	ldi	r24, 0x00	; 0
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	01 c0       	rjmp	.+2      	; 0xf6c <fwrite+0x6a>
     f6a:	ce 01       	movw	r24, r28
     f6c:	df 91       	pop	r29
     f6e:	cf 91       	pop	r28
     f70:	1f 91       	pop	r17
     f72:	0f 91       	pop	r16
     f74:	ff 90       	pop	r15
     f76:	ef 90       	pop	r14
     f78:	df 90       	pop	r13
     f7a:	cf 90       	pop	r12
     f7c:	bf 90       	pop	r11
     f7e:	af 90       	pop	r10
     f80:	9f 90       	pop	r9
     f82:	8f 90       	pop	r8
     f84:	08 95       	ret

00000f86 <printf>:
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	cd b7       	in	r28, 0x3d	; 61
     f8c:	de b7       	in	r29, 0x3e	; 62
     f8e:	ae 01       	movw	r20, r28
     f90:	4b 5f       	subi	r20, 0xFB	; 251
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	fa 01       	movw	r30, r20
     f96:	61 91       	ld	r22, Z+
     f98:	71 91       	ld	r23, Z+
     f9a:	af 01       	movw	r20, r30
     f9c:	80 91 c7 40 	lds	r24, 0x40C7	; 0x8040c7 <__iob+0x2>
     fa0:	90 91 c8 40 	lds	r25, 0x40C8	; 0x8040c8 <__iob+0x3>
     fa4:	0e 94 07 08 	call	0x100e	; 0x100e <vfprintf>
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	08 95       	ret

00000fae <puts>:
     fae:	0f 93       	push	r16
     fb0:	1f 93       	push	r17
     fb2:	cf 93       	push	r28
     fb4:	df 93       	push	r29
     fb6:	e0 91 c7 40 	lds	r30, 0x40C7	; 0x8040c7 <__iob+0x2>
     fba:	f0 91 c8 40 	lds	r31, 0x40C8	; 0x8040c8 <__iob+0x3>
     fbe:	23 81       	ldd	r18, Z+3	; 0x03
     fc0:	21 ff       	sbrs	r18, 1
     fc2:	1b c0       	rjmp	.+54     	; 0xffa <puts+0x4c>
     fc4:	8c 01       	movw	r16, r24
     fc6:	d0 e0       	ldi	r29, 0x00	; 0
     fc8:	c0 e0       	ldi	r28, 0x00	; 0
     fca:	f8 01       	movw	r30, r16
     fcc:	81 91       	ld	r24, Z+
     fce:	8f 01       	movw	r16, r30
     fd0:	60 91 c7 40 	lds	r22, 0x40C7	; 0x8040c7 <__iob+0x2>
     fd4:	70 91 c8 40 	lds	r23, 0x40C8	; 0x8040c8 <__iob+0x3>
     fd8:	db 01       	movw	r26, r22
     fda:	18 96       	adiw	r26, 0x08	; 8
     fdc:	ed 91       	ld	r30, X+
     fde:	fc 91       	ld	r31, X
     fe0:	19 97       	sbiw	r26, 0x09	; 9
     fe2:	88 23       	and	r24, r24
     fe4:	31 f0       	breq	.+12     	; 0xff2 <puts+0x44>
     fe6:	09 95       	icall
     fe8:	89 2b       	or	r24, r25
     fea:	79 f3       	breq	.-34     	; 0xfca <puts+0x1c>
     fec:	df ef       	ldi	r29, 0xFF	; 255
     fee:	cf ef       	ldi	r28, 0xFF	; 255
     ff0:	ec cf       	rjmp	.-40     	; 0xfca <puts+0x1c>
     ff2:	8a e0       	ldi	r24, 0x0A	; 10
     ff4:	09 95       	icall
     ff6:	89 2b       	or	r24, r25
     ff8:	19 f0       	breq	.+6      	; 0x1000 <puts+0x52>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	9f ef       	ldi	r25, 0xFF	; 255
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <puts+0x56>
    1000:	8d 2f       	mov	r24, r29
    1002:	9c 2f       	mov	r25, r28
    1004:	df 91       	pop	r29
    1006:	cf 91       	pop	r28
    1008:	1f 91       	pop	r17
    100a:	0f 91       	pop	r16
    100c:	08 95       	ret

0000100e <vfprintf>:
    100e:	2f 92       	push	r2
    1010:	3f 92       	push	r3
    1012:	4f 92       	push	r4
    1014:	5f 92       	push	r5
    1016:	6f 92       	push	r6
    1018:	7f 92       	push	r7
    101a:	8f 92       	push	r8
    101c:	9f 92       	push	r9
    101e:	af 92       	push	r10
    1020:	bf 92       	push	r11
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	2b 97       	sbiw	r28, 0x0b	; 11
    1038:	cd bf       	out	0x3d, r28	; 61
    103a:	de bf       	out	0x3e, r29	; 62
    103c:	6c 01       	movw	r12, r24
    103e:	7b 01       	movw	r14, r22
    1040:	8a 01       	movw	r16, r20
    1042:	fc 01       	movw	r30, r24
    1044:	16 82       	std	Z+6, r1	; 0x06
    1046:	17 82       	std	Z+7, r1	; 0x07
    1048:	83 81       	ldd	r24, Z+3	; 0x03
    104a:	81 ff       	sbrs	r24, 1
    104c:	cc c1       	rjmp	.+920    	; 0x13e6 <vfprintf+0x3d8>
    104e:	ce 01       	movw	r24, r28
    1050:	01 96       	adiw	r24, 0x01	; 1
    1052:	3c 01       	movw	r6, r24
    1054:	f6 01       	movw	r30, r12
    1056:	93 81       	ldd	r25, Z+3	; 0x03
    1058:	f7 01       	movw	r30, r14
    105a:	93 fd       	sbrc	r25, 3
    105c:	85 91       	lpm	r24, Z+
    105e:	93 ff       	sbrs	r25, 3
    1060:	81 91       	ld	r24, Z+
    1062:	7f 01       	movw	r14, r30
    1064:	88 23       	and	r24, r24
    1066:	09 f4       	brne	.+2      	; 0x106a <vfprintf+0x5c>
    1068:	ba c1       	rjmp	.+884    	; 0x13de <vfprintf+0x3d0>
    106a:	85 32       	cpi	r24, 0x25	; 37
    106c:	39 f4       	brne	.+14     	; 0x107c <vfprintf+0x6e>
    106e:	93 fd       	sbrc	r25, 3
    1070:	85 91       	lpm	r24, Z+
    1072:	93 ff       	sbrs	r25, 3
    1074:	81 91       	ld	r24, Z+
    1076:	7f 01       	movw	r14, r30
    1078:	85 32       	cpi	r24, 0x25	; 37
    107a:	29 f4       	brne	.+10     	; 0x1086 <vfprintf+0x78>
    107c:	b6 01       	movw	r22, r12
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    1084:	e7 cf       	rjmp	.-50     	; 0x1054 <vfprintf+0x46>
    1086:	91 2c       	mov	r9, r1
    1088:	21 2c       	mov	r2, r1
    108a:	31 2c       	mov	r3, r1
    108c:	ff e1       	ldi	r31, 0x1F	; 31
    108e:	f3 15       	cp	r31, r3
    1090:	d8 f0       	brcs	.+54     	; 0x10c8 <vfprintf+0xba>
    1092:	8b 32       	cpi	r24, 0x2B	; 43
    1094:	79 f0       	breq	.+30     	; 0x10b4 <vfprintf+0xa6>
    1096:	38 f4       	brcc	.+14     	; 0x10a6 <vfprintf+0x98>
    1098:	80 32       	cpi	r24, 0x20	; 32
    109a:	79 f0       	breq	.+30     	; 0x10ba <vfprintf+0xac>
    109c:	83 32       	cpi	r24, 0x23	; 35
    109e:	a1 f4       	brne	.+40     	; 0x10c8 <vfprintf+0xba>
    10a0:	23 2d       	mov	r18, r3
    10a2:	20 61       	ori	r18, 0x10	; 16
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <vfprintf+0xd2>
    10a6:	8d 32       	cpi	r24, 0x2D	; 45
    10a8:	61 f0       	breq	.+24     	; 0x10c2 <vfprintf+0xb4>
    10aa:	80 33       	cpi	r24, 0x30	; 48
    10ac:	69 f4       	brne	.+26     	; 0x10c8 <vfprintf+0xba>
    10ae:	23 2d       	mov	r18, r3
    10b0:	21 60       	ori	r18, 0x01	; 1
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <vfprintf+0xd2>
    10b4:	83 2d       	mov	r24, r3
    10b6:	82 60       	ori	r24, 0x02	; 2
    10b8:	38 2e       	mov	r3, r24
    10ba:	e3 2d       	mov	r30, r3
    10bc:	e4 60       	ori	r30, 0x04	; 4
    10be:	3e 2e       	mov	r3, r30
    10c0:	2a c0       	rjmp	.+84     	; 0x1116 <vfprintf+0x108>
    10c2:	f3 2d       	mov	r31, r3
    10c4:	f8 60       	ori	r31, 0x08	; 8
    10c6:	1d c0       	rjmp	.+58     	; 0x1102 <vfprintf+0xf4>
    10c8:	37 fc       	sbrc	r3, 7
    10ca:	2d c0       	rjmp	.+90     	; 0x1126 <vfprintf+0x118>
    10cc:	20 ed       	ldi	r18, 0xD0	; 208
    10ce:	28 0f       	add	r18, r24
    10d0:	2a 30       	cpi	r18, 0x0A	; 10
    10d2:	40 f0       	brcs	.+16     	; 0x10e4 <vfprintf+0xd6>
    10d4:	8e 32       	cpi	r24, 0x2E	; 46
    10d6:	b9 f4       	brne	.+46     	; 0x1106 <vfprintf+0xf8>
    10d8:	36 fc       	sbrc	r3, 6
    10da:	81 c1       	rjmp	.+770    	; 0x13de <vfprintf+0x3d0>
    10dc:	23 2d       	mov	r18, r3
    10de:	20 64       	ori	r18, 0x40	; 64
    10e0:	32 2e       	mov	r3, r18
    10e2:	19 c0       	rjmp	.+50     	; 0x1116 <vfprintf+0x108>
    10e4:	36 fe       	sbrs	r3, 6
    10e6:	06 c0       	rjmp	.+12     	; 0x10f4 <vfprintf+0xe6>
    10e8:	8a e0       	ldi	r24, 0x0A	; 10
    10ea:	98 9e       	mul	r9, r24
    10ec:	20 0d       	add	r18, r0
    10ee:	11 24       	eor	r1, r1
    10f0:	92 2e       	mov	r9, r18
    10f2:	11 c0       	rjmp	.+34     	; 0x1116 <vfprintf+0x108>
    10f4:	ea e0       	ldi	r30, 0x0A	; 10
    10f6:	2e 9e       	mul	r2, r30
    10f8:	20 0d       	add	r18, r0
    10fa:	11 24       	eor	r1, r1
    10fc:	22 2e       	mov	r2, r18
    10fe:	f3 2d       	mov	r31, r3
    1100:	f0 62       	ori	r31, 0x20	; 32
    1102:	3f 2e       	mov	r3, r31
    1104:	08 c0       	rjmp	.+16     	; 0x1116 <vfprintf+0x108>
    1106:	8c 36       	cpi	r24, 0x6C	; 108
    1108:	21 f4       	brne	.+8      	; 0x1112 <vfprintf+0x104>
    110a:	83 2d       	mov	r24, r3
    110c:	80 68       	ori	r24, 0x80	; 128
    110e:	38 2e       	mov	r3, r24
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <vfprintf+0x108>
    1112:	88 36       	cpi	r24, 0x68	; 104
    1114:	41 f4       	brne	.+16     	; 0x1126 <vfprintf+0x118>
    1116:	f7 01       	movw	r30, r14
    1118:	93 fd       	sbrc	r25, 3
    111a:	85 91       	lpm	r24, Z+
    111c:	93 ff       	sbrs	r25, 3
    111e:	81 91       	ld	r24, Z+
    1120:	7f 01       	movw	r14, r30
    1122:	81 11       	cpse	r24, r1
    1124:	b3 cf       	rjmp	.-154    	; 0x108c <vfprintf+0x7e>
    1126:	98 2f       	mov	r25, r24
    1128:	9f 7d       	andi	r25, 0xDF	; 223
    112a:	95 54       	subi	r25, 0x45	; 69
    112c:	93 30       	cpi	r25, 0x03	; 3
    112e:	28 f4       	brcc	.+10     	; 0x113a <vfprintf+0x12c>
    1130:	0c 5f       	subi	r16, 0xFC	; 252
    1132:	1f 4f       	sbci	r17, 0xFF	; 255
    1134:	9f e3       	ldi	r25, 0x3F	; 63
    1136:	99 83       	std	Y+1, r25	; 0x01
    1138:	0d c0       	rjmp	.+26     	; 0x1154 <vfprintf+0x146>
    113a:	83 36       	cpi	r24, 0x63	; 99
    113c:	31 f0       	breq	.+12     	; 0x114a <vfprintf+0x13c>
    113e:	83 37       	cpi	r24, 0x73	; 115
    1140:	71 f0       	breq	.+28     	; 0x115e <vfprintf+0x150>
    1142:	83 35       	cpi	r24, 0x53	; 83
    1144:	09 f0       	breq	.+2      	; 0x1148 <vfprintf+0x13a>
    1146:	59 c0       	rjmp	.+178    	; 0x11fa <vfprintf+0x1ec>
    1148:	21 c0       	rjmp	.+66     	; 0x118c <vfprintf+0x17e>
    114a:	f8 01       	movw	r30, r16
    114c:	80 81       	ld	r24, Z
    114e:	89 83       	std	Y+1, r24	; 0x01
    1150:	0e 5f       	subi	r16, 0xFE	; 254
    1152:	1f 4f       	sbci	r17, 0xFF	; 255
    1154:	88 24       	eor	r8, r8
    1156:	83 94       	inc	r8
    1158:	91 2c       	mov	r9, r1
    115a:	53 01       	movw	r10, r6
    115c:	13 c0       	rjmp	.+38     	; 0x1184 <vfprintf+0x176>
    115e:	28 01       	movw	r4, r16
    1160:	f2 e0       	ldi	r31, 0x02	; 2
    1162:	4f 0e       	add	r4, r31
    1164:	51 1c       	adc	r5, r1
    1166:	f8 01       	movw	r30, r16
    1168:	a0 80       	ld	r10, Z
    116a:	b1 80       	ldd	r11, Z+1	; 0x01
    116c:	36 fe       	sbrs	r3, 6
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <vfprintf+0x168>
    1170:	69 2d       	mov	r22, r9
    1172:	70 e0       	ldi	r23, 0x00	; 0
    1174:	02 c0       	rjmp	.+4      	; 0x117a <vfprintf+0x16c>
    1176:	6f ef       	ldi	r22, 0xFF	; 255
    1178:	7f ef       	ldi	r23, 0xFF	; 255
    117a:	c5 01       	movw	r24, r10
    117c:	0e 94 16 0a 	call	0x142c	; 0x142c <strnlen>
    1180:	4c 01       	movw	r8, r24
    1182:	82 01       	movw	r16, r4
    1184:	f3 2d       	mov	r31, r3
    1186:	ff 77       	andi	r31, 0x7F	; 127
    1188:	3f 2e       	mov	r3, r31
    118a:	16 c0       	rjmp	.+44     	; 0x11b8 <vfprintf+0x1aa>
    118c:	28 01       	movw	r4, r16
    118e:	22 e0       	ldi	r18, 0x02	; 2
    1190:	42 0e       	add	r4, r18
    1192:	51 1c       	adc	r5, r1
    1194:	f8 01       	movw	r30, r16
    1196:	a0 80       	ld	r10, Z
    1198:	b1 80       	ldd	r11, Z+1	; 0x01
    119a:	36 fe       	sbrs	r3, 6
    119c:	03 c0       	rjmp	.+6      	; 0x11a4 <vfprintf+0x196>
    119e:	69 2d       	mov	r22, r9
    11a0:	70 e0       	ldi	r23, 0x00	; 0
    11a2:	02 c0       	rjmp	.+4      	; 0x11a8 <vfprintf+0x19a>
    11a4:	6f ef       	ldi	r22, 0xFF	; 255
    11a6:	7f ef       	ldi	r23, 0xFF	; 255
    11a8:	c5 01       	movw	r24, r10
    11aa:	0e 94 0b 0a 	call	0x1416	; 0x1416 <strnlen_P>
    11ae:	4c 01       	movw	r8, r24
    11b0:	f3 2d       	mov	r31, r3
    11b2:	f0 68       	ori	r31, 0x80	; 128
    11b4:	3f 2e       	mov	r3, r31
    11b6:	82 01       	movw	r16, r4
    11b8:	33 fc       	sbrc	r3, 3
    11ba:	1b c0       	rjmp	.+54     	; 0x11f2 <vfprintf+0x1e4>
    11bc:	82 2d       	mov	r24, r2
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	88 16       	cp	r8, r24
    11c2:	99 06       	cpc	r9, r25
    11c4:	b0 f4       	brcc	.+44     	; 0x11f2 <vfprintf+0x1e4>
    11c6:	b6 01       	movw	r22, r12
    11c8:	80 e2       	ldi	r24, 0x20	; 32
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    11d0:	2a 94       	dec	r2
    11d2:	f4 cf       	rjmp	.-24     	; 0x11bc <vfprintf+0x1ae>
    11d4:	f5 01       	movw	r30, r10
    11d6:	37 fc       	sbrc	r3, 7
    11d8:	85 91       	lpm	r24, Z+
    11da:	37 fe       	sbrs	r3, 7
    11dc:	81 91       	ld	r24, Z+
    11de:	5f 01       	movw	r10, r30
    11e0:	b6 01       	movw	r22, r12
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    11e8:	21 10       	cpse	r2, r1
    11ea:	2a 94       	dec	r2
    11ec:	21 e0       	ldi	r18, 0x01	; 1
    11ee:	82 1a       	sub	r8, r18
    11f0:	91 08       	sbc	r9, r1
    11f2:	81 14       	cp	r8, r1
    11f4:	91 04       	cpc	r9, r1
    11f6:	71 f7       	brne	.-36     	; 0x11d4 <vfprintf+0x1c6>
    11f8:	e8 c0       	rjmp	.+464    	; 0x13ca <vfprintf+0x3bc>
    11fa:	84 36       	cpi	r24, 0x64	; 100
    11fc:	11 f0       	breq	.+4      	; 0x1202 <vfprintf+0x1f4>
    11fe:	89 36       	cpi	r24, 0x69	; 105
    1200:	41 f5       	brne	.+80     	; 0x1252 <vfprintf+0x244>
    1202:	f8 01       	movw	r30, r16
    1204:	37 fe       	sbrs	r3, 7
    1206:	07 c0       	rjmp	.+14     	; 0x1216 <vfprintf+0x208>
    1208:	60 81       	ld	r22, Z
    120a:	71 81       	ldd	r23, Z+1	; 0x01
    120c:	82 81       	ldd	r24, Z+2	; 0x02
    120e:	93 81       	ldd	r25, Z+3	; 0x03
    1210:	0c 5f       	subi	r16, 0xFC	; 252
    1212:	1f 4f       	sbci	r17, 0xFF	; 255
    1214:	08 c0       	rjmp	.+16     	; 0x1226 <vfprintf+0x218>
    1216:	60 81       	ld	r22, Z
    1218:	71 81       	ldd	r23, Z+1	; 0x01
    121a:	07 2e       	mov	r0, r23
    121c:	00 0c       	add	r0, r0
    121e:	88 0b       	sbc	r24, r24
    1220:	99 0b       	sbc	r25, r25
    1222:	0e 5f       	subi	r16, 0xFE	; 254
    1224:	1f 4f       	sbci	r17, 0xFF	; 255
    1226:	f3 2d       	mov	r31, r3
    1228:	ff 76       	andi	r31, 0x6F	; 111
    122a:	3f 2e       	mov	r3, r31
    122c:	97 ff       	sbrs	r25, 7
    122e:	09 c0       	rjmp	.+18     	; 0x1242 <vfprintf+0x234>
    1230:	90 95       	com	r25
    1232:	80 95       	com	r24
    1234:	70 95       	com	r23
    1236:	61 95       	neg	r22
    1238:	7f 4f       	sbci	r23, 0xFF	; 255
    123a:	8f 4f       	sbci	r24, 0xFF	; 255
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	f0 68       	ori	r31, 0x80	; 128
    1240:	3f 2e       	mov	r3, r31
    1242:	2a e0       	ldi	r18, 0x0A	; 10
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	a3 01       	movw	r20, r6
    1248:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__ultoa_invert>
    124c:	88 2e       	mov	r8, r24
    124e:	86 18       	sub	r8, r6
    1250:	45 c0       	rjmp	.+138    	; 0x12dc <vfprintf+0x2ce>
    1252:	85 37       	cpi	r24, 0x75	; 117
    1254:	31 f4       	brne	.+12     	; 0x1262 <vfprintf+0x254>
    1256:	23 2d       	mov	r18, r3
    1258:	2f 7e       	andi	r18, 0xEF	; 239
    125a:	b2 2e       	mov	r11, r18
    125c:	2a e0       	ldi	r18, 0x0A	; 10
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	25 c0       	rjmp	.+74     	; 0x12ac <vfprintf+0x29e>
    1262:	93 2d       	mov	r25, r3
    1264:	99 7f       	andi	r25, 0xF9	; 249
    1266:	b9 2e       	mov	r11, r25
    1268:	8f 36       	cpi	r24, 0x6F	; 111
    126a:	c1 f0       	breq	.+48     	; 0x129c <vfprintf+0x28e>
    126c:	18 f4       	brcc	.+6      	; 0x1274 <vfprintf+0x266>
    126e:	88 35       	cpi	r24, 0x58	; 88
    1270:	79 f0       	breq	.+30     	; 0x1290 <vfprintf+0x282>
    1272:	b5 c0       	rjmp	.+362    	; 0x13de <vfprintf+0x3d0>
    1274:	80 37       	cpi	r24, 0x70	; 112
    1276:	19 f0       	breq	.+6      	; 0x127e <vfprintf+0x270>
    1278:	88 37       	cpi	r24, 0x78	; 120
    127a:	21 f0       	breq	.+8      	; 0x1284 <vfprintf+0x276>
    127c:	b0 c0       	rjmp	.+352    	; 0x13de <vfprintf+0x3d0>
    127e:	e9 2f       	mov	r30, r25
    1280:	e0 61       	ori	r30, 0x10	; 16
    1282:	be 2e       	mov	r11, r30
    1284:	b4 fe       	sbrs	r11, 4
    1286:	0d c0       	rjmp	.+26     	; 0x12a2 <vfprintf+0x294>
    1288:	fb 2d       	mov	r31, r11
    128a:	f4 60       	ori	r31, 0x04	; 4
    128c:	bf 2e       	mov	r11, r31
    128e:	09 c0       	rjmp	.+18     	; 0x12a2 <vfprintf+0x294>
    1290:	34 fe       	sbrs	r3, 4
    1292:	0a c0       	rjmp	.+20     	; 0x12a8 <vfprintf+0x29a>
    1294:	29 2f       	mov	r18, r25
    1296:	26 60       	ori	r18, 0x06	; 6
    1298:	b2 2e       	mov	r11, r18
    129a:	06 c0       	rjmp	.+12     	; 0x12a8 <vfprintf+0x29a>
    129c:	28 e0       	ldi	r18, 0x08	; 8
    129e:	30 e0       	ldi	r19, 0x00	; 0
    12a0:	05 c0       	rjmp	.+10     	; 0x12ac <vfprintf+0x29e>
    12a2:	20 e1       	ldi	r18, 0x10	; 16
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	02 c0       	rjmp	.+4      	; 0x12ac <vfprintf+0x29e>
    12a8:	20 e1       	ldi	r18, 0x10	; 16
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	f8 01       	movw	r30, r16
    12ae:	b7 fe       	sbrs	r11, 7
    12b0:	07 c0       	rjmp	.+14     	; 0x12c0 <vfprintf+0x2b2>
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	0c 5f       	subi	r16, 0xFC	; 252
    12bc:	1f 4f       	sbci	r17, 0xFF	; 255
    12be:	06 c0       	rjmp	.+12     	; 0x12cc <vfprintf+0x2be>
    12c0:	60 81       	ld	r22, Z
    12c2:	71 81       	ldd	r23, Z+1	; 0x01
    12c4:	80 e0       	ldi	r24, 0x00	; 0
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	0e 5f       	subi	r16, 0xFE	; 254
    12ca:	1f 4f       	sbci	r17, 0xFF	; 255
    12cc:	a3 01       	movw	r20, r6
    12ce:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <__ultoa_invert>
    12d2:	88 2e       	mov	r8, r24
    12d4:	86 18       	sub	r8, r6
    12d6:	fb 2d       	mov	r31, r11
    12d8:	ff 77       	andi	r31, 0x7F	; 127
    12da:	3f 2e       	mov	r3, r31
    12dc:	36 fe       	sbrs	r3, 6
    12de:	0d c0       	rjmp	.+26     	; 0x12fa <vfprintf+0x2ec>
    12e0:	23 2d       	mov	r18, r3
    12e2:	2e 7f       	andi	r18, 0xFE	; 254
    12e4:	a2 2e       	mov	r10, r18
    12e6:	89 14       	cp	r8, r9
    12e8:	58 f4       	brcc	.+22     	; 0x1300 <vfprintf+0x2f2>
    12ea:	34 fe       	sbrs	r3, 4
    12ec:	0b c0       	rjmp	.+22     	; 0x1304 <vfprintf+0x2f6>
    12ee:	32 fc       	sbrc	r3, 2
    12f0:	09 c0       	rjmp	.+18     	; 0x1304 <vfprintf+0x2f6>
    12f2:	83 2d       	mov	r24, r3
    12f4:	8e 7e       	andi	r24, 0xEE	; 238
    12f6:	a8 2e       	mov	r10, r24
    12f8:	05 c0       	rjmp	.+10     	; 0x1304 <vfprintf+0x2f6>
    12fa:	b8 2c       	mov	r11, r8
    12fc:	a3 2c       	mov	r10, r3
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <vfprintf+0x2f8>
    1300:	b8 2c       	mov	r11, r8
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <vfprintf+0x2f8>
    1304:	b9 2c       	mov	r11, r9
    1306:	a4 fe       	sbrs	r10, 4
    1308:	0f c0       	rjmp	.+30     	; 0x1328 <vfprintf+0x31a>
    130a:	fe 01       	movw	r30, r28
    130c:	e8 0d       	add	r30, r8
    130e:	f1 1d       	adc	r31, r1
    1310:	80 81       	ld	r24, Z
    1312:	80 33       	cpi	r24, 0x30	; 48
    1314:	21 f4       	brne	.+8      	; 0x131e <vfprintf+0x310>
    1316:	9a 2d       	mov	r25, r10
    1318:	99 7e       	andi	r25, 0xE9	; 233
    131a:	a9 2e       	mov	r10, r25
    131c:	09 c0       	rjmp	.+18     	; 0x1330 <vfprintf+0x322>
    131e:	a2 fe       	sbrs	r10, 2
    1320:	06 c0       	rjmp	.+12     	; 0x132e <vfprintf+0x320>
    1322:	b3 94       	inc	r11
    1324:	b3 94       	inc	r11
    1326:	04 c0       	rjmp	.+8      	; 0x1330 <vfprintf+0x322>
    1328:	8a 2d       	mov	r24, r10
    132a:	86 78       	andi	r24, 0x86	; 134
    132c:	09 f0       	breq	.+2      	; 0x1330 <vfprintf+0x322>
    132e:	b3 94       	inc	r11
    1330:	a3 fc       	sbrc	r10, 3
    1332:	11 c0       	rjmp	.+34     	; 0x1356 <vfprintf+0x348>
    1334:	a0 fe       	sbrs	r10, 0
    1336:	06 c0       	rjmp	.+12     	; 0x1344 <vfprintf+0x336>
    1338:	b2 14       	cp	r11, r2
    133a:	88 f4       	brcc	.+34     	; 0x135e <vfprintf+0x350>
    133c:	28 0c       	add	r2, r8
    133e:	92 2c       	mov	r9, r2
    1340:	9b 18       	sub	r9, r11
    1342:	0e c0       	rjmp	.+28     	; 0x1360 <vfprintf+0x352>
    1344:	b2 14       	cp	r11, r2
    1346:	60 f4       	brcc	.+24     	; 0x1360 <vfprintf+0x352>
    1348:	b6 01       	movw	r22, r12
    134a:	80 e2       	ldi	r24, 0x20	; 32
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    1352:	b3 94       	inc	r11
    1354:	f7 cf       	rjmp	.-18     	; 0x1344 <vfprintf+0x336>
    1356:	b2 14       	cp	r11, r2
    1358:	18 f4       	brcc	.+6      	; 0x1360 <vfprintf+0x352>
    135a:	2b 18       	sub	r2, r11
    135c:	02 c0       	rjmp	.+4      	; 0x1362 <vfprintf+0x354>
    135e:	98 2c       	mov	r9, r8
    1360:	21 2c       	mov	r2, r1
    1362:	a4 fe       	sbrs	r10, 4
    1364:	10 c0       	rjmp	.+32     	; 0x1386 <vfprintf+0x378>
    1366:	b6 01       	movw	r22, r12
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    1370:	a2 fe       	sbrs	r10, 2
    1372:	17 c0       	rjmp	.+46     	; 0x13a2 <vfprintf+0x394>
    1374:	a1 fc       	sbrc	r10, 1
    1376:	03 c0       	rjmp	.+6      	; 0x137e <vfprintf+0x370>
    1378:	88 e7       	ldi	r24, 0x78	; 120
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <vfprintf+0x374>
    137e:	88 e5       	ldi	r24, 0x58	; 88
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	b6 01       	movw	r22, r12
    1384:	0c c0       	rjmp	.+24     	; 0x139e <vfprintf+0x390>
    1386:	8a 2d       	mov	r24, r10
    1388:	86 78       	andi	r24, 0x86	; 134
    138a:	59 f0       	breq	.+22     	; 0x13a2 <vfprintf+0x394>
    138c:	a1 fe       	sbrs	r10, 1
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <vfprintf+0x386>
    1390:	8b e2       	ldi	r24, 0x2B	; 43
    1392:	01 c0       	rjmp	.+2      	; 0x1396 <vfprintf+0x388>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	a7 fc       	sbrc	r10, 7
    1398:	8d e2       	ldi	r24, 0x2D	; 45
    139a:	b6 01       	movw	r22, r12
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    13a2:	89 14       	cp	r8, r9
    13a4:	38 f4       	brcc	.+14     	; 0x13b4 <vfprintf+0x3a6>
    13a6:	b6 01       	movw	r22, r12
    13a8:	80 e3       	ldi	r24, 0x30	; 48
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    13b0:	9a 94       	dec	r9
    13b2:	f7 cf       	rjmp	.-18     	; 0x13a2 <vfprintf+0x394>
    13b4:	8a 94       	dec	r8
    13b6:	f3 01       	movw	r30, r6
    13b8:	e8 0d       	add	r30, r8
    13ba:	f1 1d       	adc	r31, r1
    13bc:	80 81       	ld	r24, Z
    13be:	b6 01       	movw	r22, r12
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    13c6:	81 10       	cpse	r8, r1
    13c8:	f5 cf       	rjmp	.-22     	; 0x13b4 <vfprintf+0x3a6>
    13ca:	22 20       	and	r2, r2
    13cc:	09 f4       	brne	.+2      	; 0x13d0 <vfprintf+0x3c2>
    13ce:	42 ce       	rjmp	.-892    	; 0x1054 <vfprintf+0x46>
    13d0:	b6 01       	movw	r22, r12
    13d2:	80 e2       	ldi	r24, 0x20	; 32
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 21 0a 	call	0x1442	; 0x1442 <fputc>
    13da:	2a 94       	dec	r2
    13dc:	f6 cf       	rjmp	.-20     	; 0x13ca <vfprintf+0x3bc>
    13de:	f6 01       	movw	r30, r12
    13e0:	86 81       	ldd	r24, Z+6	; 0x06
    13e2:	97 81       	ldd	r25, Z+7	; 0x07
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <vfprintf+0x3dc>
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	9f ef       	ldi	r25, 0xFF	; 255
    13ea:	2b 96       	adiw	r28, 0x0b	; 11
    13ec:	cd bf       	out	0x3d, r28	; 61
    13ee:	de bf       	out	0x3e, r29	; 62
    13f0:	df 91       	pop	r29
    13f2:	cf 91       	pop	r28
    13f4:	1f 91       	pop	r17
    13f6:	0f 91       	pop	r16
    13f8:	ff 90       	pop	r15
    13fa:	ef 90       	pop	r14
    13fc:	df 90       	pop	r13
    13fe:	cf 90       	pop	r12
    1400:	bf 90       	pop	r11
    1402:	af 90       	pop	r10
    1404:	9f 90       	pop	r9
    1406:	8f 90       	pop	r8
    1408:	7f 90       	pop	r7
    140a:	6f 90       	pop	r6
    140c:	5f 90       	pop	r5
    140e:	4f 90       	pop	r4
    1410:	3f 90       	pop	r3
    1412:	2f 90       	pop	r2
    1414:	08 95       	ret

00001416 <strnlen_P>:
    1416:	fc 01       	movw	r30, r24
    1418:	05 90       	lpm	r0, Z+
    141a:	61 50       	subi	r22, 0x01	; 1
    141c:	70 40       	sbci	r23, 0x00	; 0
    141e:	01 10       	cpse	r0, r1
    1420:	d8 f7       	brcc	.-10     	; 0x1418 <strnlen_P+0x2>
    1422:	80 95       	com	r24
    1424:	90 95       	com	r25
    1426:	8e 0f       	add	r24, r30
    1428:	9f 1f       	adc	r25, r31
    142a:	08 95       	ret

0000142c <strnlen>:
    142c:	fc 01       	movw	r30, r24
    142e:	61 50       	subi	r22, 0x01	; 1
    1430:	70 40       	sbci	r23, 0x00	; 0
    1432:	01 90       	ld	r0, Z+
    1434:	01 10       	cpse	r0, r1
    1436:	d8 f7       	brcc	.-10     	; 0x142e <strnlen+0x2>
    1438:	80 95       	com	r24
    143a:	90 95       	com	r25
    143c:	8e 0f       	add	r24, r30
    143e:	9f 1f       	adc	r25, r31
    1440:	08 95       	ret

00001442 <fputc>:
    1442:	0f 93       	push	r16
    1444:	1f 93       	push	r17
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	fb 01       	movw	r30, r22
    144c:	23 81       	ldd	r18, Z+3	; 0x03
    144e:	21 fd       	sbrc	r18, 1
    1450:	03 c0       	rjmp	.+6      	; 0x1458 <fputc+0x16>
    1452:	8f ef       	ldi	r24, 0xFF	; 255
    1454:	9f ef       	ldi	r25, 0xFF	; 255
    1456:	2c c0       	rjmp	.+88     	; 0x14b0 <fputc+0x6e>
    1458:	22 ff       	sbrs	r18, 2
    145a:	16 c0       	rjmp	.+44     	; 0x1488 <fputc+0x46>
    145c:	46 81       	ldd	r20, Z+6	; 0x06
    145e:	57 81       	ldd	r21, Z+7	; 0x07
    1460:	24 81       	ldd	r18, Z+4	; 0x04
    1462:	35 81       	ldd	r19, Z+5	; 0x05
    1464:	42 17       	cp	r20, r18
    1466:	53 07       	cpc	r21, r19
    1468:	44 f4       	brge	.+16     	; 0x147a <fputc+0x38>
    146a:	a0 81       	ld	r26, Z
    146c:	b1 81       	ldd	r27, Z+1	; 0x01
    146e:	9d 01       	movw	r18, r26
    1470:	2f 5f       	subi	r18, 0xFF	; 255
    1472:	3f 4f       	sbci	r19, 0xFF	; 255
    1474:	20 83       	st	Z, r18
    1476:	31 83       	std	Z+1, r19	; 0x01
    1478:	8c 93       	st	X, r24
    147a:	26 81       	ldd	r18, Z+6	; 0x06
    147c:	37 81       	ldd	r19, Z+7	; 0x07
    147e:	2f 5f       	subi	r18, 0xFF	; 255
    1480:	3f 4f       	sbci	r19, 0xFF	; 255
    1482:	26 83       	std	Z+6, r18	; 0x06
    1484:	37 83       	std	Z+7, r19	; 0x07
    1486:	14 c0       	rjmp	.+40     	; 0x14b0 <fputc+0x6e>
    1488:	8b 01       	movw	r16, r22
    148a:	ec 01       	movw	r28, r24
    148c:	fb 01       	movw	r30, r22
    148e:	00 84       	ldd	r0, Z+8	; 0x08
    1490:	f1 85       	ldd	r31, Z+9	; 0x09
    1492:	e0 2d       	mov	r30, r0
    1494:	09 95       	icall
    1496:	89 2b       	or	r24, r25
    1498:	e1 f6       	brne	.-72     	; 0x1452 <fputc+0x10>
    149a:	d8 01       	movw	r26, r16
    149c:	16 96       	adiw	r26, 0x06	; 6
    149e:	8d 91       	ld	r24, X+
    14a0:	9c 91       	ld	r25, X
    14a2:	17 97       	sbiw	r26, 0x07	; 7
    14a4:	01 96       	adiw	r24, 0x01	; 1
    14a6:	16 96       	adiw	r26, 0x06	; 6
    14a8:	8d 93       	st	X+, r24
    14aa:	9c 93       	st	X, r25
    14ac:	17 97       	sbiw	r26, 0x07	; 7
    14ae:	ce 01       	movw	r24, r28
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <__ultoa_invert>:
    14ba:	fa 01       	movw	r30, r20
    14bc:	aa 27       	eor	r26, r26
    14be:	28 30       	cpi	r18, 0x08	; 8
    14c0:	51 f1       	breq	.+84     	; 0x1516 <__ultoa_invert+0x5c>
    14c2:	20 31       	cpi	r18, 0x10	; 16
    14c4:	81 f1       	breq	.+96     	; 0x1526 <__ultoa_invert+0x6c>
    14c6:	e8 94       	clt
    14c8:	6f 93       	push	r22
    14ca:	6e 7f       	andi	r22, 0xFE	; 254
    14cc:	6e 5f       	subi	r22, 0xFE	; 254
    14ce:	7f 4f       	sbci	r23, 0xFF	; 255
    14d0:	8f 4f       	sbci	r24, 0xFF	; 255
    14d2:	9f 4f       	sbci	r25, 0xFF	; 255
    14d4:	af 4f       	sbci	r26, 0xFF	; 255
    14d6:	b1 e0       	ldi	r27, 0x01	; 1
    14d8:	3e d0       	rcall	.+124    	; 0x1556 <__ultoa_invert+0x9c>
    14da:	b4 e0       	ldi	r27, 0x04	; 4
    14dc:	3c d0       	rcall	.+120    	; 0x1556 <__ultoa_invert+0x9c>
    14de:	67 0f       	add	r22, r23
    14e0:	78 1f       	adc	r23, r24
    14e2:	89 1f       	adc	r24, r25
    14e4:	9a 1f       	adc	r25, r26
    14e6:	a1 1d       	adc	r26, r1
    14e8:	68 0f       	add	r22, r24
    14ea:	79 1f       	adc	r23, r25
    14ec:	8a 1f       	adc	r24, r26
    14ee:	91 1d       	adc	r25, r1
    14f0:	a1 1d       	adc	r26, r1
    14f2:	6a 0f       	add	r22, r26
    14f4:	71 1d       	adc	r23, r1
    14f6:	81 1d       	adc	r24, r1
    14f8:	91 1d       	adc	r25, r1
    14fa:	a1 1d       	adc	r26, r1
    14fc:	20 d0       	rcall	.+64     	; 0x153e <__ultoa_invert+0x84>
    14fe:	09 f4       	brne	.+2      	; 0x1502 <__ultoa_invert+0x48>
    1500:	68 94       	set
    1502:	3f 91       	pop	r19
    1504:	2a e0       	ldi	r18, 0x0A	; 10
    1506:	26 9f       	mul	r18, r22
    1508:	11 24       	eor	r1, r1
    150a:	30 19       	sub	r19, r0
    150c:	30 5d       	subi	r19, 0xD0	; 208
    150e:	31 93       	st	Z+, r19
    1510:	de f6       	brtc	.-74     	; 0x14c8 <__ultoa_invert+0xe>
    1512:	cf 01       	movw	r24, r30
    1514:	08 95       	ret
    1516:	46 2f       	mov	r20, r22
    1518:	47 70       	andi	r20, 0x07	; 7
    151a:	40 5d       	subi	r20, 0xD0	; 208
    151c:	41 93       	st	Z+, r20
    151e:	b3 e0       	ldi	r27, 0x03	; 3
    1520:	0f d0       	rcall	.+30     	; 0x1540 <__ultoa_invert+0x86>
    1522:	c9 f7       	brne	.-14     	; 0x1516 <__ultoa_invert+0x5c>
    1524:	f6 cf       	rjmp	.-20     	; 0x1512 <__ultoa_invert+0x58>
    1526:	46 2f       	mov	r20, r22
    1528:	4f 70       	andi	r20, 0x0F	; 15
    152a:	40 5d       	subi	r20, 0xD0	; 208
    152c:	4a 33       	cpi	r20, 0x3A	; 58
    152e:	18 f0       	brcs	.+6      	; 0x1536 <__ultoa_invert+0x7c>
    1530:	49 5d       	subi	r20, 0xD9	; 217
    1532:	31 fd       	sbrc	r19, 1
    1534:	40 52       	subi	r20, 0x20	; 32
    1536:	41 93       	st	Z+, r20
    1538:	02 d0       	rcall	.+4      	; 0x153e <__ultoa_invert+0x84>
    153a:	a9 f7       	brne	.-22     	; 0x1526 <__ultoa_invert+0x6c>
    153c:	ea cf       	rjmp	.-44     	; 0x1512 <__ultoa_invert+0x58>
    153e:	b4 e0       	ldi	r27, 0x04	; 4
    1540:	a6 95       	lsr	r26
    1542:	97 95       	ror	r25
    1544:	87 95       	ror	r24
    1546:	77 95       	ror	r23
    1548:	67 95       	ror	r22
    154a:	ba 95       	dec	r27
    154c:	c9 f7       	brne	.-14     	; 0x1540 <__ultoa_invert+0x86>
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	61 05       	cpc	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	08 95       	ret
    1556:	9b 01       	movw	r18, r22
    1558:	ac 01       	movw	r20, r24
    155a:	0a 2e       	mov	r0, r26
    155c:	06 94       	lsr	r0
    155e:	57 95       	ror	r21
    1560:	47 95       	ror	r20
    1562:	37 95       	ror	r19
    1564:	27 95       	ror	r18
    1566:	ba 95       	dec	r27
    1568:	c9 f7       	brne	.-14     	; 0x155c <__ultoa_invert+0xa2>
    156a:	62 0f       	add	r22, r18
    156c:	73 1f       	adc	r23, r19
    156e:	84 1f       	adc	r24, r20
    1570:	95 1f       	adc	r25, r21
    1572:	a0 1d       	adc	r26, r0
    1574:	08 95       	ret

00001576 <_exit>:
    1576:	f8 94       	cli

00001578 <__stop_program>:
    1578:	ff cf       	rjmp	.-2      	; 0x1578 <__stop_program>
