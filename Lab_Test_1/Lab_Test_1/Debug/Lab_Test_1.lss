
Lab_Test_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00804000  00804000  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005cc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000650  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  00000690  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000334b  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002e58  00000000  00000000  00003a0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004cf  00000000  00000000  00006863  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00006d34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000017c5  00000000  00000000  00006dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031e  00000000  00000000  00008585  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  000088a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ec:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  f0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000f4 <__ctors_end>:
  f4:	11 24       	eor	r1, r1
  f6:	1f be       	out	0x3f, r1	; 63
  f8:	cf ef       	ldi	r28, 0xFF	; 255
  fa:	cd bf       	out	0x3d, r28	; 61
  fc:	df e7       	ldi	r29, 0x7F	; 127
  fe:	de bf       	out	0x3e, r29	; 62
 100:	0e 94 01 01 	call	0x202	; 0x202 <main>
 104:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <delay>:
#include <avr/io.h>
#define F_CPU 4000000UL
#include <util/delay.h>

void delay(double time_ms) {
 10c:	cf 92       	push	r12
 10e:	df 92       	push	r13
 110:	ef 92       	push	r14
 112:	ff 92       	push	r15
 114:	cf 93       	push	r28
 116:	df 93       	push	r29
 118:	6b 01       	movw	r12, r22
 11a:	7c 01       	movw	r14, r24
	for (int i = 0; i < time_ms; i++) {
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	07 c0       	rjmp	.+14     	; 0x130 <delay+0x24>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 122:	87 ee       	ldi	r24, 0xE7	; 231
 124:	93 e0       	ldi	r25, 0x03	; 3
 126:	01 97       	sbiw	r24, 0x01	; 1
 128:	f1 f7       	brne	.-4      	; 0x126 <delay+0x1a>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <delay+0x20>
 12c:	00 00       	nop
 12e:	21 96       	adiw	r28, 0x01	; 1
 130:	be 01       	movw	r22, r28
 132:	0d 2e       	mov	r0, r29
 134:	00 0c       	add	r0, r0
 136:	88 0b       	sbc	r24, r24
 138:	99 0b       	sbc	r25, r25
 13a:	0e 94 c7 01 	call	0x38e	; 0x38e <__floatsisf>
 13e:	a7 01       	movw	r20, r14
 140:	96 01       	movw	r18, r12
 142:	0e 94 4e 01 	call	0x29c	; 0x29c <__cmpsf2>
 146:	88 23       	and	r24, r24
 148:	64 f3       	brlt	.-40     	; 0x122 <delay+0x16>
		_delay_ms(1);
	}
}
 14a:	df 91       	pop	r29
 14c:	cf 91       	pop	r28
 14e:	ff 90       	pop	r15
 150:	ef 90       	pop	r14
 152:	df 90       	pop	r13
 154:	cf 90       	pop	r12
 156:	08 95       	ret

00000158 <blink_LED>:

void blink_LED(char num_bm, char dc) {
 158:	cf 92       	push	r12
 15a:	df 92       	push	r13
 15c:	ef 92       	push	r14
 15e:	ff 92       	push	r15
 160:	0f 93       	push	r16
 162:	1f 93       	push	r17
 164:	cf 93       	push	r28
 166:	df 93       	push	r29
 168:	d8 2e       	mov	r13, r24
 16a:	c6 2e       	mov	r12, r22
	double period_ms = 1000 / 4;
	for (int i = 0; i < 4; i++) {
 16c:	c0 e0       	ldi	r28, 0x00	; 0
 16e:	d0 e0       	ldi	r29, 0x00	; 0
 170:	3c c0       	rjmp	.+120    	; 0x1ea <blink_LED+0x92>
		PORTD.OUT |= num_bm;
 172:	00 e6       	ldi	r16, 0x60	; 96
 174:	14 e0       	ldi	r17, 0x04	; 4
 176:	f8 01       	movw	r30, r16
 178:	84 81       	ldd	r24, Z+4	; 0x04
 17a:	8d 29       	or	r24, r13
 17c:	84 83       	std	Z+4, r24	; 0x04
		delay(period_ms * dc / 100);
 17e:	ec 2c       	mov	r14, r12
 180:	f1 2c       	mov	r15, r1
 182:	b7 01       	movw	r22, r14
 184:	0f 2c       	mov	r0, r15
 186:	00 0c       	add	r0, r0
 188:	88 0b       	sbc	r24, r24
 18a:	99 0b       	sbc	r25, r25
 18c:	0e 94 c7 01 	call	0x38e	; 0x38e <__floatsisf>
 190:	20 e0       	ldi	r18, 0x00	; 0
 192:	30 e0       	ldi	r19, 0x00	; 0
 194:	4a e7       	ldi	r20, 0x7A	; 122
 196:	53 e4       	ldi	r21, 0x43	; 67
 198:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 19c:	20 e0       	ldi	r18, 0x00	; 0
 19e:	30 e0       	ldi	r19, 0x00	; 0
 1a0:	48 ec       	ldi	r20, 0xC8	; 200
 1a2:	52 e4       	ldi	r21, 0x42	; 66
 1a4:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divsf3>
 1a8:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
		PORTD.OUT &= ~num_bm;
 1ac:	f8 01       	movw	r30, r16
 1ae:	84 81       	ldd	r24, Z+4	; 0x04
 1b0:	9d 2d       	mov	r25, r13
 1b2:	90 95       	com	r25
 1b4:	89 23       	and	r24, r25
 1b6:	84 83       	std	Z+4, r24	; 0x04
		delay(period_ms * (100 - dc) / 100);
 1b8:	64 e6       	ldi	r22, 0x64	; 100
 1ba:	70 e0       	ldi	r23, 0x00	; 0
 1bc:	6e 19       	sub	r22, r14
 1be:	7f 09       	sbc	r23, r15
 1c0:	07 2e       	mov	r0, r23
 1c2:	00 0c       	add	r0, r0
 1c4:	88 0b       	sbc	r24, r24
 1c6:	99 0b       	sbc	r25, r25
 1c8:	0e 94 c7 01 	call	0x38e	; 0x38e <__floatsisf>
 1cc:	20 e0       	ldi	r18, 0x00	; 0
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	4a e7       	ldi	r20, 0x7A	; 122
 1d2:	53 e4       	ldi	r21, 0x43	; 67
 1d4:	0e 94 77 02 	call	0x4ee	; 0x4ee <__mulsf3>
 1d8:	20 e0       	ldi	r18, 0x00	; 0
 1da:	30 e0       	ldi	r19, 0x00	; 0
 1dc:	48 ec       	ldi	r20, 0xC8	; 200
 1de:	52 e4       	ldi	r21, 0x42	; 66
 1e0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <__divsf3>
 1e4:	0e 94 86 00 	call	0x10c	; 0x10c <delay>
	}
}

void blink_LED(char num_bm, char dc) {
	double period_ms = 1000 / 4;
	for (int i = 0; i < 4; i++) {
 1e8:	21 96       	adiw	r28, 0x01	; 1
 1ea:	c4 30       	cpi	r28, 0x04	; 4
 1ec:	d1 05       	cpc	r29, r1
 1ee:	0c f2       	brlt	.-126    	; 0x172 <blink_LED+0x1a>
		PORTD.OUT |= num_bm;
		delay(period_ms * dc / 100);
		PORTD.OUT &= ~num_bm;
		delay(period_ms * (100 - dc) / 100);
	}
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	1f 91       	pop	r17
 1f6:	0f 91       	pop	r16
 1f8:	ff 90       	pop	r15
 1fa:	ef 90       	pop	r14
 1fc:	df 90       	pop	r13
 1fe:	cf 90       	pop	r12
 200:	08 95       	ret

00000202 <main>:

int main(void)
{
	// enable output on PORTD, output low
    PORTD.DIR = 0xff;
 202:	e0 e6       	ldi	r30, 0x60	; 96
 204:	f4 e0       	ldi	r31, 0x04	; 4
 206:	8f ef       	ldi	r24, 0xFF	; 255
 208:	80 83       	st	Z, r24
	PORTD.OUT = 0x00;
 20a:	14 82       	std	Z+4, r1	; 0x04
	
	// enable input on PORTB, use on-board button
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
 20c:	e0 e2       	ldi	r30, 0x20	; 32
 20e:	f4 e0       	ldi	r31, 0x04	; 4
 210:	82 89       	ldd	r24, Z+18	; 0x12
 212:	88 60       	ori	r24, 0x08	; 8
 214:	82 8b       	std	Z+18, r24	; 0x12
	PORTB.DIR = 0x00;
 216:	10 82       	st	Z, r1
	char seq = 0x00;
		
	//char seq = 0x00;
	
	unsigned char btn_handled2 = 0;
	unsigned char btn_handled5 = 0;
 218:	d1 2c       	mov	r13, r1
	
	char seq = 0x00;
		
	//char seq = 0x00;
	
	unsigned char btn_handled2 = 0;
 21a:	00 e0       	ldi	r16, 0x00	; 0
	// duty cycle in percentage
	int dc = 50;
	char dir = 1;
	char num_bm = (1 << 2);
	
	char seq = 0x00;
 21c:	d0 e0       	ldi	r29, 0x00	; 0
	PORTB.DIR = 0x00;
	
	// duty cycle in percentage
	int dc = 50;
	char dir = 1;
	char num_bm = (1 << 2);
 21e:	c4 e0       	ldi	r28, 0x04	; 4
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
	PORTB.DIR = 0x00;
	
	// duty cycle in percentage
	int dc = 50;
	char dir = 1;
 220:	11 e0       	ldi	r17, 0x01	; 1
	// enable input on PORTB, use on-board button
	PORTB.PIN2CTRL |= PORT_PULLUPEN_bm;
	PORTB.DIR = 0x00;
	
	// duty cycle in percentage
	int dc = 50;
 222:	0f 2e       	mov	r0, r31
 224:	f2 e3       	ldi	r31, 0x32	; 50
 226:	ef 2e       	mov	r14, r31
 228:	f1 2c       	mov	r15, r1
 22a:	f0 2d       	mov	r31, r0
	
    while (1) 
    {	
		
		// BTN2 external, 1
		if ( !(PORTB.IN & PIN5_bm) ) {
 22c:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 230:	85 fd       	sbrc	r24, 5
 232:	07 c0       	rjmp	.+14     	; 0x242 <main+0x40>
			if (!btn_handled5) {
 234:	d1 10       	cpse	r13, r1
 236:	06 c0       	rjmp	.+12     	; 0x244 <main+0x42>
				dir = -1*dir;
 238:	11 95       	neg	r17
				
				seq = seq << 1;
 23a:	dd 0f       	add	r29, r29
				
				btn_handled5 = 1;
 23c:	dd 24       	eor	r13, r13
 23e:	d3 94       	inc	r13
 240:	01 c0       	rjmp	.+2      	; 0x244 <main+0x42>
			}
		} else {
			btn_handled5 = 0;
 242:	d1 2c       	mov	r13, r1
		}
		
		// BTN1 on-board, 0
		if ( !(PORTB.IN & PIN2_bm) ) {
 244:	80 91 28 04 	lds	r24, 0x0428	; 0x800428 <__TEXT_REGION_LENGTH__+0x7e0428>
 248:	82 fd       	sbrc	r24, 2
 24a:	1a c0       	rjmp	.+52     	; 0x280 <main+0x7e>
			if (!btn_handled2) {
 24c:	01 11       	cpse	r16, r1
 24e:	19 c0       	rjmp	.+50     	; 0x282 <main+0x80>
				if (dc == 25) {
 250:	89 e1       	ldi	r24, 0x19	; 25
 252:	e8 16       	cp	r14, r24
 254:	f1 04       	cpc	r15, r1
 256:	29 f0       	breq	.+10     	; 0x262 <main+0x60>
					dc = 50;
				} else if (dc == 50) {
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	e8 16       	cp	r14, r24
 25c:	f1 04       	cpc	r15, r1
 25e:	61 f4       	brne	.+24     	; 0x278 <main+0x76>
 260:	06 c0       	rjmp	.+12     	; 0x26e <main+0x6c>
		
		// BTN1 on-board, 0
		if ( !(PORTB.IN & PIN2_bm) ) {
			if (!btn_handled2) {
				if (dc == 25) {
					dc = 50;
 262:	0f 2e       	mov	r0, r31
 264:	f2 e3       	ldi	r31, 0x32	; 50
 266:	ef 2e       	mov	r14, r31
 268:	f1 2c       	mov	r15, r1
 26a:	f0 2d       	mov	r31, r0
 26c:	05 c0       	rjmp	.+10     	; 0x278 <main+0x76>
				} else if (dc == 50) {
					dc = 25;
 26e:	0f 2e       	mov	r0, r31
 270:	f9 e1       	ldi	r31, 0x19	; 25
 272:	ef 2e       	mov	r14, r31
 274:	f1 2c       	mov	r15, r1
 276:	f0 2d       	mov	r31, r0
				}
				
				seq = seq << 1;
 278:	dd 0f       	add	r29, r29
				seq |= 1;
 27a:	d1 60       	ori	r29, 0x01	; 1
				
				btn_handled2 = 1;
 27c:	01 e0       	ldi	r16, 0x01	; 1
 27e:	01 c0       	rjmp	.+2      	; 0x282 <main+0x80>
			}
		} else {
			btn_handled2 = 0;
 280:	00 e0       	ldi	r16, 0x00	; 0
		}
		
		if ((seq & 0x0f) == 0b00001101) {
 282:	8d 2f       	mov	r24, r29
 284:	8f 70       	andi	r24, 0x0F	; 15
 286:	8d 30       	cpi	r24, 0x0D	; 13
 288:	19 f4       	brne	.+6      	; 0x290 <main+0x8e>
			seq = 0;
 28a:	d0 e0       	ldi	r29, 0x00	; 0
			num_bm = 0;
 28c:	c0 e0       	ldi	r28, 0x00	; 0
			dir = 1;
 28e:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		blink_LED(num_bm, dc);
 290:	6e 2d       	mov	r22, r14
 292:	8c 2f       	mov	r24, r28
 294:	0e 94 ac 00 	call	0x158	; 0x158 <blink_LED>
		//PORTD.OUT = seq;
		
		num_bm += dir;
 298:	c1 0f       	add	r28, r17
		if (num_bm > 0xff) num_bm = 0;
    }
 29a:	c8 cf       	rjmp	.-112    	; 0x22c <main+0x2a>

0000029c <__cmpsf2>:
 29c:	0e 94 02 02 	call	0x404	; 0x404 <__fp_cmp>
 2a0:	08 f4       	brcc	.+2      	; 0x2a4 <__cmpsf2+0x8>
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	08 95       	ret

000002a6 <__divsf3>:
 2a6:	0e 94 67 01 	call	0x2ce	; 0x2ce <__divsf3x>
 2aa:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_round>
 2ae:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_pscB>
 2b2:	58 f0       	brcs	.+22     	; 0x2ca <__divsf3+0x24>
 2b4:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_pscA>
 2b8:	40 f0       	brcs	.+16     	; 0x2ca <__divsf3+0x24>
 2ba:	29 f4       	brne	.+10     	; 0x2c6 <__divsf3+0x20>
 2bc:	5f 3f       	cpi	r21, 0xFF	; 255
 2be:	29 f0       	breq	.+10     	; 0x2ca <__divsf3+0x24>
 2c0:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_inf>
 2c4:	51 11       	cpse	r21, r1
 2c6:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>
 2ca:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_nan>

000002ce <__divsf3x>:
 2ce:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_split3>
 2d2:	68 f3       	brcs	.-38     	; 0x2ae <__divsf3+0x8>

000002d4 <__divsf3_pse>:
 2d4:	99 23       	and	r25, r25
 2d6:	b1 f3       	breq	.-20     	; 0x2c4 <__divsf3+0x1e>
 2d8:	55 23       	and	r21, r21
 2da:	91 f3       	breq	.-28     	; 0x2c0 <__divsf3+0x1a>
 2dc:	95 1b       	sub	r25, r21
 2de:	55 0b       	sbc	r21, r21
 2e0:	bb 27       	eor	r27, r27
 2e2:	aa 27       	eor	r26, r26
 2e4:	62 17       	cp	r22, r18
 2e6:	73 07       	cpc	r23, r19
 2e8:	84 07       	cpc	r24, r20
 2ea:	38 f0       	brcs	.+14     	; 0x2fa <__divsf3_pse+0x26>
 2ec:	9f 5f       	subi	r25, 0xFF	; 255
 2ee:	5f 4f       	sbci	r21, 0xFF	; 255
 2f0:	22 0f       	add	r18, r18
 2f2:	33 1f       	adc	r19, r19
 2f4:	44 1f       	adc	r20, r20
 2f6:	aa 1f       	adc	r26, r26
 2f8:	a9 f3       	breq	.-22     	; 0x2e4 <__divsf3_pse+0x10>
 2fa:	35 d0       	rcall	.+106    	; 0x366 <__divsf3_pse+0x92>
 2fc:	0e 2e       	mov	r0, r30
 2fe:	3a f0       	brmi	.+14     	; 0x30e <__divsf3_pse+0x3a>
 300:	e0 e8       	ldi	r30, 0x80	; 128
 302:	32 d0       	rcall	.+100    	; 0x368 <__divsf3_pse+0x94>
 304:	91 50       	subi	r25, 0x01	; 1
 306:	50 40       	sbci	r21, 0x00	; 0
 308:	e6 95       	lsr	r30
 30a:	00 1c       	adc	r0, r0
 30c:	ca f7       	brpl	.-14     	; 0x300 <__divsf3_pse+0x2c>
 30e:	2b d0       	rcall	.+86     	; 0x366 <__divsf3_pse+0x92>
 310:	fe 2f       	mov	r31, r30
 312:	29 d0       	rcall	.+82     	; 0x366 <__divsf3_pse+0x92>
 314:	66 0f       	add	r22, r22
 316:	77 1f       	adc	r23, r23
 318:	88 1f       	adc	r24, r24
 31a:	bb 1f       	adc	r27, r27
 31c:	26 17       	cp	r18, r22
 31e:	37 07       	cpc	r19, r23
 320:	48 07       	cpc	r20, r24
 322:	ab 07       	cpc	r26, r27
 324:	b0 e8       	ldi	r27, 0x80	; 128
 326:	09 f0       	breq	.+2      	; 0x32a <__divsf3_pse+0x56>
 328:	bb 0b       	sbc	r27, r27
 32a:	80 2d       	mov	r24, r0
 32c:	bf 01       	movw	r22, r30
 32e:	ff 27       	eor	r31, r31
 330:	93 58       	subi	r25, 0x83	; 131
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	3a f0       	brmi	.+14     	; 0x344 <__divsf3_pse+0x70>
 336:	9e 3f       	cpi	r25, 0xFE	; 254
 338:	51 05       	cpc	r21, r1
 33a:	78 f0       	brcs	.+30     	; 0x35a <__divsf3_pse+0x86>
 33c:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_inf>
 340:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>
 344:	5f 3f       	cpi	r21, 0xFF	; 255
 346:	e4 f3       	brlt	.-8      	; 0x340 <__divsf3_pse+0x6c>
 348:	98 3e       	cpi	r25, 0xE8	; 232
 34a:	d4 f3       	brlt	.-12     	; 0x340 <__divsf3_pse+0x6c>
 34c:	86 95       	lsr	r24
 34e:	77 95       	ror	r23
 350:	67 95       	ror	r22
 352:	b7 95       	ror	r27
 354:	f7 95       	ror	r31
 356:	9f 5f       	subi	r25, 0xFF	; 255
 358:	c9 f7       	brne	.-14     	; 0x34c <__divsf3_pse+0x78>
 35a:	88 0f       	add	r24, r24
 35c:	91 1d       	adc	r25, r1
 35e:	96 95       	lsr	r25
 360:	87 95       	ror	r24
 362:	97 f9       	bld	r25, 7
 364:	08 95       	ret
 366:	e1 e0       	ldi	r30, 0x01	; 1
 368:	66 0f       	add	r22, r22
 36a:	77 1f       	adc	r23, r23
 36c:	88 1f       	adc	r24, r24
 36e:	bb 1f       	adc	r27, r27
 370:	62 17       	cp	r22, r18
 372:	73 07       	cpc	r23, r19
 374:	84 07       	cpc	r24, r20
 376:	ba 07       	cpc	r27, r26
 378:	20 f0       	brcs	.+8      	; 0x382 <__divsf3_pse+0xae>
 37a:	62 1b       	sub	r22, r18
 37c:	73 0b       	sbc	r23, r19
 37e:	84 0b       	sbc	r24, r20
 380:	ba 0b       	sbc	r27, r26
 382:	ee 1f       	adc	r30, r30
 384:	88 f7       	brcc	.-30     	; 0x368 <__divsf3_pse+0x94>
 386:	e0 95       	com	r30
 388:	08 95       	ret

0000038a <__floatunsisf>:
 38a:	e8 94       	clt
 38c:	09 c0       	rjmp	.+18     	; 0x3a0 <__floatsisf+0x12>

0000038e <__floatsisf>:
 38e:	97 fb       	bst	r25, 7
 390:	3e f4       	brtc	.+14     	; 0x3a0 <__floatsisf+0x12>
 392:	90 95       	com	r25
 394:	80 95       	com	r24
 396:	70 95       	com	r23
 398:	61 95       	neg	r22
 39a:	7f 4f       	sbci	r23, 0xFF	; 255
 39c:	8f 4f       	sbci	r24, 0xFF	; 255
 39e:	9f 4f       	sbci	r25, 0xFF	; 255
 3a0:	99 23       	and	r25, r25
 3a2:	a9 f0       	breq	.+42     	; 0x3ce <__floatsisf+0x40>
 3a4:	f9 2f       	mov	r31, r25
 3a6:	96 e9       	ldi	r25, 0x96	; 150
 3a8:	bb 27       	eor	r27, r27
 3aa:	93 95       	inc	r25
 3ac:	f6 95       	lsr	r31
 3ae:	87 95       	ror	r24
 3b0:	77 95       	ror	r23
 3b2:	67 95       	ror	r22
 3b4:	b7 95       	ror	r27
 3b6:	f1 11       	cpse	r31, r1
 3b8:	f8 cf       	rjmp	.-16     	; 0x3aa <__floatsisf+0x1c>
 3ba:	fa f4       	brpl	.+62     	; 0x3fa <__floatsisf+0x6c>
 3bc:	bb 0f       	add	r27, r27
 3be:	11 f4       	brne	.+4      	; 0x3c4 <__floatsisf+0x36>
 3c0:	60 ff       	sbrs	r22, 0
 3c2:	1b c0       	rjmp	.+54     	; 0x3fa <__floatsisf+0x6c>
 3c4:	6f 5f       	subi	r22, 0xFF	; 255
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255
 3c8:	8f 4f       	sbci	r24, 0xFF	; 255
 3ca:	9f 4f       	sbci	r25, 0xFF	; 255
 3cc:	16 c0       	rjmp	.+44     	; 0x3fa <__floatsisf+0x6c>
 3ce:	88 23       	and	r24, r24
 3d0:	11 f0       	breq	.+4      	; 0x3d6 <__floatsisf+0x48>
 3d2:	96 e9       	ldi	r25, 0x96	; 150
 3d4:	11 c0       	rjmp	.+34     	; 0x3f8 <__floatsisf+0x6a>
 3d6:	77 23       	and	r23, r23
 3d8:	21 f0       	breq	.+8      	; 0x3e2 <__floatsisf+0x54>
 3da:	9e e8       	ldi	r25, 0x8E	; 142
 3dc:	87 2f       	mov	r24, r23
 3de:	76 2f       	mov	r23, r22
 3e0:	05 c0       	rjmp	.+10     	; 0x3ec <__floatsisf+0x5e>
 3e2:	66 23       	and	r22, r22
 3e4:	71 f0       	breq	.+28     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
 3e6:	96 e8       	ldi	r25, 0x86	; 134
 3e8:	86 2f       	mov	r24, r22
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	60 e0       	ldi	r22, 0x00	; 0
 3ee:	2a f0       	brmi	.+10     	; 0x3fa <__floatsisf+0x6c>
 3f0:	9a 95       	dec	r25
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	da f7       	brpl	.-10     	; 0x3f0 <__floatsisf+0x62>
 3fa:	88 0f       	add	r24, r24
 3fc:	96 95       	lsr	r25
 3fe:	87 95       	ror	r24
 400:	97 f9       	bld	r25, 7
 402:	08 95       	ret

00000404 <__fp_cmp>:
 404:	99 0f       	add	r25, r25
 406:	00 08       	sbc	r0, r0
 408:	55 0f       	add	r21, r21
 40a:	aa 0b       	sbc	r26, r26
 40c:	e0 e8       	ldi	r30, 0x80	; 128
 40e:	fe ef       	ldi	r31, 0xFE	; 254
 410:	16 16       	cp	r1, r22
 412:	17 06       	cpc	r1, r23
 414:	e8 07       	cpc	r30, r24
 416:	f9 07       	cpc	r31, r25
 418:	c0 f0       	brcs	.+48     	; 0x44a <__fp_cmp+0x46>
 41a:	12 16       	cp	r1, r18
 41c:	13 06       	cpc	r1, r19
 41e:	e4 07       	cpc	r30, r20
 420:	f5 07       	cpc	r31, r21
 422:	98 f0       	brcs	.+38     	; 0x44a <__fp_cmp+0x46>
 424:	62 1b       	sub	r22, r18
 426:	73 0b       	sbc	r23, r19
 428:	84 0b       	sbc	r24, r20
 42a:	95 0b       	sbc	r25, r21
 42c:	39 f4       	brne	.+14     	; 0x43c <__fp_cmp+0x38>
 42e:	0a 26       	eor	r0, r26
 430:	61 f0       	breq	.+24     	; 0x44a <__fp_cmp+0x46>
 432:	23 2b       	or	r18, r19
 434:	24 2b       	or	r18, r20
 436:	25 2b       	or	r18, r21
 438:	21 f4       	brne	.+8      	; 0x442 <__fp_cmp+0x3e>
 43a:	08 95       	ret
 43c:	0a 26       	eor	r0, r26
 43e:	09 f4       	brne	.+2      	; 0x442 <__fp_cmp+0x3e>
 440:	a1 40       	sbci	r26, 0x01	; 1
 442:	a6 95       	lsr	r26
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	81 1d       	adc	r24, r1
 448:	81 1d       	adc	r24, r1
 44a:	08 95       	ret

0000044c <__fp_inf>:
 44c:	97 f9       	bld	r25, 7
 44e:	9f 67       	ori	r25, 0x7F	; 127
 450:	80 e8       	ldi	r24, 0x80	; 128
 452:	70 e0       	ldi	r23, 0x00	; 0
 454:	60 e0       	ldi	r22, 0x00	; 0
 456:	08 95       	ret

00000458 <__fp_nan>:
 458:	9f ef       	ldi	r25, 0xFF	; 255
 45a:	80 ec       	ldi	r24, 0xC0	; 192
 45c:	08 95       	ret

0000045e <__fp_pscA>:
 45e:	00 24       	eor	r0, r0
 460:	0a 94       	dec	r0
 462:	16 16       	cp	r1, r22
 464:	17 06       	cpc	r1, r23
 466:	18 06       	cpc	r1, r24
 468:	09 06       	cpc	r0, r25
 46a:	08 95       	ret

0000046c <__fp_pscB>:
 46c:	00 24       	eor	r0, r0
 46e:	0a 94       	dec	r0
 470:	12 16       	cp	r1, r18
 472:	13 06       	cpc	r1, r19
 474:	14 06       	cpc	r1, r20
 476:	05 06       	cpc	r0, r21
 478:	08 95       	ret

0000047a <__fp_round>:
 47a:	09 2e       	mov	r0, r25
 47c:	03 94       	inc	r0
 47e:	00 0c       	add	r0, r0
 480:	11 f4       	brne	.+4      	; 0x486 <__fp_round+0xc>
 482:	88 23       	and	r24, r24
 484:	52 f0       	brmi	.+20     	; 0x49a <__fp_round+0x20>
 486:	bb 0f       	add	r27, r27
 488:	40 f4       	brcc	.+16     	; 0x49a <__fp_round+0x20>
 48a:	bf 2b       	or	r27, r31
 48c:	11 f4       	brne	.+4      	; 0x492 <__fp_round+0x18>
 48e:	60 ff       	sbrs	r22, 0
 490:	04 c0       	rjmp	.+8      	; 0x49a <__fp_round+0x20>
 492:	6f 5f       	subi	r22, 0xFF	; 255
 494:	7f 4f       	sbci	r23, 0xFF	; 255
 496:	8f 4f       	sbci	r24, 0xFF	; 255
 498:	9f 4f       	sbci	r25, 0xFF	; 255
 49a:	08 95       	ret

0000049c <__fp_split3>:
 49c:	57 fd       	sbrc	r21, 7
 49e:	90 58       	subi	r25, 0x80	; 128
 4a0:	44 0f       	add	r20, r20
 4a2:	55 1f       	adc	r21, r21
 4a4:	59 f0       	breq	.+22     	; 0x4bc <__fp_splitA+0x10>
 4a6:	5f 3f       	cpi	r21, 0xFF	; 255
 4a8:	71 f0       	breq	.+28     	; 0x4c6 <__fp_splitA+0x1a>
 4aa:	47 95       	ror	r20

000004ac <__fp_splitA>:
 4ac:	88 0f       	add	r24, r24
 4ae:	97 fb       	bst	r25, 7
 4b0:	99 1f       	adc	r25, r25
 4b2:	61 f0       	breq	.+24     	; 0x4cc <__fp_splitA+0x20>
 4b4:	9f 3f       	cpi	r25, 0xFF	; 255
 4b6:	79 f0       	breq	.+30     	; 0x4d6 <__fp_splitA+0x2a>
 4b8:	87 95       	ror	r24
 4ba:	08 95       	ret
 4bc:	12 16       	cp	r1, r18
 4be:	13 06       	cpc	r1, r19
 4c0:	14 06       	cpc	r1, r20
 4c2:	55 1f       	adc	r21, r21
 4c4:	f2 cf       	rjmp	.-28     	; 0x4aa <__fp_split3+0xe>
 4c6:	46 95       	lsr	r20
 4c8:	f1 df       	rcall	.-30     	; 0x4ac <__fp_splitA>
 4ca:	08 c0       	rjmp	.+16     	; 0x4dc <__fp_splitA+0x30>
 4cc:	16 16       	cp	r1, r22
 4ce:	17 06       	cpc	r1, r23
 4d0:	18 06       	cpc	r1, r24
 4d2:	99 1f       	adc	r25, r25
 4d4:	f1 cf       	rjmp	.-30     	; 0x4b8 <__fp_splitA+0xc>
 4d6:	86 95       	lsr	r24
 4d8:	71 05       	cpc	r23, r1
 4da:	61 05       	cpc	r22, r1
 4dc:	08 94       	sec
 4de:	08 95       	ret

000004e0 <__fp_zero>:
 4e0:	e8 94       	clt

000004e2 <__fp_szero>:
 4e2:	bb 27       	eor	r27, r27
 4e4:	66 27       	eor	r22, r22
 4e6:	77 27       	eor	r23, r23
 4e8:	cb 01       	movw	r24, r22
 4ea:	97 f9       	bld	r25, 7
 4ec:	08 95       	ret

000004ee <__mulsf3>:
 4ee:	0e 94 8a 02 	call	0x514	; 0x514 <__mulsf3x>
 4f2:	0c 94 3d 02 	jmp	0x47a	; 0x47a <__fp_round>
 4f6:	0e 94 2f 02 	call	0x45e	; 0x45e <__fp_pscA>
 4fa:	38 f0       	brcs	.+14     	; 0x50a <__mulsf3+0x1c>
 4fc:	0e 94 36 02 	call	0x46c	; 0x46c <__fp_pscB>
 500:	20 f0       	brcs	.+8      	; 0x50a <__mulsf3+0x1c>
 502:	95 23       	and	r25, r21
 504:	11 f0       	breq	.+4      	; 0x50a <__mulsf3+0x1c>
 506:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_inf>
 50a:	0c 94 2c 02 	jmp	0x458	; 0x458 <__fp_nan>
 50e:	11 24       	eor	r1, r1
 510:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>

00000514 <__mulsf3x>:
 514:	0e 94 4e 02 	call	0x49c	; 0x49c <__fp_split3>
 518:	70 f3       	brcs	.-36     	; 0x4f6 <__mulsf3+0x8>

0000051a <__mulsf3_pse>:
 51a:	95 9f       	mul	r25, r21
 51c:	c1 f3       	breq	.-16     	; 0x50e <__mulsf3+0x20>
 51e:	95 0f       	add	r25, r21
 520:	50 e0       	ldi	r21, 0x00	; 0
 522:	55 1f       	adc	r21, r21
 524:	62 9f       	mul	r22, r18
 526:	f0 01       	movw	r30, r0
 528:	72 9f       	mul	r23, r18
 52a:	bb 27       	eor	r27, r27
 52c:	f0 0d       	add	r31, r0
 52e:	b1 1d       	adc	r27, r1
 530:	63 9f       	mul	r22, r19
 532:	aa 27       	eor	r26, r26
 534:	f0 0d       	add	r31, r0
 536:	b1 1d       	adc	r27, r1
 538:	aa 1f       	adc	r26, r26
 53a:	64 9f       	mul	r22, r20
 53c:	66 27       	eor	r22, r22
 53e:	b0 0d       	add	r27, r0
 540:	a1 1d       	adc	r26, r1
 542:	66 1f       	adc	r22, r22
 544:	82 9f       	mul	r24, r18
 546:	22 27       	eor	r18, r18
 548:	b0 0d       	add	r27, r0
 54a:	a1 1d       	adc	r26, r1
 54c:	62 1f       	adc	r22, r18
 54e:	73 9f       	mul	r23, r19
 550:	b0 0d       	add	r27, r0
 552:	a1 1d       	adc	r26, r1
 554:	62 1f       	adc	r22, r18
 556:	83 9f       	mul	r24, r19
 558:	a0 0d       	add	r26, r0
 55a:	61 1d       	adc	r22, r1
 55c:	22 1f       	adc	r18, r18
 55e:	74 9f       	mul	r23, r20
 560:	33 27       	eor	r19, r19
 562:	a0 0d       	add	r26, r0
 564:	61 1d       	adc	r22, r1
 566:	23 1f       	adc	r18, r19
 568:	84 9f       	mul	r24, r20
 56a:	60 0d       	add	r22, r0
 56c:	21 1d       	adc	r18, r1
 56e:	82 2f       	mov	r24, r18
 570:	76 2f       	mov	r23, r22
 572:	6a 2f       	mov	r22, r26
 574:	11 24       	eor	r1, r1
 576:	9f 57       	subi	r25, 0x7F	; 127
 578:	50 40       	sbci	r21, 0x00	; 0
 57a:	9a f0       	brmi	.+38     	; 0x5a2 <__mulsf3_pse+0x88>
 57c:	f1 f0       	breq	.+60     	; 0x5ba <__mulsf3_pse+0xa0>
 57e:	88 23       	and	r24, r24
 580:	4a f0       	brmi	.+18     	; 0x594 <__mulsf3_pse+0x7a>
 582:	ee 0f       	add	r30, r30
 584:	ff 1f       	adc	r31, r31
 586:	bb 1f       	adc	r27, r27
 588:	66 1f       	adc	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	88 1f       	adc	r24, r24
 58e:	91 50       	subi	r25, 0x01	; 1
 590:	50 40       	sbci	r21, 0x00	; 0
 592:	a9 f7       	brne	.-22     	; 0x57e <__mulsf3_pse+0x64>
 594:	9e 3f       	cpi	r25, 0xFE	; 254
 596:	51 05       	cpc	r21, r1
 598:	80 f0       	brcs	.+32     	; 0x5ba <__mulsf3_pse+0xa0>
 59a:	0c 94 26 02 	jmp	0x44c	; 0x44c <__fp_inf>
 59e:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__fp_szero>
 5a2:	5f 3f       	cpi	r21, 0xFF	; 255
 5a4:	e4 f3       	brlt	.-8      	; 0x59e <__mulsf3_pse+0x84>
 5a6:	98 3e       	cpi	r25, 0xE8	; 232
 5a8:	d4 f3       	brlt	.-12     	; 0x59e <__mulsf3_pse+0x84>
 5aa:	86 95       	lsr	r24
 5ac:	77 95       	ror	r23
 5ae:	67 95       	ror	r22
 5b0:	b7 95       	ror	r27
 5b2:	f7 95       	ror	r31
 5b4:	e7 95       	ror	r30
 5b6:	9f 5f       	subi	r25, 0xFF	; 255
 5b8:	c1 f7       	brne	.-16     	; 0x5aa <__mulsf3_pse+0x90>
 5ba:	fe 2b       	or	r31, r30
 5bc:	88 0f       	add	r24, r24
 5be:	91 1d       	adc	r25, r1
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <_exit>:
 5c8:	f8 94       	cli

000005ca <__stop_program>:
 5ca:	ff cf       	rjmp	.-2      	; 0x5ca <__stop_program>
